Item do edital: 12.5 Python- palavras reservadas   
 
1. Subtópico:
1. Definição e função das palavras reservadas em Python
Assertivas:
1. As palavras reservadas em Python são definidas pelo próprio interpretador e não podem ser utilizadas como nomes de variáveis.
2. As palavras reservadas em Python são utilizadas para definir a estrutura básica da linguagem e suas funcionalidades.
3. As palavras reservadas em Python são: False, None, True, and, as, assert, break, class, continue, def, del, elif, else, except, finally, for, from, global, if, import, in, is, lambda, nonlocal, not, or, pass, raise, return, try, while, with, yield.
4. A palavra reservada "False" em Python é utilizada para representar o valor booleano "falso".
5. A palavra reservada "True" em Python é utilizada para representar o valor booleano "verdadeiro".
6. A palavra reservada "None" em Python é utilizada para representar um valor nulo ou vazio.
7. A palavra reservada "and" em Python é utilizada para realizar uma operação lógica de "E" entre duas expressões.
8. A palavra reservada "or" em Python é utilizada para realizar uma operação lógica de "OU" entre duas expressões.
9. A palavra reservada "not" em Python é utilizada para negar o valor de uma expressão lógica.
10. A palavra reservada "if" em Python é utilizada para verificar uma condição e executar um bloco de código caso a condição seja verdadeira.

2. Subtópico:
2. Lista completa de palavras reservadas em Python
Assertivas:
1. Em Python, existem um total de 33 palavras reservadas.
2. As palavras reservadas em Python não podem ser utilizadas como identificadores, como nomes de variáveis, funções, classes, entre outros.
3. A palavra reservada "and" é utilizada como um operador lógico para realizar a operação de conjunção.
4. A palavra reservada "or" é utilizada como um operador lógico para realizar a operação de disjunção.
5. A palavra reservada "not" é utilizada como um operador lógico para realizar a operação de negação.
6. A palavra reservada "if" é utilizada para definir uma estrutura condicional em Python.
7. A palavra reservada "else" é utilizada em conjunto com a estrutura condicional "if", para definir o bloco de código a ser executado caso a condição do "if" seja falsa.
8. A palavra reservada "elif" é utilizada em conjunto com a estrutura condicional "if", para definir um novo bloco de condição, caso a condição anterior seja falsa.
9. A palavra reservada "for" é utilizada para criar um loop que itera sobre uma sequência (como uma lista, tupla, dicionário, entre outros) em Python.
10. A palavra reservada "while" é utilizada para criar um loop que executa um bloco de código enquanto uma determinada condição for verdadeira.

3. Subtópico:
3. Uso correto das palavras reservadas na programação Python
Assertivas:
1. A palavra reservada "def" é utilizada para definir uma função em Python.
2. A palavra reservada "if" é usada para realizar a verificação condicional em Python.
3. "for" é uma palavra reservada que permite a criação de um loop de repetição em Python.
4. A palavra reservada "while" é utilizada para criar um loop de repetição enquanto determinada condição for verdadeira.
5. Em Python, a palavra reservada "return" é usada para retornar um valor de uma função.
6. "import" é uma palavra reservada para importar módulos em Python.
7. A palavra reservada "class" é utilizada para criar uma classe em Python.
8. "try" é uma palavra reservada que permite a execução de um bloco de código com tratamento de exceções em Python.
9. A palavra reservada "except" é usada em conjunto com "try" para lidar com exceções específicas em Python.
10. Em Python, a palavra reservada "and" é utilizada para realizar uma operação lógica de "E" entre duas condições.

4. Subtópico:
4. Erros comuns ao utilizar palavras reservadas em Python
Assertivas:
1. Utilizar palavras reservadas em Python como identificadores de variáveis resultará em um erro de sintaxe.
2. Python possui uma lista de palavras reservadas que não podem ser utilizadas como nomes de variáveis, tais como: if, else, while, for, def, class, entre outras.
3. Tentar usar uma palavra reservada em Python como nome de função causará um erro de sintaxe.
4. É necessário estar atento às palavras reservadas em Python ao definir nomes de funções para evitar erros de interpretação do código.
5. Utilizar palavras reservadas como argumentos de função pode resultar em erros de sintaxe.
6. Ao criar classes em Python, é importante não utilizar palavras reservadas como nomes de atributos.
7. É comum hesitar ao escolher nomes de variáveis ou funções em Python devido à existência das palavras reservadas.
8. Uma forma de evitar conflitos com palavras reservadas é acrescentar um underscore (_) ao final dos identificadores.
9. É importante consultar a documentação oficial do Python para conhecer todas as palavras reservadas da linguagem.
10. Erros ao utilizar palavras reservadas podem ser facilmente identificados pelo compilador/interpretador do Python, que exibirá mensagens de erro ao encontrar esses problemas.

5. Subtópico:
5. Diferença entre funções integradas e palavras reservadas em Python
Assertivas:
1. As funções integradas em Python fazem parte do conjunto de funcionalidades padrão da linguagem e estão disponíveis para uso imediato.
2. As palavras reservadas em Python são termos ou identificadores que possuem um significado específico dentro da linguagem e não podem ser utilizados como nomes de variáveis ou funções.
3. Ao contrário das funções integradas, as palavras reservadas em Python não são acessíveis diretamente para uso e não possuem uma implementação específica definida pelo usuário.
4. As funções integradas em Python, como print() e len(), oferecem funcionalidades prontas para uso e não requerem importações ou definições extras.
5. As palavras reservadas em Python, como for e if, são elementos essenciais da sintaxe da linguagem e são utilizadas para estruturar o código e controlar o fluxo de execução.

6. Subtópico:
6. Palavras reservadas para controle de fluxo em Python: if, else, elif, for, while etc.
Assertivas:
1. A palavra "if" é uma palavra reservada em Python utilizada para realizar condições.
2. A palavra "else" é uma palavra reservada em Python utilizada para executar um bloco de código quando a condição do "if" não for satisfeita.
3. A palavra "elif" é uma palavra reservada em Python utilizada para avaliar condições adicionais ao "if" e ao "else" em uma estrutura de controle condicional.
4. A palavra "for" é uma palavra reservada em Python utilizada para a execução de loops baseados em uma sequência.
5. A palavra "while" é uma palavra reservada em Python utilizada para a execução de loops baseados em uma condição.
6. As palavras reservadas "if", "else", "elif", "for" e "while" são todas utilizadas para controle de fluxo em Python.
7. "if", "else", "elif", "for" e "while" são exemplos de palavras reservadas em Python que definem a sintaxe da linguagem.
8. O uso correto das palavras reservadas "if", "else", "elif", "for" e "while" é essencial para a correta implementação de estruturas de controle em Python.
9. Palavras reservadas como "if" e "else" são fundamentais para o desenvolvimento de algoritmos condicionais em Python.
10. A compreensão adequada das palavras reservadas "if", "else", "elif", "for" e "while" é crucial para a resolução de problemas utilizando a linguagem de programação Python.

7. Subtópico:
7. Palavras reservadas para manipulação de exceções: try, except, finally etc.
Assertivas:
1. A palavra-reservada "try" é utilizada para delimitar um bloco de código onde podem ocorrer exceções.
2. A palavra-reservada "except" é utilizada para tratar exceções específicas dentro de um bloco "try".
3. A palavra-reservada "finally" é utilizada para definir um bloco de código que será executado independentemente de ocorrer ou não uma exceção.
4. A palavra-reservada "raise" é utilizada para gerar uma exceção manualmente.
5. A palavra-reservada "assert" é utilizada para verificar se uma expressão é verdadeira ou falsa e lançar uma exceção se for falsa.
6. A palavra-reservada "Exception" é a classe base para todas as exceções em Python.
7. As palavras-reservadas "try", "except" e "finally" fazem parte da estrutura de tratamento de exceções em Python.
8. Em uma estrutura "try-except", o bloco "except" só será executado se ocorrer uma exceção dentro do bloco "try".
9. O bloco "finally" será sempre executado, independentemente de uma exceção ter sido lançada ou não.
10. As palavras-reservadas relacionadas ao tratamento de exceções são de extrema importância para garantir a correta manipulação de erros em um programa.

8. Subtópico:
8. Palavra 'None' como constante especial e seu uso adequado 
Assertivas:
1. A palavra 'None' é uma constante especial em linguagens de programação como Python.
2. 'None' é utilizado para representar a ausência de valor ou a falta de uma referência.
3. 'None' é geralmente utilizado como valor de retorno em funções que não têm um resultado específico.
4. A comparação de uma variável com 'None' é uma forma comum de verificar se ela foi inicializada corretamente.
5. A atribuição de 'None' a uma variável é uma recomendação quando o valor inicial não é conhecido ou não é relevante.
6. 'None' é considerado falso em avaliações booleanas, pois representa um valor nulo.
7. É possível utilizar 'None' como argumento em funções para indicar a ausência de um parâmetro opcional.
8. 'None' pode ser utilizado em estruturas condicionais para representar um caso em que nenhuma opção é aplicável.
9. O tipo de dado de 'None' em Python é chamado de 'NoneType'.
10. 'None' também pode ser utilizado em casos de tratamento de exceções para indicar que uma variável não possui um valor válido.

9. Subtópico:
9. Uso das palavras 'and', 'or
Assertivas:
1. A palavra "and" é uma conjunção coordenativa copulativa, utilizada para unir termos que expressam uma ideia de adição ou soma.
2. A palavra "and" é utilizada em inglês para unir elementos em uma lista ou sequência.
3. A palavra "and" pode ser substituída por outras conjunções coordenativas, como "as well as", "in addition to" ou "plus".
4. A palavra "and" não pode ser utilizada para unir termos que expressam ideias de exclusão ou alternativa.
5. A palavra "or" é uma conjunção coordenativa disjuntiva, utilizada para indicar alternativas ou escolhas.
6. A palavra "or" é utilizada em inglês para apresentar opções excludentes mutuamente.
7. A palavra "or" pode ser substituída por outras conjunções coordenativas disjuntivas, como "either...or", "whether...or" ou "neither...nor".
8. A palavra "or" não pode ser utilizada para indicar soma ou adição de termos.
9. As palavras "and" e "or" são classificadas como conjunções coordenativas, pois estabelecem relações de coordenação entre termos ou orações.


