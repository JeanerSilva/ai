Pergunta Original: 12.23 Java- aspectos especíicos da linguagem   
 
1. Subtópico:
1. Sintaxe e Estrutura da Linguagem Java
Assertivas:
1. A linguagem Java possui uma estrutura de programação orientada a objetos.
2. Em Java, a declaração de uma classe é obrigatória antes da criação de objetos.
3. No Java, a estrutura básica de um programa consiste na declaração de uma classe com um método principal.
4. Os métodos em Java são definidos dentro de uma classe e podem ser públicos, privados ou protegidos.
5. A sintaxe de declaração de variáveis em Java segue o padrão: tipoDeDado nomeDaVariavel = valorInicial;
6. Java utiliza a palavra-chave "new" para a criação de objetos a partir de uma classe.
7. A linguagem Java utiliza o conceito de herança, permitindo que uma classe herde atributos e métodos de outra classe.
8. Em Java, os parâmetros são passados por valor para os métodos, o que significa que as alterações feitas nos valores dos parâmetros dentro do método não afetam os valores originais.
9. Java oferece o recurso de polimorfismo, que permite que objetos de diferentes classes possam ser tratados como objetos da mesma classe.
10. Em Java, a estrutura de controle "if-else" permite fazer verificações condicionais e executar diferentes blocos de código dependendo do resultado da condição.

2. Subtópico:
2. Programação Orientada a Objetos em Java
Assertivas:
1. Em Java, a Programação Orientada a Objetos é uma abordagem que permite a criação de classes e objetos para organizar e estruturar os programas.
2. Na Programação Orientada a Objetos em Java, os objetos são instâncias das classes e possuem atributos e comportamentos.
3. Em Java, a herança é um elemento crucial da Programação Orientada a Objetos, permitindo que uma classe herde características de outra classe.
4. Em Java, a Encapsulação é um princípio da Programação Orientada a Objetos que busca proteger os dados de uma classe, tornando-os acessíveis apenas por métodos específicos.
5. A Polimorfismo é uma característica da Programação Orientada a Objetos em Java que permite que objetos de diferentes classes sejam tratados de forma uniforme.
6. Em Java, é possível utilizar interfaces para definir um contrato que as classes devem seguir, permitindo uma maior flexibilidade e modularidade no desenvolvimento.
7. A Programação Orientada a Objetos em Java permite uma maior reutilização de código, através da criação de classes genéricas e extensíveis.
8. Em Java, o conceito de herança múltipla não é suportado nativamente, sendo possível apenas implementar múltiplas interfaces.
9. A Programação Orientada a Objetos em Java incentiva a separação e organização do código em unidades independentes chamadas classes.
10. Em Java, a Programação Orientada a Objetos facilita a manutenção dos programas, já que as alterações em uma classe não afetam diretamente outras partes do sistema.

3. Subtópico:
3. Manipulação de Strings e Arrays em Java
Assertivas:
1. Em Java, é possível manipular o conteúdo de uma string utilizando o método replace, que substitui todas as ocorrências de um determinado caractere por outro.
2. Em Java, é possível converter uma string em um array de caracteres utilizando o método toCharArray da classe String.
3. Em Java, é possível concatenar duas strings utilizando o operador + ou o método concat da classe String.
4. Em Java, é possível inverter o conteúdo de uma string utilizando o método reverse da classe StringBuilder.
5. Em Java, é possível verificar o tamanho de uma string utilizando o método length da classe String.
6. Em Java, é possível obter um subconjunto de caracteres de uma string utilizando o método substring da classe String.
7. Em Java, é possível dividir uma string em um array de substrings utilizando o método split da classe String.
8. Em Java, é possível verificar se uma string contém uma determinada sequência de caracteres utilizando o método contains da classe String.
9. Em Java, é possível converter um array de caracteres em uma string utilizando o construtor da classe String ou o método valueOf.
10. Em Java, é possível comparar o conteúdo de duas strings utilizando o método equals da classe String.

4. Subtópico:
4. Tratamento de Exceções e Controle de Erros em Java
Assertivas:
1) O tratamento de exceções em Java é realizado por meio dos blocos try-catch-finally.
2) O bloco try é utilizado para encapsular a execução de um código que pode lançar exceções.
3) O bloco catch é utilizado para capturar exceções específicas e tratar o erro de forma adequada.
4) O bloco finally é opcional e é executado sempre, independentemente de ocorrer uma exceção ou não.
5) Uma exceção não tratada pode resultar na interrupção do programa.
6) Em Java, as exceções são representadas por classes, sendo todas subclasses de Throwable.
7) É possível criar exceções personalizadas em Java, através da criação de subclasses de Exception ou RuntimeException.
8) O uso excessivo de blocos try-catch pode prejudicar a legibilidade e manutenibilidade do código.
9) A cláusula throws é utilizada para indicar quais exceções um método pode lançar.
10) O tratamento correto de exceções em Java contribui para a robustez e estabilidade dos programas.

5. Subtópico:
5. Uso de Bibliotecas e Pacotes em Java
Assertivas:
1. Bibliotecas e pacotes em Java são conjuntos de classes, interfaces e métodos pré-definidos que fornecem funcionalidades adicionais para o desenvolvimento de aplicativos.
2. O uso de bibliotecas e pacotes em Java permite aos programadores economizarem tempo ao aproveitar soluções já implementadas e testadas por terceiros.
3. Ao utilizar bibliotecas e pacotes em Java, é importante garantir a compatibilidade de versões, pois o funcionamento de um código depende das versões das bibliotecas utilizadas.
4. A utilização de bibliotecas e pacotes externos requer o entendimento e a adequação das licenças e restrições de uso definidas pelos seus desenvolvedores.
5. A importação de bibliotecas em Java é realizada utilizando a palavra-chave "import", seguida do nome do pacote desejado e terminando com o nome da classe que se deseja utilizar.
6. Um exemplo de biblioteca amplamente utilizada em Java é a API Java SE, que fornece um conjunto rico de classes e métodos para a construção de aplicativos desktop e web.
7. O uso de pacotes em Java permite organizar e estruturar o código-fonte de um projeto de forma modular, facilitando sua manutenção e reutilização.
8. As bibliotecas e pacotes em Java são distribuídos em arquivos JAR (Java ARchive), que podem conter múltiplas classes e recursos necessários para a execução de um aplicativo.
9. O desenvolvedor pode criar bibliotecas personalizadas em Java para reutilizar suas próprias classes ou pacotes em diferentes projetos.
10. Para utilizar uma biblioteca em Java, é necessário adicionar a referência ao arquivo JAR correspondente ao projeto, seja copiando o JAR para o diretório do projeto ou configurando a dependência no gerenciador de dependências, como o Apache Maven ou o Gradle.

6. Subtópico:
6. Concorrência e Multithreading em Java 
Assertivas:
1. Em Java, a concorrência permite que múltiplas threads sejam executadas simultaneamente.
2. O uso adequado de concorrência em Java pode melhorar significativamente o desempenho de um programa.
3. O framework de concorrência em Java é baseado principalmente em classes e interfaces do pacote java.util.concurrent.
4. A classe Thread em Java permite a criação e execução de threads de forma direta.
5. Em Java, a concorrência pode ser implementada tanto usando threads como usando tarefas assíncronas (futures).
6. Em Java, é possível sincronizar o acesso a determinadas seções críticas de código por meio do uso de blocos synchronized.
7. A palavra-chave volatile em Java pode ser usada para garantir a visibilidade de uma variável entre diferentes threads.
8. A classe Executor do pacote java.util.concurrent oferece uma maneira simplificada de gerenciar a execução de threads.
9. A concorrência em Java pode levar a problemas como condições de corrida e deadlock.
10. A utilização de locks explícitos, como a classe ReentrantLock, permite um maior controle sobre a concorrência em Java.

7. Subtópico:
7. Gerenciamento de Memória e Coleta de Lixo em Java 
Assertivas:
1. O gerenciamento de memória em Java é automático e baseado na técnica de coleta de lixo.
2. A coleta de lixo em Java é responsável por liberar a memória de objetos que não estão mais sendo utilizados pelo programa.
3. O comportamento da coleta de lixo é imprevisível e pode ocorrer em momentos diferentes durante a execução do programa.
4. Em Java, não é necessário alocar e desalocar manualmente memória para objetos, pois isso é realizado pelo garbage collector.
5. A coleta de lixo em Java é realizada através de um algoritmo chamado Mark and Sweep, que verifica e libera a memória de objetos inacessíveis.
6. Em Java, a coleta de lixo é um processo automático, que não requer intervenção direta do desenvolvedor.
7. O garbage collector em Java é otimizado para minimizar a ocorrência de pausas na execução do programa durante a coleta de lixo.
8. O programador pode influenciar a coleta de lixo em Java através do uso do método `System.gc()` para solicitar a execução do garbage collector.
9. A coleta de lixo em Java garante a liberação de memória em objetos que não são mais referenciados pelo programa, contribuindo para a eficiência do sistema.
10. O garbage collector em Java é responsável por gerenciar a alocação de memória heap e garantir que a memória seja utilizada de maneira eficiente.

8. Subtópico:
8. Entrada/Saída (I/O) e Streams em Java 
Assertivas:
1. Em Java, o processo de entrada e saída (I/O) é realizado por meio de um fluxo de dados.
2. Os fluxos de entrada permitem a leitura de dados de uma fonte externa para o programa em Java.
3. Os fluxos de saída permitem a escrita de dados gerados pelo programa em Java para uma fonte externa.
4. Em Java, as classes InputStream e OutputStream são utilizadas para realizar operações de I/O byte a byte.
5. Em Java, a classe Reader é utilizada para realizar operações de I/O de caracteres, permitindo, por exemplo, a leitura de arquivos de texto.
6. Em Java, a classe Writer é utilizada para realizar operações de I/O de caracteres, permitindo, por exemplo, a escrita de arquivos de texto.
7. As classes BufferedReader e BufferedWriter em Java permitem a leitura e escrita de caracteres em buffer, melhorando o desempenho de operações de I/O.
8. A classe Scanner em Java facilita a leitura de diferentes tipos de dados, como inteiros, floats e strings, a partir de um fluxo de entrada.
9. A classe PrintStream em Java permite a escrita formatada de dados em um fluxo de saída, como a exibição de informações na tela.
10. Em Java, é possível redirecionar a entrada e saída padrão para arquivos, permitindo a interação do programa com arquivos ao invés do console.

9. Subtópico:
9. Desenvolvimento GUI (Interface Gráfica do Usuário) com Swing/JavaFX 
Assertivas:
1. A biblioteca Swing é uma opção nativa para desenvolver interfaces gráficas em Java.
2. A biblioteca JavaFX é uma opção moderna e recomendada para desenvolver interfaces gráficas em Java.
3. Swing foi introduzido no Java Development Kit (JDK) 1.2.
4. JavaFX foi lançado pela primeira vez com a versão 2.0 do JDK.
5. As interfaces gráficas em Swing são construídas principalmente a partir de componentes, como botões, campos de texto e labels.
6. JavaFX oferece uma abordagem mais declarativa para construir interfaces gráficas, usando arquivos FXML.
7. Ambas as bibliotecas, Swing e JavaFX, possuem suporte para eventos, permitindo a interação do usuário com a interface.
8. Swing e JavaFX podem ser usados para criar aplicativos desktop multiplataforma.
9. É possível personalizar a aparência de componentes Swing utilizando o conceito de "look and feel".
10. JavaFX suporta gráficos 2D e 3D, oferecendo recursos avançados para visualização de dados.

10. Subtópico:
10. JDBC - Conexão com Banco de Dados usando Java
Assertivas:
1. O JDBC (Java Database Connectivity) é uma API do Java que permite a conexão de aplicações Java com banco de dados.
2. Através do JDBC, é possível realizar operações como inserção, atualização e exclusão de dados em um banco de dados utilizando a linguagem Java.
3. Para estabelecer uma conexão com um banco de dados usando o JDBC, é necessário utilizar uma URL de conexão que indique o tipo de banco de dados, o endereço do servidor, a porta e o nome do banco de dados.
4. Ao estabelecer uma conexão com o banco de dados, é necessário fornecer um nome de usuário e senha, com as devidas permissões de acesso para realizar operações.
5. O JDBC utiliza drivers específicos para cada banco de dados, que devem ser carregados no classpath da aplicação Java para permitir a comunicação com o banco de dados.
6. O JDBC permite a execução de instruções SQL (Structured Query Language) através dos métodos disponibilizados pela API.
7. É possível utilizar o JDBC para consultar os dados do banco de dados e receber os resultados em forma de objetos Java.
8. O JDBC oferece recursos para a tratativa de transações, permitindo a realização de operações em bancos de dados de forma segura e consistente.
9. O JDBC oferece suporte para o uso de PreparedStatement, que é uma classe que permite a execução de instruções SQL parametrizadas, melhorando a segurança e performance da aplicação.
10. O JDBC é independente de plataforma, o que significa que aplicações Java que utilizam o JDBC podem ser executadas em diferentes sistemas operacionais e plataformas de banco de dados.


