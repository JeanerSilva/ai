Pergunta Original: 12.24 Python- padrões de projetos   
 
1. Subtópico:
1. Conceitos básicos de Python: sintaxe, variáveis e tipos de dados.
Assertivas:
1. A sintaxe básica de Python é composta por instruções terminadas em quebra de linha.
2. Python é uma linguagem de programação interpretada, o que significa que o código é executado linha por linha.
3. Em Python, não é necessário declarar o tipo de uma variável antes de utilizá-la.
4. As variáveis em Python podem ser criadas atribuindo um valor a elas, sem a necessidade de especificar um tipo.
5. Os tipos de dados básicos em Python são: inteiros, ponto flutuante, strings, booleanos e nulos.
6. Em Python, uma string é uma sequência de caracteres delimitada por aspas simples ou duplas.
7. Python suporta operadores aritméticos básicos, como adição, subtração, multiplicação e divisão.
8. Python permite a concatenação de strings usando o operador "+".
9. É possível converter um valor de um tipo para outro em Python, através do uso de funções específicas para cada tipo.
10. Python possui estruturas de controle de fluxo, como condicionais e loops, que permitem a tomada de decisões e a repetição de trechos de código.

2. Subtópico:
2. Estruturas de controle em Python: loops, condicionais e funções.
Assertivas:
1. Em Python, é possível utilizar o loop while para repetir um bloco de código enquanto uma condição for verdadeira.
2. A estrutura de repetição for em Python é utilizada para iterar sobre uma sequência de elementos.
3. Em Python, a estrutura condicional if permite executar um bloco de código somente se uma determinada condição for verdadeira.
4. O elif é uma palavra-chave utilizada em Python para encadear estruturas condicionais.
5. Para repetir um bloco de código um número fixo de vezes, é possível utilizar a função range() em conjunto com a estrutura de repetição for.
6. Em Python, é possível definir funções para realizar tarefas específicas, podendo ter ou não parâmetros de entrada.
7. As funções em Python podem possuir valores de retorno, que podem ser utilizados em outros pontos do código.
8. O parâmetro *args em uma função em Python permite receber um número variável de argumentos posicionais.
9. A palavra-chave return é utilizada em uma função para retornar um valor específico ao local onde a função foi chamada.
10. Em Python, é possível criar funções anônimas utilizando a palavra-chave lambda, sendo úteis para situações em que se deseja criar pequenas funções de maneira concisa.

3. Subtópico:
3. Manipulação de arquivos em Python: leitura, escrita e manipulação de arquivos.
Assertivas:
1) A linguagem de programação Python possui recursos nativos para manipulação de arquivos.
2) Em Python, é possível realizar a leitura de um arquivo utilizando a função open(), especificando o caminho do arquivo e o modo de leitura desejado.
3) Para escrever em um arquivo em Python, é necessário utilizar a função open() em modo de escrita ("w"), especificando o caminho do arquivo.
4) Em Python, é possível adicionar conteúdo a um arquivo existente, utilizando o modo de escrita e a função open() em modo de "append" ("a").
5) Para manipular arquivos em Python, é recomendado utilizar o bloco de código "with open()" para garantir o fechamento do arquivo após o seu uso.
6) O método read() em Python permite a leitura de todo o conteúdo de um arquivo e retorna uma única string.
7) É possível ler o conteúdo de um arquivo linha por linha utilizando o método readlines() em Python, que retorna uma lista de strings.
8) Em Python, a função open() aceita um parâmetro opcional para especificar o formato de codificação do arquivo, como "encoding='utf-8'".
9) É possível verificar se um arquivo existe em Python utilizando a função os.path.exists(), informando o caminho do arquivo como argumento.
10) Para excluir um arquivo em Python, é necessário utilizar a função os.remove(), informando o caminho do arquivo a ser removido.

4. Subtópico:
4. Bibliotecas padrão do Python: uso e aplicação das bibliotecas mais comuns.
Assertivas:
1. A biblioteca padrão do Python oferece um conjunto de módulos e pacotes que são amplamente utilizados para o desenvolvimento de aplicações em Python.
2. A biblioteca padrão do Python inclui módulos para manipulação de strings, como o módulo `string`, que fornece funções para formatação, pesquisa e manipulação de texto.
3. A biblioteca padrão do Python também inclui o módulo `math`, que fornece funções matemáticas comuns, como cálculos trigonométricos, exponenciais e logarítmicos.
4. A biblioteca `os` da biblioteca padrão do Python é frequentemente utilizada para interagir com o sistema operacional, permitindo que os desenvolvedores realizem operações relacionadas a arquivos, diretórios e processos.
5. O módulo `datetime` da biblioteca padrão do Python é utilizado para trabalhar com datas e horários, oferecendo funções para manipulação de datas, cálculos com intervalos e formatação de datas.
6. A biblioteca padrão do Python inclui o módulo `json`, que fornece recursos para codificar e decodificar objetos JSON, permitindo o intercâmbio de dados com outros sistemas ou serviços.
7. A biblioteca `urllib` da biblioteca padrão do Python é amplamente utilizada para realizar requisições HTTP, facilitando o acesso a serviços web e manipulação de URLs.
8. O módulo `random` da biblioteca padrão do Python é utilizado para gerar números aleatórios, oferecendo funções para geração de números inteiros, flutuantes e seleção aleatória de elementos de uma lista.
9. A biblioteca padrão do Python inclui o módulo `csv`, que facilita a leitura e escrita de arquivos CSV, um formato bastante comum para armazenamento e intercâmbio de dados tabulares.
10. O módulo `re` da biblioteca padrão do Python é utilizado para trabalhar com expressões regulares, oferecendo funções para busca, substituição e validação de padrões em texto.

5. Subtópico:
5. Programação orientada a objetos em Python: classes, objetos, herança e polimorfismo.
Assertivas:
1. Na programação orientada a objetos em Python, uma classe é uma estrutura que define as características e comportamentos de objetos.
2. Em Python, um objeto é uma instância de uma classe, que possui características específicas e pode executar métodos definidos na classe.
3. Em Python, é possível criar classes que herdam características e comportamentos de outras classes, utilizando o conceito de herança.
4. O uso da herança em Python permite a reutilização de código, pois é possível criar novas classes baseadas em classes já existentes.
5. A herança em Python segue o princípio do "é um", onde a classe filha herda todas as características e comportamentos da classe pai.
6. Polimorfismo, em Python, refere-se à capacidade de um objeto assumir diferentes formas e comportamentos, dependendo do contexto em que é utilizado.
7. O polimorfismo em Python ocorre quando diferentes objetos podem ser tratados de forma semelhante, mesmo que sejam instâncias de classes diferentes.
8. Através do polimorfismo, é possível utilizar um mesmo método em diferentes objetos, garantindo a flexibilidade e reutilização de código.
9. Em Python, é possível substituir um método existente em uma classe filha para adaptá-lo às necessidades específicas, utilizando a técnica de sobrescrita.
10. A programação orientada a objetos em Python oferece diversos benefícios, como encapsulamento, modularidade, reutilização de código e fácil manutenção.

6. Subtópico:
6. Tratamento de exceções em Python: try/except/finally e criação de exceções personalizadas.
Assertivas:
1. O bloco try/except em Python permite que um trecho de código seja executado normalmente, mas caso ocorra uma exceção, é possível tratá-la de maneira especificada no bloco except.

2. O bloco finally em Python é utilizado para definir um trecho de código que sempre será executado, independentemente de ocorrer uma exceção no bloco try/except.

3. O bloco finally em Python é opcional, ou seja, seu uso não é obrigatório no tratamento de exceções.

4. É possível utilizar múltiplos blocos except em um bloco try, de forma a tratar diferentes tipos de exceções de maneira específica.

5. É possível criar exceções personalizadas em Python por meio da criação de uma classe que herda da classe-base Exception.

6. Caso ocorra uma exceção customizada, é possível tratá-la utilizando um bloco except específico que captura apenas esse tipo de exceção.

7. O bloco except sem especificar o tipo de exceção captura qualquer tipo de exceção que ocorra no bloco try.

8. É possível utilizar a palavra-chave else após todos os blocos except em um bloco try/except, para definir um trecho de código que será executado caso nenhuma exceção seja lançada.

9. O bloco finally sempre será executado, mesmo que uma exceção seja lançada, capturada e tratada pelo bloco except.

10. Ao criar exceções personalizadas, é possível definir atributos adicionais para a classe, que podem ser utilizados para identificar o tipo específico de exceção ocorrida.

7. Subtópico:
7. Padrões de projeto (Design Patterns) na programação com Python: Singleton,
Assertivas:
1. O padrão de projeto Singleton é utilizado para garantir que uma classe tenha apenas uma instância em todo o programa.
2. O Singleton é implementado criando um método estático que retorna sempre a mesma instância da classe.
3. O padrão Singleton é utilizado quando é necessário ter uma única instância de uma classe que seja acessível globalmente.
4. O Singleton pode ser implementado utilizando uma variável estática privada e um construtor privado para evitar a criação de múltiplas instâncias.
5. O Singleton é um padrão de projeto muito utilizado em cenários em que é necessário manter um estado global em uma aplicação.
6. O padrão Singleton pode ser utilizado em linguagens orientadas a objetos, como Python, para restringir a criação de múltiplas instâncias indesejadas.
7. O objetivo principal do padrão Singleton é controlar o acesso ao objeto e garantir que apenas uma instância seja criada.
8. O Singleton pode oferecer acesso controlado à sua instância única por meio de um método estático, facilitando sua utilização em diversos pontos do código.
9. A aplicação do padrão Singleton pode facilitar o compartilhamento de recursos e evitar problemas de concorrência em aplicações multithread.
10. É importante ter cuidado ao utilizar o Singleton, pois seu uso excessivo pode levar a um acoplamento forte e dificultar a testabilidade do código.


