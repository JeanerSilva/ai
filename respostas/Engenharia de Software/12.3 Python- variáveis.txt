Item do edital: 12.3 Python- variáveis   
 
1. Subtópico:
1. Definição e uso de variáveis em Python
Assertivas:
1. Em Python, o uso de variáveis permite armazenar e manipular dados durante a execução de um programa.
2. As variáveis em Python não precisam ser declaradas com um tipo específico, pois o tipo é inferido automaticamente a partir do valor atribuído.
3. É possível atribuir um valor a uma variável usando o operador de atribuição "=" seguido do valor desejado.
4. Uma variável em Python pode ser reatribuída com um novo valor a qualquer momento durante a execução do programa.
5. As variáveis em Python são case-sensitive, ou seja, letras maiúsculas e minúsculas são consideradas diferentes.
6. Para nomear uma variável em Python, é importante seguir algumas regras, como não usar palavras reservadas, começar com uma letra ou underscore e utilizar somente letras, números e underscores.
7. É possível realizar operações matemáticas com variáveis em Python, como soma, subtração, multiplicação e divisão.
8. As variáveis em Python podem armazenar diferentes tipos de dados, como números inteiros, números de ponto flutuante, strings, listas, entre outros.
9. O valor de uma variável em Python pode ser exibido na tela usando a função "print(variavel)".
10. É recomendado utilizar nomes de variáveis que sejam descritivos e facilmente compreensíveis, a fim de melhorar a legibilidade e manutenção do código.

2. Subtópico:
2. Tipos de dados em Python: int, float, string, boolean
Assertivas:
1. O tipo de dado 'int' em Python representa números inteiros.
2. O tipo de dado 'float' em Python representa números de ponto flutuante.
3. O tipo de dado 'string' em Python representa uma sequência de caracteres.
4. O tipo de dado 'boolean' em Python representa valores verdadeiro ou falso.
5. O tipo de dado 'int' é utilizado para representar anos, quantidades inteiras, entre outros.
6. O tipo de dado 'float' é utilizado para representar valores com casas decimais, tais como 3.14.
7. O tipo de dado 'string' é utilizado para armazenar textos, como nomes e descrições.
8. O tipo de dado 'boolean' é utilizado para expressar condições lógicas, indicando se algo é verdadeiro ou falso.
9. É possível realizar operações matemáticas utilizando variáveis do tipo 'int' e 'float'.
10. É possível realizar operações lógicas utilizando variáveis do tipo 'boolean'.

3. Subtópico:
3. Conversão de tipos de variáveis 
Assertivas:
1. A conversão de tipos de variáveis é um processo utilizado para alterar o tipo de uma variável para outro tipo compatível.
2. Em linguagens de programação, como C, C++, Java, Python, entre outras, é possível realizar a conversão de tipos de variáveis.
3. A conversão de tipos de variáveis pode ser implícita, quando é feita automaticamente pelo compilador, ou explicita, quando é feita de forma explícita pelo programador.
4. Durante a conversão de tipos de variáveis, podem ocorrer perdas de informações, principalmente quando se converte um tipo de dado de maior precisão para outro de menor precisão.
5. Alguns tipos de dados, como inteiros e ponto flutuante, podem ser convertidos entre si, desde que respeitado o tamanho e a faixa de valores permitidos por cada tipo.
6. O processo de conversão de tipos também pode ser utilizado para converter valores de tipos não numéricos, como strings, para tipos numéricos, e vice-versa.
7. Em algumas linguagens de programação, existe a necessidade de se realizar a conversão de tipos explicitamente para evitar erros de compilação ou comportamentos indesejados.
8. A conversão de tipos de variáveis também pode ser utilizada para realizar operações matemáticas entre variáveis de tipos diferentes.
9. A conversão de tipos de variáveis é uma técnica muito utilizada na manipulação de dados, especialmente quando se deseja realizar cálculos ou comparações entre diferentes tipos de dados.
10. É importante ter cuidado ao realizar a conversão de tipos de variáveis, pois o resultado pode ser impreciso ou levar a resultados inesperados se não forem observadas as regras e limitações do tipo de dado utilizado.

4. Subtópico:
4. Regras para nomeação de variáveis em Python
Assertivas:
1. Em Python, é permitido utilizar letras, números e o caractere de sublinhado para nomear variáveis.
2. As variáveis em Python não podem iniciar com um número.
3. O tamanho do nome da variável em Python não é limitado.
4. Os nomes das variáveis em Python são sensíveis a maiúsculas e minúsculas.
5. Em Python, é recomendado utilizar nomes representativos e descritivos para as variáveis.
6. Não é permitido utilizar palavras reservadas do Python como nome de variável.
7. Em Python, é possível utilizar nomes com acentos para nomear variáveis, mas não é recomendado.
8. As variáveis em Python podem conter apenas caracteres alfanuméricos.
9. É recomendado utilizar o estilo snake_case para nomear variáveis em Python.
10. Em Python, é possível reatribuir valores de diferentes tipos a uma mesma variável.

5. Subtópico:
5. Operações matemáticas básicas com variáveis
Assertivas:
1. O resultado da soma de dois números é sempre um número.
2. A subtração de um número de outro resulta em um número.
3. A multiplicação de dois números é sempre um número.
4. A divisão de um número por outro resulta em um número, exceto quando o divisor é zero.
5. A adição de um número à sua metade resulta em um número equivalente ao dobro do número original.
6. Quando o multiplicando é um número negativo, o produto de uma multiplicação é um número negativo, independentemente do valor do multiplicador.
7. Quando o dividendo é um número negativo, o quociente de uma divisão é negativo, se o divisor for positivo, e positivo se o divisor for negativo.
8. A soma de um número e seu oposto (negativo) resulta sempre em zero.
9. A multiplicação de um número por zero resulta em zero.
10. Qualquer número elevado à potência de zero é igual a um.

6. Subtópico:
6. Variáveis globais e locais 
Assertivas:
1. Variáveis globais são declaradas fora de qualquer função ou bloco de código e podem ser acessadas e modificadas por qualquer função ou bloco.
2. Variáveis locais são declaradas dentro de uma função ou bloco de código e só podem ser acessadas e modificadas dentro desse contexto.
3. O escopo de uma variável global abrange todo o programa, enquanto o escopo de uma variável local está restrito ao contexto em que foi declarada.
4. Variáveis globais podem ser utilizadas para armazenar dados que precisam ser compartilhados entre múltiplas funções ou blocos de código.
5. O uso excessivo de variáveis globais pode tornar o código mais difícil de entender e depurar, pois qualquer função ou bloco de código pode modificá-las.
6. Variáveis locais são preferíveis quando se deseja limitar o acesso e a modificação de dados apenas ao contexto em que são necessários.
7. Um mesmo nome de variável pode ser utilizado para variáveis globais e locais em diferentes partes do código, mas elas são tratadas como variáveis diferentes e armazenam valores independentes.
8. Variáveis globais podem ser acessadas por todas as funções em um programa, o que pode facilitar a comunicação entre diferentes partes do código.
9. Variáveis locais possuem um escopo mais restrito, sendo úteis para armazenar valores temporários ou específicos para uma função ou bloco de código.
10. Em linguagens de programação, como o C ou C++, é possível utilizar palavras-chave, como "extern" ou "static", para modificar o escopo e o acesso de variáveis globais.

7. Subtópico:
7. Atribuição múltipla em Python
Assertivas:
1. A atribuição múltipla em Python permite atribuir valores a múltiplas variáveis de uma só vez.
2. Na atribuição múltipla em Python, o número de variáveis a serem atribuídas deve ser igual ao número de valores a serem atribuídos.
3. Em caso de atribuição múltipla em Python, se o número de variáveis for maior do que o número de valores, ocorrerá um erro de "too many values to unpack" (muitos valores para desempacotar).
4. Na atribuição múltipla em Python, é possível atribuir diferentes tipos de valores às variáveis, como inteiros, strings e listas.
5. Em caso de atribuição múltipla em Python, se o número de variáveis for menor do que o número de valores, ocorrerá um erro de "not enough values to unpack" (valores insuficientes para desempacotar).
6. Na atribuição múltipla em Python, é possível trocar os valores de duas variáveis sem a necessidade de uma variável temporária.
7. Na atribuição múltipla em Python, é possível atribuir parte de uma sequência a múltiplas variáveis utilizando a sintaxe de fatiamento.
8. Em caso de atribuição múltipla em Python, para ignorar um ou mais valores durante a atribuição, pode-se utilizar um underline (_) como variável.
9. Na atribuição múltipla em Python, é possível atribuir os valores de uma lista a múltiplas variáveis através da desestruturação.
10. A atribuição múltipla em Python é uma técnica que pode ser utilizada para simplificar e tornar mais eficiente o código.

8. Subtópico:
8. Constantes em Python 
Assertivas:
1. As constantes em Python são valores fixos que não podem ser alterados durante a execução do programa.
2. Python não possui um tipo de dado específico para constantes.
3. Convenções de nomenclatura sugerem que constantes sejam escritas em letras maiúsculas.
4. Apesar de poderem ser alteradas, as constantes em Python são consideradas como boas práticas.
5. O valor das constantes em Python deve ser definido durante a declaração.
6. Constantes em Python podem ser utilizadas para armazenar valores como números, strings e booleanos.
7. Ao declarar uma constante em Python, é possível atribuir o valor de uma expressão matemática.
8. Para criar uma constante de âmbito global em Python, é comum utilizarmos o módulo `math`.
9. O valor de uma constante em Python pode ser utilizado em qualquer parte do programa.
10. Em Python, ao tentar modificar o valor de uma constante, um erro será gerado durante a execução do programa.

9. Subtópico:
9. Manipulação de strings com variáveis do tipo string 
Assertivas:
1. A manipulação de strings com variáveis do tipo string permite a concatenação de strings utilizando o operador de adição (+).

2. É possível acessar um caractere específico de uma variável string utilizando a notação de índice, onde o primeiro caractere tem índice 0.

3. O método string.Length retorna o comprimento de uma string, contando o número de caracteres presentes nela.

4. As strings em C# são imutáveis, ou seja, não podem ser alteradas após serem criadas. No entanto, é possível criar uma nova string com base na original, aplicando as alterações desejadas.

5. O método string.ToLower converte todos os caracteres de uma string para minúsculo.

6. O método string.ToUpper converte todos os caracteres de uma string para maiúsculo.

7. O método string.Split divide uma string em várias substrings com base em um separador especificado, retornando um array de strings.

8. O método string.Trim remove os espaços em branco no início e no fim de uma string.

9. O método string.Contains verifica se uma determinada substring está presente em uma string.

10. A classe StringBuilder é recomendada para manipulações complexas de strings, pois permite a modificação direta de uma string sem criar novas instâncias.

10. Subtópico:
10. Uso da função 'del' para apagar variáveis
Assertivas:
1. O uso da função 'del' em Python permite apagar variáveis da memória.
2. Ao utilizar a função 'del', a variável é removida da tabela de símbolos.
3. A função 'del' não apenas remove a referência à variável, mas também libera a memória alocada por ela.
4. Ao apagar uma variável com 'del', seu valor original é perdido permanentemente.
5. A função 'del' pode ser utilizada em variáveis de qualquer tipo de dado em Python.
6. Para apagar uma variável em um escopo local, é necessário utilizar 'del' antes do nome da variável.
7. A função 'del' em Python é uma forma de gerenciar a memória e alocar recursos adequadamente.
8. O uso de 'del' em variáveis específicas pode ser útil para otimizar o desempenho do programa.
9. Apagar uma variável com 'del' não afeta outras variáveis no mesmo escopo.
10. É possível utilizar a função 'del' em variáveis contidas em estruturas de dados, como listas ou dicionários.


