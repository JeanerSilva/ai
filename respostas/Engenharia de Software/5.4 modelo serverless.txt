Item do edital: 5.4 modelo serverless.    
 
1. Subtópico:
1. Definição e conceitos fundamentais do modelo Serverless
Assertivas:
1. No modelo Serverless, a infraestrutura em nuvem gerencia automaticamente o provisionamento e a execução de recursos, permitindo que os desenvolvedores se concentrem apenas na lógica de negócios.
2. No modelo Serverless, não há a necessidade de provisionar, gerenciar ou escalar servidores físicos ou virtuais.
3. O modelo Serverless permite que os desenvolvedores paguem apenas pelos recursos computacionais que eles realmente utilizam, sem desperdício de recursos.
4. No modelo Serverless, as aplicações são compostas por funções individuais, que são ativadas por eventos específicos.
5. No modelo Serverless, as funções são executadas em tempo real e podem ser escaladas automaticamente para lidar com aumentos repentinos de carga.
6. O modelo Serverless permite uma maior flexibilidade na arquitetura de aplicações, pois as funções podem ser implementadas em diferentes linguagens de programação.
7. No modelo Serverless, as funções são independentes e isoladas, o que facilita a manutenção e a evolução das aplicações.
8. No modelo Serverless, as aplicações podem se beneficiar de serviços adicionais fornecidos pela plataforma de nuvem, como armazenamento, banco de dados e autenticação.
9. O modelo Serverless é altamente escalável e resiliente, pois as funções individuais podem ser distribuídas em vários servidores para garantir a disponibilidade dos serviços.
10. No modelo Serverless, a arquitetura é baseada em microsserviços, o que permite uma maior modularidade e reutilização de código.

2. Subtópico:
2. Vantagens e desvantagens do modelo Serverless
Assertivas:
1. No modelo Serverless, não é necessário provisionar nem gerenciar servidores, o que reduz significativamente os custos operacionais.
2. A capacidade de resposta rápida do modelo Serverless é uma das principais vantagens, uma vez que a infraestrutura é automaticamente escalada para atender demandas variáveis.
3. Com o Serverless, os desenvolvedores podem se concentrar totalmente na lógica de negócios, sem se preocupar com a administração e manutenção de servidores.
4. A execução de funções em ambiente Serverless pode ser mais eficiente em termos de recursos, já que os serviços são ativados apenas quando necessário.
5. O modelo Serverless permite um desenvolvimento mais ágil, pois é possível criar, testar e implantar funcionalidades rapidamente.
6. A escalabilidade automática do modelo Serverless possibilita lidar com picos de tráfego sem comprometer o desempenho do sistema.
7. Ao utilizar um serviço Serverless, a alta disponibilidade do sistema é assegurada pela infraestrutura do provedor de nuvem.
8. A manutenção e atualização de serviços em ambiente Serverless são responsabilidades do provedor de nuvem, aliviando a carga de trabalho da equipe de desenvolvimento.
9. Uma desvantagem do modelo Serverless é a falta de controle direto sobre a infraestrutura, uma vez que toda a responsabilidade é transferida ao provedor de nuvem.
10. Dependendo da arquitetura e dos requisitos do projeto, o modelo Serverless pode não ser a melhor opção, devido às restrições impostas pelo provedor de nuvem.

3. Subtópico:
3. Diferença entre modelos de computação em nuvem: IaaS, PaaS, SaaS e Serverless
Assertivas:
1. O modelo IaaS (Infrastructure as a Service) na computação em nuvem fornece uma infraestrutura virtualizada, como servidores, armazenamento e redes, permitindo que os usuários gerenciem e controlem todos os aspectos da infraestrutura.
2. O modelo PaaS (Platform as a Service) na computação em nuvem oferece um ambiente de desenvolvimento e implantação de aplicativos completo, incluindo serviços de middleware, banco de dados e recursos de desenvolvimento.
3. O modelo SaaS (Software as a Service) na computação em nuvem fornece aplicativos prontos para uso, acessíveis pela internet, sem a necessidade de instalação ou gerenciamento de hardware ou software.
4. O modelo Serverless na computação em nuvem permite que os desenvolvedores criem e executem aplicativos sem se preocupar com a configuração ou gerenciamento dos servidores subjacentes.
5. O modelo IaaS requer que os usuários tenham um maior conhecimento técnico e gerenciamento das configurações da infraestrutura.
6. O modelo PaaS oferece aos desenvolvedores uma plataforma completa para criar, testar e implantar aplicativos, reduzindo o tempo e o esforço necessários para a configuração e gerenciamento da infraestrutura.
7. O modelo SaaS é ideal para empresas que desejam utilizar aplicativos prontos para uso, evitando despesas com desenvolvimento e manutenção de software.
8. O modelo Serverless possibilita um escalonamento automático dos recursos de acordo com a demanda, o que resulta em uma melhor otimização de custos.
9. O modelo IaaS permite que os usuários tenham um controle total sobre a infraestrutura, mas também implica uma maior responsabilidade pela configuração e manutenção dos recursos.
10. O modelo PaaS é mais adequado para desenvolvedores que desejam se concentrar na criação de aplicativos, sem se preocupar com a complexidade da infraestrutura necessária para executá-los.

4. Subtópico:
4. Principais provedores de serviços serverless: AWS Lambda, Google Cloud Functions, Azure Functions
Assertivas:
1. AWS Lambda é um dos principais provedores de serviços serverless disponíveis no mercado.
2. Google Cloud Functions é reconhecido como um dos principais provedores de serviços serverless atualmente.
3. Azure Functions é um dos principais provedores de serviços serverless oferecidos pela Microsoft.
4. AWS Lambda permite aos desenvolvedores executar código sem a necessidade de provisionar ou gerenciar servidores.
5. Google Cloud Functions oferece suporte a diferentes linguagens de programação, como Python, Node.js e Java.
6. Azure Functions permite criar e implantar facilmente funções serverless usando várias linguagens de programação.
7. AWS Lambda é amplamente utilizado para implementar processamento de eventos, automações e tarefas assíncronas.
8. Google Cloud Functions oferece integração perfeita com outros serviços do Google Cloud Platform, como Cloud Storage e BigQuery.
9. Azure Functions possui uma integração poderosa com outros serviços da Microsoft, como Azure Storage e Azure Cosmos DB.
10. Esses três provedores, AWS Lambda, Google Cloud Functions e Azure Functions, são opções confiáveis e populares para criar e implantar infraestrutura serverless.

5. Subtópico:
5. Arquitetura serverless: como funciona e principais componentes 
Assertivas:
1. A arquitetura serverless é um modelo de computação em nuvem em que o provedor de serviços gerencia dinamicamente a alocação e a escalabilidade dos recursos de servidor.
2. Na arquitetura serverless, as aplicações são executadas em resposta a eventos, proporcionando uma abordagem altamente escalável e eficiente em termos de custo.
3. O principal componente da arquitetura serverless é a função, que representa uma unidade de processamento que é ativada em resposta a um evento específico.
4. As funções na arquitetura serverless são altamente independentes e possuem sua própria infraestrutura, sem a necessidade de um sistema operacional ou ambiente de execução dedicado.
5. Os serviços de computação serverless permitem que as aplicações sejam desenvolvidas e implantadas apenas com as funções necessárias, eliminando a necessidade de gerenciar servidores tradicionais.
6. A arquitetura serverless oferece grande escalabilidade, pois permite que as funções sejam executadas sob demanda, de acordo com a necessidade do sistema.
7. O uso da arquitetura serverless pode reduzir significativamente os custos operacionais, pois os recursos de servidor são alocados apenas quando necessário, evitando desperdícios.
8. Os provedores de serviços em nuvem populares, como AWS Lambda, Google Cloud Functions e Azure Functions, oferecem suporte à arquitetura serverless.
9. A arquitetura serverless é especialmente adequada para aplicações com carga de trabalho não constante, que exigem uma escalabilidade rápida e não possuem requisitos de tempo de atividade contínuo.
10. Ao adotar a arquitetura serverless, os desenvolvedores podem se concentrar exclusivamente na lógica de negócios da aplicação, sem se preocupar com a infraestrutura subjacente.

6. Subtópico:
6. Segurança em ambientes serverless: melhores práticas e desafios 
Assertivas:
1. A utilização de ambientes serverless proporciona uma maior segurança para as aplicações em comparação aos servidores tradicionais.
2. As melhores práticas de segurança em ambientes serverless incluem a implementação de políticas de acesso e controle de permissões adequadas.
3. O monitoramento constante é essencial para garantir a segurança em ambientes serverless, permitindo a identificação de eventuais vulnerabilidades ou atividades maliciosas.
4. A segurança em ambientes serverless deve abranger a proteção não apenas das aplicações, mas também dos dados armazenados e transmitidos.
5. A adoção de técnicas de criptografia é uma prática recomendada para garantir a confidencialidade dos dados em ambientes serverless.
6. A correta configuração e atualização dos serviços em nuvem utilizados em ambientes serverless é fundamental para evitar vulnerabilidades de segurança.
7. A utilização de autenticação forte, como a autenticação de dois fatores, é uma medida de segurança eficaz para ambientes serverless.
8. A revisão regular das permissões e acessos concedidos aos serviços e funções serverless é importante para evitar brechas de segurança.
9. A implementação de testes de segurança é crucial para avaliar a resistência dos ambientes serverless a ataques e identificar possíveis falhas.
10. A conscientização e treinamento dos desenvolvedores e equipes responsáveis pelos ambientes serverless são fundamentais para garantir a segurança das aplicações.

7. Subtópico:
7. Gerenciamento de recursos no modelo Serverless 
Assertivas:
1. O gerenciamento de recursos no modelo Serverless é realizado automaticamente pelo provedor de nuvem, tornando-o mais ágil e eficiente para as aplicações.
2. No modelo Serverless, os recursos computacionais são alocados sob demanda, o que evita desperdício de recursos ociosos.
3. No gerenciamento de recursos do modelo Serverless, não é necessário se preocupar com escala, pois a infraestrutura é dimensionada automaticamente de acordo com a carga de trabalho.
4. O modelo Serverless permite que os desenvolvedores foquem apenas na lógica de negócio da aplicação, sem necessitar de conhecimentos profundos sobre configurações e gerenciamento de servidores.
5. O modelo Serverless oferece alta disponibilidade, uma vez que os provedores de nuvem distribuem a aplicação em diversos servidores para garantir a continuidade do serviço.
6. No gerenciamento de recursos no modelo Serverless, o provisionamento e a manutenção de servidores ficam a cargo do provedor de nuvem, o que reduz o tempo e os custos operacionais.
7. Com o modelo Serverless, é possível desenvolver e implantar aplicações de forma mais rápida, pois não é necessário realizar instalação, configuração e gerenciamento de servidores.
8. A escalabilidade automática é uma das principais vantagens do gerenciamento de recursos no modelo Serverless, pois a infraestrutura é dimensionada de acordo com a demanda em tempo real.
9. A arquitetura Serverless permite que as aplicações sejam mais econômicas, uma vez que os recursos são consumidos apenas quando necessário, evitando gastos desnecessários.
10. O gerenciamento de recursos no modelo Serverless é ideal para aplicações que possuem demanda variável, já que os recursos são alocados conforme a necessidade, evitando a superprovisão ou subprovisão.

8. Subtópico:
8. Escalabilidade e performance em arquiteturas serverless 
Assertivas:
1. A arquitetura serverless permite a escalabilidade automática de recursos computacionais, de acordo com a demanda do sistema.
2. A arquitetura serverless, ao eliminar a necessidade de manter servidores em funcionamento constante, proporciona ganhos significativos de performance.
3. Em arquiteturas serverless, os recursos computacionais são disponibilizados de forma granular, o que permite uma melhor utilização dos mesmos e, consequentemente, um aumento de performance.
4. A escalabilidade em arquiteturas serverless é alcançada através da execução paralela de pequenos blocos de código, conhecidos como funções, o que resulta em melhor desempenho.
5. A escalabilidade em arquiteturas serverless é automatizada e gerenciada pela plataforma de nuvem utilizada, garantindo assim um processo eficiente e sem intervenção manual.
6. A arquitetura serverless tem como objetivo principal proporcionar alta disponibilidade e performance, eliminando gargalos comuns encontrados em estruturas tradicionais de servidores.
7. A performance em arquiteturas serverless é beneficiada pela possibilidade de distribuição geográfica dos recursos, o que reduz a latência e melhora o tempo de resposta.
8. A arquitetura serverless utiliza recursos em nuvem, o que permite a utilização de poder computacional escalável e alocado de forma dinâmica, garantindo a performance necessária para o sistema.

9. Subtópico:
9. Casos de uso comuns para a comput
Assertivas:
1. Os casos de uso comuns para a computação em nuvem incluem armazenamento e compartilhamento de arquivos, hospedagem de sites e aplicativos, e processamento de dados em larga escala.
2. A utilização da computação em nuvem permite escalabilidade rápida e flexibilidade, de modo que os recursos computacionais podem ser ajustados de acordo com as necessidades do usuário.
3. A computação em nuvem oferece a possibilidade de acesso remoto aos recursos computacionais, permitindo o trabalho colaborativo e o acesso a dados e aplicativos de qualquer lugar com conexão à internet.
4. A virtualização é uma tecnologia-chave para a computação em nuvem, pois permite que recursos físicos sejam divididos e alocados para vários usuários simultaneamente.
5. A computação em nuvem pode reduzir os custos relacionados à infraestrutura de TI, uma vez que elimina a necessidade de investimentos em servidores, licenças de software e manutenção.
6. A segurança de dados é uma preocupação importante na computação em nuvem, e deve ser garantida através de criptografia, autenticação de usuários e políticas de controle de acesso.
7. A computação em nuvem oferece uma alta disponibilidade de serviços, com a garantia de que os recursos necessários estarão disponíveis sempre que forem necessários.
8. A implantação de serviços em nuvem permite uma rápida implementação e atualização de aplicativos, sem as limitações de recursos físicos presentes em ambientes tradicionais.
9. A computação em nuvem proporciona flexibilidade no dimensionamento dos recursos, permitindo que o usuário escolha a quantidade necessária de armazenamento, processamento e memória de acordo com suas necessidades específicas.
10. A computação em nuvem promove a sustentabilidade, uma vez que permite a otimização do uso de recursos, reduzindo o consumo de energia e minimizando o impacto ambiental.


