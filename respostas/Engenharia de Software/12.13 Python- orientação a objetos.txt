Item do edital: 12.13 Python- orientação a objetos   
 
1. Subtópico:
1. Conceitos básicos de orientação a objetos em Python
Assertivas:
1. A orientação a objetos em Python é baseada em classes e objetos.
2. Em Python, os objetos são instâncias de uma classe.
3. Uma classe é um bloco de construção fundamental na programação orientada a objetos em Python.
4. A herança permite que uma classe herde atributos e métodos de outra classe.
5. O encapsulamento em Python é alcançado utilizando-se a convenção de nomenclatura com um único sublinhado (_).
6. Os métodos especiais em Python são usados para realizar operações específicas em objetos, como a sobrecarga de operadores (+, -, *, etc.).
7. Polimorfismo em Python permite que objetos de diferentes classes sejam tratados de forma semelhante.
8. A metodologia de desenvolvimento orientado a objetos busca modelar o mundo real através de classes e objetos.
9. Em Python, é possível criar atributos nessas classes que podem ser acessados e modificados.
10. A programação orientada a objetos em Python facilita a organização e a reutilização de código.

2. Subtópico:
2. Classes e objetos em Python
Assertivas:
1. Em Python, uma classe é uma estrutura que define os atributos e comportamentos de um objeto.
2. Em Python, um objeto é uma instanciação de uma classe, possuindo valores específicos para seus atributos.
3. Em Python, é possível criar múltiplas instâncias de uma classe, cada uma com seus próprios valores de atributos.
4. Em Python, as classes podem ter métodos, que são funções que operam nos atributos do objeto.
5. Em Python, as classes podem ter atributos de instância, que são variáveis específicas para cada instância da classe.
6. Em Python, é possível criar atributos de classe, que são variáveis compartilhadas por todas as instâncias da classe.
7. Em Python, a definição de uma classe é feita usando a palavra-chave "class", seguida pelo nome da classe e, opcionalmente, a classe pai (herança).
8. Em Python, o método __init__() é usado para inicializar os atributos de um objeto quando ele é criado.
9. Em Python, é possível acessar os atributos de um objeto usando a notação de ponto (objeto.atributo).
10. Em Python, é possível alterar os valores dos atributos de um objeto atribuindo um novo valor a eles (objeto.atributo = novo_valor).

3. Subtópico:
3. Herança e Polimorfismo em Python
Assertivas:
1. O herança em Python é um mecanismo que permite que uma classe herde atributos e métodos de outra classe.
2. A palavra-chave para definir uma classe como filha em Python é "class", seguida pelo nome da classe filha e entre parênteses o nome da classe mãe.
3. O polimorfismo em Python é a capacidade de um objeto ser referenciado por várias classes diferentes, assumindo comportamentos distintos em cada contexto.
4. O polimorfismo em Python é implementado através de métodos de mesmo nome, mas com implementações diferentes em cada classe.
5. A herança múltipla em Python permite que uma classe tenha herança de duas ou mais classes, possibilitando a reutilização de código de forma versátil.
6. Python suporta herança múltipla, diferente de outras linguagens de programação, proporcionando flexibilidade na criação de hierarquias de classes.
7. O acesso a atributos e métodos herdados em Python é feito através do operador de ponto (.), seguido pelo nome do atributo ou método desejado.
8. Uma classe filha pode adicionar novos atributos e métodos, além de modificar ou sobrescrever os já herdados da classe mãe.
9. Utilizar herança em Python pode aumentar a legibilidade e a modularidade do código, facilitando a manutenção e promovendo a reutilização de código.
10. O uso de polimorfismo em Python permite criar programas mais genéricos e flexíveis, tornando o código mais eficiente e elegante.

4. Subtópico:
4. Encapsulamento e Abstração em Python
Assertivas:
1. O encapsulamento em Python permite ocultar os detalhes internos de uma classe ou objeto.
2. A abstração em Python permite criar classes e objetos que representam entidades do mundo real.
3. Em Python, o encapsulamento é implementado através de convenções de nomenclatura e não por meio de modificadores de acesso.
4. A abstração em Python pode ser alcançada utilizando classes abstratas e métodos abstratos.
5. Em Python, o encapsulamento permite controlar o acesso aos atributos e métodos de uma classe ou objeto.
6. A abstração em Python facilita a modularização do código, tornando-o mais legível e reutilizável.
7. Em Python, o encapsulamento garante que as alterações internas de uma classe ou objeto não afetem o restante do programa.
8. A abstração em Python permite criar hierarquias de classes, com classes mais abstratas servindo de base para classes mais específicas.
9. Em Python, o encapsulamento é uma prática importante para garantir a integridade dos dados e evitar acesso não autorizado.
10. A abstração em Python permite criar interfaces claras e concisas para utilização de uma classe ou objeto, facilitando o desenvolvimento de outros componentes do programa.

5. Subtópico:
5. Métodos especiais de classe (construtores, destrutores) 
Assertivas:
1. Os métodos especiais de classe, como construtores e destrutores, são responsáveis por inicializar e liberar recursos de uma classe, respectivamente.
2. O construtor é um método especial de classe utilizado para criar e inicializar um objeto da mesma.
3. Os construtores são chamados automaticamente no momento da criação de um objeto, sem necessidade de uma chamada explícita.
4. Os destrutores são métodos especiais de classe utilizados para liberar recursos alocados pelo objeto, como memória ou conexões abertas.
5. Os destrutores são chamados automaticamente quando um objeto é destruído, seja após a finalização do escopo onde o objeto foi criado ou por uma chamada explícita ao método destroy().
6. Um construtor não pode retornar nenhum valor, nem mesmo void.
7. Os construtores podem ter parâmetros, permitindo a personalização da inicialização do objeto de acordo com os argumentos passados.
8. Uma classe pode ter múltiplos construtores, desde que tenham parâmetros diferentes.
9. Ao criar um objeto, se nenhum construtor for definido na classe, um construtor padrão será gerado automaticamente.
10. Em algumas linguagens de programação, como C++, os destrutores são implementados com o uso do operador destrutor ~, seguido do nome da classe.

6. Subtópico:
6. Trabalhando com módulos e pacotes em Python 
Assertivas:
1. Os módulos em Python são arquivos que contêm definições de classes, funções e variáveis.
2. Os pacotes em Python são pastas que podem conter um ou mais módulos relacionados.
3. Para utilizar um módulo em Python, é necessário importá-lo utilizando a palavra-chave "import".
4. É possível renomear um módulo durante o processo de importação utilizando a palavra-chave "as".
5. Para acessar as definições dentro de um módulo ou pacote, utiliza-se a notação de ponto ".".
6. O módulo padrão de Python, chamado de "built-in", contém diversas funções e classes úteis.
7. Um pacote pode conter subpacotes, formando uma hierarquia de organização de código.
8. É possível importar apenas uma definição específica de um módulo utilizando a palavra-chave "from".
9. Os módulos e pacotes podem ser encontrados no Python Package Index (PyPI) e facilmente instalados utilizando o gerenciador de pacotes "pip".
10. O uso de módulos e pacotes em Python facilita a reutilização de código e a modularização de projetos.

7. Subtópico:
7. Manipulação de exceções com Try, Except, Finally 
Assertivas:
1. O comando Try é utilizado para proteger um bloco de código, onde podem ocorrer exceções.
2. O bloco de código dentro do Try é executado normalmente, até o momento em que uma exceção é lançada.
3. Quando uma exceção é lançada dentro do Try, o código pula diretamente para o bloco de código do Except.
4. O bloco de código do Except é responsável por tratar a exceção ocorrida no Try.
5. É possível utilizar várias cláusulas de Except em um mesmo bloco Try, para tratar diferentes tipos de exceções.
6. O bloco de código do Finally é executado sempre, independentemente se ocorreu exceção ou não.
7. O bloco de código do Finally pode ser utilizado para realizar ações que devem ser feitas independentemente do resultado do Try e do Except.
8. Se uma exceção ocorrer no bloco do Except, ela não será tratada e será propagada para níveis superiores do programa.
9. O bloco de código do Finally é executado antes de propagar a exceção, caso ocorra.
10. Quando a exceção é tratada com sucesso no bloco de código do Except, o programa continua sua execução normalmente a partir dali.

8. Subtópico:
8. Decoradores e Geradores em Python
Assertivas:
1. O decorador é uma funcionalidade do Python que permite modificar o comportamento de uma função ou classe sem alterar seu código-fonte.
2. Os decoradores são definidos utilizando a sintaxe "@decorador" acima da definição da função ou classe a ser decorada.
3. O decorador recebe a função ou classe original como argumento e pode executar ações antes e/ou depois de sua execução.
4. Um gerador é uma função especial em Python que retorna um objeto iterável, permitindo a geração de elementos sob demanda, economizando memória.
5. Os geradores são definidos utilizando a palavra-chave "yield" dentro de uma função, ao invés do "return" utilizado em funções normais.
6. Ao chamar uma função geradora, ela retorna um objeto gerador, que pode ser percorrido utilizando um loop "for" ou chamando o método "next()" repetidamente.
7. A cada chamada do método "next()" em um objeto gerador, a execução da função é retomada a partir do último "yield" e continua até alcançar o próximo "yield".
8. Os geradores são ideais para lidar com grandes volumes de dados ou operações demoradas, permitindo um uso mais eficiente de recursos computacionais.
9. A utilização de geradores em Python proporciona uma maior performance em comparação a abordagens que exigem o armazenamento de todos os elementos em memória.
10. A biblioteca padrão do Python oferece diversas ferramentas e utilitários para utilização de decoradores e geradores de forma eficiente e segura.

9. Subtópico:
9. Sobrecarga de operadores em Python 
Assertivas:
1. Em Python, é possível realizar sobrecarga de operadores como +, -, *, /, entre outros.

2. A sobrecarga de operadores em Python permite que um operador tenha diferentes comportamentos dependendo dos operandos envolvidos.

3. A sobrecarga de operadores em Python é implementada através de métodos especiais chamados de métodos mágicos.

4. A sobrecarga de operadores em Python é uma forma de personalizar o comportamento de operadores já existentes na linguagem.

5. Um exemplo de sobrecarga de operadores em Python é o método __add__, que permite a adição de objetos de uma classe definida pelo usuário.

6. A sobrecarga de operadores em Python permite que operações como + sejam realizadas com tipos de dados personalizados pelo usuário.

7. Ao realizar a sobrecarga de operadores em Python, é possível definir o comportamento de operadores para tipos de dados customizados, como por exemplo, matrizes.

8. A sobrecarga de operadores em Python permite que uma classe defina como os operadores devem se comportar com objetos dessa classe.

9. A sobrecarga de operadores em Python pode facilitar a escrita de código mais legível e expressivo, tornando as operações mais intuitivas para os desenvolvedores.

10. Subtópico:
10. Bibliotecas padrão para orientação a objetos (como o Pygame).
Assertivas:
1. A biblioteca Pygame é uma biblioteca padrão amplamente utilizada para desenvolvimento de jogos em Python.
2. A biblioteca Pygame permite criar gráficos, animações e interações em jogos desenvolvidos em Python.
3. A biblioteca Pygame oferece suporte para áudio e música, permitindo a criação de trilhas sonoras e efeitos sonoros em jogos.
4. A biblioteca Pygame possui funcionalidades para lidar com dispositivos de entrada, como teclado e mouse, facilitando a interação do usuário com os jogos.
5. A biblioteca Pygame oferece recursos para detecção de colisões entre objetos, possibilitando a implementação de mecânicas de jogo baseadas em física e interações entre elementos do jogo.
6. A biblioteca Pygame permite o desenvolvimento de jogos multiplataforma, compatíveis com diversos sistemas operacionais.
7. A biblioteca Pygame oferece facilidades para o desenvolvimento de jogos em 2D, desde a criação de gráficos até a implementação da lógica do jogo.
8. A biblioteca Pygame disponibiliza uma ampla documentação e comunidade ativa de desenvolvedores, proporcionando recursos e suporte para os programadores.
9. A biblioteca Pygame permite a criação de jogos em Python de forma acessível, mesmo para desenvolvedores iniciantes.
10. A biblioteca Pygame é gratuita e de código aberto, sendo uma opção popular e confiável para o desenvolvimento de jogos em Python.


