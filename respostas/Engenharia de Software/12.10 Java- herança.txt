Pergunta Original: 12.10 Java- herança   
 
1. Subtópico:
1. Conceito e Definição de Herança em Java
Assertivas:
1. A herança em Java permite que uma classe herde características de outra classe.
2. Uma classe pode herdar atributos e métodos de uma única superclasse em Java.
3. A palavra-chave "extends" é utilizada para estabelecer uma relação de herança entre classes em Java.
4. A classe que herda é chamada de subclasse ou classe derivada.
5. A classe da qual outra classe herda é chamada de superclasse ou classe base.
6. A herança em Java segue o princípio de que uma subclasse é um tipo de sua superclasse.
7. A herança em Java permite a reutilização de código existente, promovendo a facilidade de manutenção.
8. Um dos benefícios da herança em Java é a criação de uma hierarquia de classes, permitindo uma organização mais clara e modularizada do código.
9. Na herança em Java, a subclasse pode adicionar novos atributos e métodos além dos herdados da superclasse.
10. A herança em Java aumenta a flexibilidade e a extensibilidade do código, permitindo a criação de relacionamentos entre classes de forma hierárquica.

2. Subtópico:
2. Classes, Superclasses e Subclasses em Java
Assertivas:
1. As classes em Java são estruturas que permitem definir objetos com características e comportamentos específicos.
2. As classes em Java podem ser usadas como modelos para a criação de objetos.
3. Uma classe em Java pode conter atributos, métodos e construtores.
4. Uma superclasse em Java é uma classe que é extendida por outras classes, podendo fornecer características e comportamentos comuns a essas subclasses.
5. Uma classe pode ter uma única superclasse em Java, mas pode implementar múltiplas interfaces.
6. Uma subclasse em Java é uma classe que herda características e comportamentos de uma superclasse.
7. Uma subclasse pode adicionar novos atributos, métodos e construtores, além de sobrescrever métodos da superclasse.
8. Em Java, uma subclasse pode acessar tanto os atributos e métodos herdados da superclasse quanto os atributos e métodos próprios.
9. O mecanismo de herança permite a reutilização de código, evitando duplicação de código e facilitando a manutenção e extensão de classes.
10. Em Java, a relação de herança entre classes é estabelecida por meio da palavra-chave "extends".

3. Subtópico:
3. Uso da palavra-chave 'extends' para implementar herança
Assertivas:
1. O uso da palavra-chave 'extends' em Java permite a implementação de herança entre classes.
2. A palavra-chave 'extends' indica que uma classe está herdando os atributos e métodos de outra classe.
3. O conceito de herança é importante na programação orientada a objetos e permite a reutilização de código.
4. A palavra-chave 'extends' estabelece um relacionamento de hierarquia entre as classes envolvidas.
5. O uso correto da palavra-chave 'extends' garante que os membros da classe pai sejam herdados pela classe filha.
6. A palavra-chave 'extends' é fundamental para a criação de uma estrutura de classes mais organizada e coerente.
7. Ao utilizar 'extends', a classe filha pode acessar os atributos e métodos públicos da classe pai.
8. A herança, implementada através de 'extends', permite a especialização dos objetos em uma hierarquia de classes.
9. O uso de 'extends' possibilita a criação de classes mais genéricas que podem ser estendidas para classes mais específicas.
10. Utilizar 'extends' de maneira adequada é essencial para garantir um código mais legível, manutenível e de fácil entendimento.

4. Subtópico:
4. Polimorfismo e Herança 
Assertivas:
1. Polimorfismo é um conceito da programação orientada a objetos que permite que um único código possa ser aplicado a objetos de diferentes classes.
2. O polimorfismo refere-se à capacidade de uma variável de referência de uma superclasse poder se comportar como qualquer uma das suas subclasses.
3. A herança permite que uma classe herde atributos e comportamentos de outra classe, além de possibilitar a criação de novos atributos e comportamentos na classe derivada.
4. Uma classe derivada pode acessar os membros protegidos da classe base, garantindo a reutilização do código.
5. O polimorfismo pode ser alcançado através da implementação de métodos com o mesmo nome em diferentes classes, mas com parâmetros e retornos diferentes.
6. Em herança múltipla, uma classe pode herdar características de mais de uma classe base.
7. Interfaces são usadas para criar contratos entre classes, definindo quais métodos uma classe deve implementar.
8. A sobrecarga ocorre quando múltiplos métodos têm o mesmo nome, mas com diferentes assinaturas.
9. Herança é um mecanismo que favorece a criação de classes mais especializadas a partir de classes mais gerais.
10. O encapsulamento é uma característica da programação orientada a objetos que permite a proteção de acesso a atributos e métodos, garantindo a integridade dos dados.

5. Subtópico:
5. Encapsulamento na Herança 
Assertivas:
1. O encapsulamento é um dos princípios fundamentais da programação orientada a objetos.
2. O encapsulamento permite esconder os detalhes de implementação de uma classe, restringindo o acesso aos atributos e métodos internos.
3. Na herança, o encapsulamento é utilizado para garantir que os atributos e métodos privados da classe pai não possam ser acessados diretamente pela classe filha.
4. Ao encapsular os atributos, é possível controlar melhor o estado dos objetos e evitar alterações não autorizadas.
5. O encapsulamento é essencial para garantir a integridade dos dados, uma vez que impede a manipulação indevida ou direta de atributos privados.

6. Subtópico:
6. Uso do 'super' em contextos de herança
Assertivas:
1. O termo "super" pode ser usado para indicar algo que está acima ou além de uma condição ou característica comum.
2. No contexto de herança, o termo "super" pode ser utilizado para se referir a uma classe ou objeto que possui características adicionais em relação à classe ou objeto pai.
3. O uso do termo "super" em contextos de herança permite que os objetos descendentes herdem atributos e métodos da classe ou objeto pai.
4. O uso do termo "super" em herança permite o acesso e a manipulação de membros e comportamentos da classe ou objeto pai.
5. Ao utilizar o termo "super" em herança, é possível estender e personalizar o comportamento de uma classe ou objeto já existente.
6. O uso do termo "super" em herança permite a implementação de polimorfismo, uma vez que os objetos descendentes podem se comportar de forma diferente da classe pai.
7. A utilização do termo "super" em contextos de herança é uma prática comum em programação orientada a objetos.
8. O termo "super" é uma palavra-chave em algumas linguagens de programação, como Java.
9. O uso adequado do termo "super" em contextos de herança é fundamental para garantir a correta hierarquia e funcionamento das classes e objetos.
10. O entendimento e o domínio do conceito de "super" em herança são importantes para o desenvolvimento de programas eficientes e flexíveis.

7. Subtópico:
7. Sobrescrita de Métodos (Overriding) na Herança 
Assertivas:
1. A sobrescrita de métodos ocorre quando uma classe filha redefine a implementação de um método herdado de sua classe pai.
2. Na sobrescrita de métodos, a assinatura do método na classe filha deve ser idêntica à assinatura do método na classe pai.
3. A sobrescrita de métodos permite que uma classe filha tenha seu próprio comportamento para um método específico, alterando a implementação herdada da classe pai.
4. Ao sobrescrever um método, a classe filha pode expandir ou modificar o comportamento definido na classe pai.
5. A sobrescrita de métodos é uma característica da herança, onde as classes filhas podem fornecer suas próprias implementações para métodos herdados.
6. A sobrescrita de métodos permite que o polimorfismo seja aplicado em tempo de execução, quando uma chamada de método é feita com base no tipo real do objeto.
7. A palavra-chave "super" é usada na sobrescrita de métodos para chamar a implementação do método da classe pai a partir da classe filha.
8. Ao sobrescrever um método, a classe filha pode lançar as mesmas exceções que a classe pai, desde que elas estejam relacionadas à assinatura do método.
9. A sobrescrita de métodos não pode ter como resultado a diminuição do nível de acesso do método na classe filha em relação à classe pai.
10. A sobrescrita de métodos é uma técnica importante na programação orientada a objetos, pois permite a reutilização de código e a personalização do comportamento de métodos em classes filhas.

8. Subtópico:
8. Hierarquia de Classes e Relações entre Objetos
Assertivas:
1. Na hierarquia de classes, uma classe pai pode ter várias classes filhas.
2. As classes filhas herdam características e comportamentos da classe pai.
3. Uma classe pode ser filha de uma única classe, mas pode possuir múltiplas classes filhas.
4. Uma classe filha pode sobrescrever os métodos da classe pai para alterar seu comportamento.
5. A relação entre uma classe pai e suas classes filhas é conhecida como herança.
6. A herança permite reutilizar código e promover a organização e estruturação do sistema.
7. Classes filhas podem adicionar novos atributos e métodos à classe pai através de herança.
8. Uma classe filha pode acessar atributos e métodos públicos da classe pai.
9. A herança pode ser utilizada para criar classes especializadas a partir de uma classe mais genérica.
10. A hierarquia de classes define as relações de parentesco e a estrutura de um sistema orientado a objetos.

9. Subtópico:
9. Construtores e a ordem de chamada na hierarquia da herança.
Assertivas:
1. Os construtores são métodos especiais que são chamados automaticamente quando um objeto é criado a partir de uma classe.
2. Os construtores não são herdados pelas subclasses.
3. Na hierarquia da herança, o construtor da classe pai é chamado primeiro antes do construtor da classe filha.
4. Caso a classe filha não tenha um construtor explicitamente definido, será chamado o construtor padrão da classe pai.
5. É possível invocar explicitamente o construtor da classe pai a partir do construtor da classe filha através da palavra-chave "super".
6. Os construtores são utilizados para inicializar os atributos do objeto e prepará-lo para o seu uso.
7. É possível sobrescrever um construtor da classe pai na classe filha, desde que a assinatura seja a mesma.
8. Os construtores não podem ser marcados como "static".
9. Um construtor pode ter parâmetros ou não, e a escolha deve levar em consideração as necessidades da classe.
10. Uma classe pode ter mais de um construtor, desde que tenham assinaturas diferentes.

10. Subtópico:
10. Restrições à Herança: classes finais, métodos finais, modificadores
Assertivas:
1. As classes finais não podem ser herdadas por outras classes.
2. Os métodos finais não podem ser sobrescritos pelas subclasses.
3. Os modificadores de acesso restringem a visibilidade dos membros de uma classe.
4. A palavra-chave "final" pode ser utilizada na declaração de classes, métodos e variáveis.
5. Uma classe final pode conter métodos não finais.
6. Os métodos finais podem ser utilizados em classes abstratas.
7. Os modificadores de acesso (public, private, protected) controlam o acesso aos membros de uma classe.
8. As classes com o modificador de acesso "public" podem ser acessadas por qualquer outra classe.
9. Os métodos com o modificador de acesso "private" só podem ser acessados dentro da própria classe.
10. Uma variável final deve ser inicializada durante a declaração ou no construtor da classe.


