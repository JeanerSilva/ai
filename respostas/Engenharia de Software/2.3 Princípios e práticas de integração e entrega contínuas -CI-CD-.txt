Item do edital: 2.3 Princípios e práticas de integração e entrega contínuas -CI-CD-.    
 
1. Subtópico:
1. Definição e importância da Integração Contínua (CI) e Entrega Contínua (CD).
Assertivas:
1. A Integração Contínua (CI) é uma prática de desenvolvimento de software que consiste em realizar constantes integrações de código em um repositório compartilhado.
2. A Integração Contínua (CI) tem como objetivo detectar erros e conflitos de código mais cedo no processo de desenvolvimento, reduzindo assim a complexidade de correções tardias.
3. A Integração Contínua (CI) permite aos desenvolvedores a obtenção de feedbacks rápidos sobre a qualidade do código, tornando o processo de desenvolvimento mais eficiente.
4. A Entrega Contínua (CD) é uma extensão da prática da Integração Contínua (CI) e consiste na automação do processo de deploy e entrega de software em ambiente de produção.
5. A Entrega Contínua (CD) possibilita a redução do tempo entre o desenvolvimento e a disponibilização de novas funcionalidades aos usuários finais.
6. A Entrega Contínua (CD) contribui para a estabilidade e confiabilidade do software, ao automatizar o processo de deploy e minimizar a possibilidade de erros humanos.
7. A Integração Contínua (CI) e a Entrega Contínua (CD) são práticas indispensáveis em ambientes de desenvolvimento ágil, onde a velocidade e a qualidade são fundamentais.
8. A adoção da Integração Contínua (CI) e da Entrega Contínua (CD) aumenta a colaboração entre os membros da equipe de desenvolvimento, bem como a transparência do processo de produção de software.
9. A Integração Contínua (CI) e a Entrega Contínua (CD) têm um impacto positivo no ciclo de vida do software, facilitando a identificação e correção de bugs e melhorando a experiência do usuário.
10. A Integração Contínua (CI) e a Entrega Contínua (CD) são práticas que contribuem para o desenvolvimento de software de forma iterativa e evolutiva, permitindo a adaptação às necessidades do negócio de maneira mais ágil.

2. Subtópico:
2. Ferramentas utilizadas para CI/CD.
Assertivas:
1. A ferramenta Jenkins é amplamente utilizada para a implementação de integração contínua e entrega contínua (CI/CD) em projetos de desenvolvimento de software.
2. O GitLab é uma ferramenta que fornece recursos para CI/CD, permitindo que equipes de desenvolvimento automatizem processos de build, teste e deployment.
3. O Docker é uma ferramenta popular para a criação de contêineres, que facilita a execução e o gerenciamento de aplicações de forma isolada, sendo um componente essencial para a implementação de CI/CD.
4. O Kubernetes é uma ferramenta de orquestração de contêineres que permite a automação de tarefas relacionadas com a implantação, escala e gerenciamento de aplicações em contêineres, sendo fundamental para uma estratégia de CI/CD eficiente.
5. O SonarQube é uma ferramenta utilizada para a análise estática de código, auxiliando no monitoramento da qualidade do código e na identificação de problemas que podem comprometer a continuidade da entrega contínua.
6. O Terraform é uma ferramenta de automação de infraestrutura, que permite a criação de recursos de infraestrutura como código, facilitando a implantação de ambientes de desenvolvimento, testes e produção.
7. A ferramenta Ansible é amplamente utilizada para a automação de tarefas de implantação, configuração e gerenciamento de infraestrutura, sendo integrável aos pipelines de CI/CD para facilitar a entrega contínua.
8. O Gradle é uma ferramenta utilizada para a automação e gerenciamento de builds em projetos de desenvolvimento de software, possibilitando uma integração eficiente com pipelines de CI/CD.
9. O Artifactory é uma ferramenta de gerenciamento de repositório, que permite o armazenamento e acesso a diferentes tipos de artefatos utilizados em projetos de desenvolvimento, sendo indispensável para a implementação de CI/CD.
10. O Selenium é uma ferramenta amplamente usada para automação de testes funcionais em aplicações web, auxiliando no processo de CI/CD ao validar a funcionalidade da aplicação de forma automatizada.

3. Subtópico:
3. Benefícios e desafios na implementação de CI/CD.
Assertivas:
1. A implementação de CI/CD (Integração Contínua/Implantação Contínua) traz benefícios significativos para o desenvolvimento de software, como a redução de erros e a maximização da qualidade do produto final.
2. A utilização de CI/CD permite que as equipes de desenvolvimento obtenham feedback mais rápido, acelerando o processo de entrega e aumentando a agilidade do desenvolvimento de software.
3. A implementação de CI/CD proporciona maior transparência e visibilidade do progresso do projeto, permitindo que os membros da equipe acompanhem de perto o status das alterações e a integração de novas funcionalidades.
4. A utilização de CI/CD promove maior colaboração entre os membros da equipe, incentivando a compartilharem conhecimentos e experiências, o que resulta em melhores práticas de desenvolvimento.
5. Um dos desafios na implementação de CI/CD é a necessidade de adotar uma abordagem de automação eficiente, garantindo a execução rápida e confiável dos processos de construção, teste e implantação contínua.
6. Outro desafio é garantir a existência de uma infraestrutura adequada, tanto em termos de hardware quanto de software, que suporte os requisitos de CI/CD, incluindo a disponibilidade de servidores de build, ferramentas de teste automatizado e ramificação de código eficiente.
7. A mudança cultural também é um desafio na implementação de CI/CD, pois exige que os membros da equipe estejam abertos a abordagens colaborativas e estejam dispostos a aprender e experimentar continuamente.
8. É necessário definir processos e fluxos de trabalho claros e bem documentados na implementação de CI/CD, a fim de garantir que todas as etapas sejam seguidas corretamente e que todas as alterações sejam integradas com sucesso.
9. A implementação de CI/CD requer investimentos em treinamentos e capacitação dos membros da equipe, a fim de garantir que todos estejam familiarizados com as ferramentas e práticas relacionadas.
10. A adoção de boas práticas de segurança é essencial na implementação de CI/CD, pois a exposição contínua de código e a automação dos processos podem aumentar as vulnerabilidades e os riscos de segurança.

4. Subtópico:
4. Princípios fundamentais da Integração Contínua.
Assertivas:
1. A Integração Contínua visa a melhoria contínua e automatizada do processo de desenvolvimento de software.
 2. Um dos princípios da Integração Contínua é o uso de um repositório central para armazenar o código-fonte do projeto.
 3. A implementação da Integração Contínua requer o uso de ferramentas de automação, como sistemas de build e testes automatizados.
 4. A Integração Contínua incentiva a prática de commits frequentes e pequenos, para facilitar a detecção de problemas no código.
 5. A Integração Contínua envolve a integração periódica do código desenvolvido por diferentes membros de uma equipe.
 6. A Integração Contínua permite a execução automática de testes para garantir que o código está funcionando corretamente.
 7. A Integração Contínua facilita a detecção precoce de conflitos e bugs no código, evitando problemas na produção.
 8. A Integração Contínua pode ser integrada a um sistema de controle de versão para facilitar o gerenciamento das alterações no código.
 9. A Integração Contínua promove uma abordagem ágil no desenvolvimento de software, com maior rapidez na entrega de novas funcionalidades.
 10. A Integração Contínua contribui para a redução de riscos e aumento da qualidade do software, pela detecção e solução antecipada de problemas.

5. Subtópico:
5. Etapas do processo de Entrega Contínua.
Assertivas:
1. A entrega contínua é um processo que visa automatizar a entrega de software de forma rápida e frequente.
2. Uma das etapas do processo de entrega contínua é a integração contínua, onde o desenvolvimento e as alterações de código são constantemente integrados e testados.
3. A automação de testes é fundamental no processo de entrega contínua para garantir a qualidade do software antes de ser liberado para produção.
4. Outra etapa importante da entrega contínua é a criação de ambientes de desenvolvimento e produção virtualizados, garantindo a replicação exata do ambiente real de produção.
5. A entrega contínua também envolve a aplicação de práticas de DevOps, que buscam aproximar os times de desenvolvimento e operações para agilizar e otimizar o processo produtivo.
6. Na etapa de entrega contínua, os testes automatizados são executados em diferentes configurações e cenários para assegurar a estabilidade e o desempenho do software em diferentes ambientes e situações.
7. O processo de entrega contínua permite que as equipes desenvolvedoras liberem novas funcionalidades e correções de bugs de forma constante e sem interrupções.
8. A implementação de boas práticas de versionamento e controle de código, como o uso de repositórios Git, é essencial para o sucesso da entrega contínua.
9. A utilização de uma infraestrutura de servidor e recursos de computação em nuvem escalável é uma característica comum nos processos de entrega contínua.
10. O processo de entrega contínua visa reduzir os riscos associados a implementações e atualizações de software, uma vez que os testes e validações automáticas garantem a estabilidade do sistema.

6. Subtópico:
6. Diferença entre Integração Contínua, Entrega Contínua e Implantação contínua.
Assertivas:
1. A Integração Contínua é uma prática de desenvolvimento de software que envolve a fusão frequente de alterações de código em um sistema centralizado.
2. A Entrega Contínua é uma extensão da Integração Contínua que implementa processos automatizados para garantir que as alterações no código sejam testadas e prontas para serem implantadas em produção a qualquer momento.
3. A Implantação Contínua é uma abordagem em que as alterações de código são implantadas automaticamente no ambiente de produção assim que o processo de Entrega Contínua é concluído.
4. A Integração Contínua permite equipes de desenvolvimento detectarem e resolverem problemas de integração entre diferentes partes do código de forma mais eficiente.
5. A Entrega Contínua garante que alterações de código sejam testadas automaticamente em uma variedade de ambientes, como ambientes de teste e pré-produção, antes de serem implantadas em produção.
6. A Implantação Contínua reduz o tempo necessário para implementar alterações de código em produção, tornando possível a implantação rápida e constante de novas funcionalidades e correções de bugs.
7. A Integração Contínua é geralmente implementada por meio de ferramentas e práticas de automação, como sistemas de controle de versão e servidores de integração contínua.
8. A Entrega Contínua envolve a criação de pipelines automatizados de entrega que executam testes e validações para garantir a qualidade de um software antes da implantação.
9. A Implantação Contínua permite que as equipes de desenvolvimento reduzam as chances de erros ao automatizar o processo de implantação em produção.
10. Integração Contínua, Entrega Contínua e Implantação Contínua são práticas fundamentais em metodologias ágeis de desenvolvimento de software, como DevOps e Continuous Delivery.

7. Subtópico:
7. Implementação de testes automatizados em CI/CD.
Assertivas:
1. A implementação de testes automatizados em CI/CD visa garantir a qualidade contínua do software.
2. Os testes automatizados em CI/CD contribuem para a detecção precoce de possíveis falhas ou erros no código.
3. A implementação de testes automatizados em CI/CD permite a automação e execução rápida de testes em diferentes ambientes.
4. Os testes automatizados em CI/CD possibilitam a redução do tempo necessário para a realização de testes manuais.
5. Com a implementação de testes automatizados em CI/CD, é possível obter uma maior cobertura de testes em comparação aos testes manuais.
6. Os testes automatizados em CI/CD auxiliam no processo de integração contínua, garantindo que as alterações de código não impactem negativamente no sistema como um todo.
7. A implementação de testes automatizados em CI/CD facilita a identificação de problemas de regressão, evitando que eles sejam propagados para os ambientes de produção.
8. Os testes automatizados em CI/CD proporcionam maior agilidade na detecção e correção de erros, aumentando a eficiência do desenvolvimento de software.
9. Com a implementação de testes automatizados em CI/CD, é possível realizar testes de forma mais consistente e confiável, reduzindo a dependência de testadores humanos.
10. Os testes automatizados em CI/CD contribuem para a criação de um ciclo de desenvolvimento mais fluido, permitindo a entrega de software de maneira mais rápida e frequente.

8. Subtópico:
8. Papel do DevOps na integração e entrega contínuas.
Assertivas:
1. A adoção do DevOps é fundamental para garantir a integração e entrega contínuas de software.
2. O papel do DevOps é promover a colaboração entre desenvolvedores e equipes de operações de TI para agilizar a entrega de software.
3. O DevOps é responsável por implementar ferramentas e processos automatizados que permitem a entrega rápida e segura de novas funcionalidades aos usuários.
4. A integração contínua é um conceito-chave do DevOps, que envolve a fusão contínua de alterações de código em um repositório compartilhado e a realização de testes automatizados.
5. A entrega contínua, outra prática do DevOps, consiste em implantar com frequência as alterações em ambientes de produção, permitindo que os usuários obtenham valor rapidamente.
6. O DevOps incentiva a automação de processos de implantação, teste e monitoramento, reduzindo erros humanos e melhorando a qualidade do software entregue.
7. O DevOps é responsável por estabelecer uma cultura de responsabilidade compartilhada, em que todos os membros da equipe são responsáveis pela qualidade e entrega do software.
8. O DevOps visa reduzir o tempo médio necessário para corrigir falhas (MTTR), garantindo que problemas sejam identificados e solucionados rapidamente. 
9. A utilização de ferramentas de integração e entrega contínuas (CI/CD) é uma prática comum no contexto do DevOps.
10. A adoção do DevOps tem se tornado cada vez mais relevante em ambientes de desenvolvimento ágil, pois permite uma entrega mais rápida e confiável de valor aos usuários.

9. Subtópico:
9. Gestão de configura
Assertivas:
1) A gestão de configuração é um processo fundamental para garantir o controle e a integridade dos itens de configuração em um ambiente de TI.
2) A gestão de configuração envolve a identificação, controle, registro e monitoramento das alterações realizadas em itens de configuração.
3) A gestão de configuração busca estabelecer uma base de linha de base (baseline) para referência e controle das configurações.
4) A gestão de configuração tem como objetivo principal minimizar riscos e problemas relacionados à configuração dos itens de um ambiente de TI.
5) A gestão de configuração deve ser realizada de forma sistemática e consistente, seguindo procedimentos padronizados.
6) A gestão de configuração ajuda a garantir que as mudanças realizadas em um ambiente de TI sejam devidamente planejadas e autorizadas.
7) A gestão de configuração é crucial para facilitar a identificação e resolução de problemas relacionados à configuração de sistemas.
8) A gestão de configuração envolve a definição e manutenção de políticas, processos e ferramentas adequadas para o controle dos itens de configuração.
9) A gestão de configuração contribui para a maximização da eficiência e da eficácia de um ambiente de TI, reduzindo a ocorrência de falhas e interrupções não planejadas.
10) A gestão de configuração requer participação e cooperação de diversas áreas de uma organização, incluindo o time de TI, desenvolvedores, analistas de negócio e usuários finais.


