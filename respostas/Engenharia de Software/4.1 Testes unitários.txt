Item do edital: 4.1 Testes unitários   
 
1. Subtópico:
1. Conceito e importância de testes unitários
Assertivas:
1. Os testes unitários são um conjunto de procedimentos para verificar se as unidades individuais de um programa estão funcionando corretamente.
2. Os testes unitários são fundamentais para garantir a qualidade e a confiabilidade do software.
3. Os testes unitários permitem identificar e corrigir erros em estágios iniciais do desenvolvimento, reduzindo assim os custos e o retrabalho.
4. Os testes unitários proporcionam maior segurança aos desenvolvedores ao realizar modificações no código, pois asseguram que as funcionalidades já implementadas continuem funcionando corretamente.
5. Os testes unitários são realizados isoladamente, testando cada unidade individualmente sem interações com outras partes do programa.
6. A cobertura de testes unitários é uma métrica que indica a proporção do código testado por meio dos testes unitários, sendo desejável que essa cobertura seja o mais próxima possível de 100%.
7. Os testes unitários devem ser rápidos e automatizados, permitindo que sejam executados frequentemente durante o processo de desenvolvimento.
8. Os testes unitários facilitam a depuração e o diagnóstico de problemas, auxiliando os desenvolvedores a identificarem com maior precisão as falhas no código.
9. A prática de realizar testes unitários contribui para a estruturação do código em módulos independentes e coesos, seguindo princípios de programação orientada a objetos.
10. Os testes unitários são uma parte essencial das metodologias ágeis de desenvolvimento de software, como o SCRUM e o Extreme Programming (XP).

2. Subtópico:
2. Ferramentas para realização de testes unitários
Assertivas:
1. As ferramentas para realização de testes unitários são amplamente utilizadas no desenvolvimento de software.
2. Uma das ferramentas mais populares para testes unitários é o JUnit, utilizado principalmente para aplicações em Java.
3. O PyTest é uma das ferramentas mais utilizadas para testes unitários em aplicações em Python.
4. O NUnit é uma das principais ferramentas disponíveis para testes unitários em aplicações em .NET.
5. Além de auxiliar na detecção de erros, as ferramentas para realização de testes unitários podem servir como documentação para o código.
6. As ferramentas para realização de testes unitários permitem a automação dos testes, garantindo uma execução rápida e precisa.
7. Através das ferramentas para realização de testes unitários, é possível identificar problemas no código de forma isolada, facilitando a manutenção.
8. As ferramentas para realização de testes unitários auxiliam no processo de refatoração, permitindo a identificação de possíveis impactos em outras partes do código.
9. As ferramentas para realização de testes unitários permitem a criação de cenários de teste específicos para diferentes partes do código.
10. Além das soluções mencionadas, existem diversas outras ferramentas disponíveis para realização de testes unitários, cada uma com suas particularidades e funcionalidades.

3. Subtópico:
3. Metodologias de desenvolvimento orientadas a testes (TDD)
Assertivas:
1. A metodologia de desenvolvimento orientada a testes (TDD) é uma abordagem que enfatiza a criação de testes automatizados antes do desenvolvimento do código.
2. O TDD busca garantir que o código seja testável e estável desde o início do processo de desenvolvimento.
3. Com o TDD, os testes são escritos antes mesmo do código, o que ajuda os desenvolvedores a terem uma visão clara de como a funcionalidade deve ser implementada.
4. No TDD, os testes são executados repetidamente à medida que as funcionalidades são desenvolvidas, permitindo identificar rapidamente erros no código.
5. O TDD promove a confiabilidade do software, uma vez que as falhas são detectadas e corrigidas precocemente durante o processo de desenvolvimento.
6. A metodologia TDD tem sido amplamente adotada em equipes ágeis de desenvolvimento de software.
7. Com o TDD, os desenvolvedores são incentivados a pensar em casos de teste e requisitos de forma mais detalhada antes de implementar funções ou classes.
8. O TDD auxilia na documentação automática do código, uma vez que os testes documentam as funcionalidades planejadas e esperadas.
9. Com o TDD, é possível garantir que novas funcionalidades não impactem negativamente nas funcionalidades já existentes.
10. A adoção do TDD pode trazer benefícios como redução de retrabalhos, aumento da produtividade e melhoria da qualidade do código produzido.

4. Subtópico:
4. Criação e execução de casos de teste unitário
Assertivas:
1. A criação de casos de teste unitário é uma etapa fundamental no processo de desenvolvimento de software.
2. Os casos de teste unitário são projetados para testar a funcionalidade de unidades individuais de código.
3. A execução de casos de teste unitário permite identificar falhas e erros nas unidades de código testadas.
4. A criação de casos de teste unitário auxilia na garantia da qualidade do software.
5. Os casos de teste unitário devem ser criados considerando diferentes cenários de entrada e saída.
6. A execução de casos de teste unitário geralmente é automatizada por meio do uso de frameworks de teste.
7. A criação de casos de teste unitário demanda uma compreensão profunda da unidade de código que está sendo testada.
8. A execução de casos de teste unitário deve ser realizada de forma isolada, sem dependência de outros componentes do sistema.
9. A criação de casos de teste unitário deve ser feita de maneira sistemática, abrangendo todas as possíveis situações de teste.
10. A execução bem-sucedida de casos de teste unitário indica que as unidades de código estão funcionando corretamente, contribuindo para a confiabilidade do software.

5. Subtópico:
5. Teste unitário em diferentes linguagens de programação
Assertivas:
1. Os testes unitários são utilizados para verificar se pequenas partes de um programa funcionam corretamente.
2. Os testes unitários podem ser escritos em diversas linguagens de programação, como Java, C++, Python, entre outras.
3. Os testes unitários ajudam a identificar bugs e garantem a qualidade do código.
4. Em um teste unitário, geralmente se testa uma única função ou método de uma classe isoladamente.
5. Ao escrever testes unitários, é importante considerar diferentes cenários de entrada e saída para garantir a abrangência dos testes.
6. Um dos principais objetivos dos testes unitários é facilitar a manutenção do código, permitindo alterações com maior confiança.
7. Linguagens de programação modernas geralmente possuem frameworks específicos para auxiliar na escrita de testes unitários, como JUnit para Java e pytest para Python.
8. Os testes unitários normalmente são executados de forma automatizada, facilitando a identificação de erros no código.
9. Ao realizar um teste unitário, é comum utilizar asserções para comparar o resultado esperado com o resultado obtido.
10. A prática de escrever testes unitários é considerada uma boa prática de programação e está presente em metodologias ágeis como o TDD (Test Driven Development).

6. Subtópico:
6. Mocking e Stubbing em testes unitários
Assertivas:
1. No contexto de testes unitários, mocking e stubbing são técnicas utilizadas para isolar o código que está sendo testado, substituindo dependências externas por objetos simulados.
2. O mocking consiste na criação de objetos simulados que representam as dependências externas do código em teste, permitindo controlar o comportamento dessas dependências durante os testes.
3. O stubbing é uma técnica de mocking em que são definidos comportamentos específicos para os objetos simulados durante os testes, simulando o comportamento esperado das dependências externas.
4. O uso de mocking e stubbing em testes unitários facilita a identificação e correção de problemas específicos em partes isoladas do código, sem a necessidade de executar todo o sistema.
5. O mocking e o stubbing podem ser realizados manualmente através da implementação de classes simuladas, ou utilizando bibliotecas específicas para essa finalidade, como o Mockito ou o Sinon.js.
6. É importante ter cuidado ao utilizar o mocking e o stubbing em excesso nos testes unitários, pois isso pode comprometer a integridade e a eficácia dos testes.
7. O mocking é particularmente útil quando se trabalha com dependências externas que não são facilmente controláveis ou cujo comportamento pode variar.
8. O stubbing é uma técnica aplicada quando se deseja simular o comportamento de uma dependência externa para testar um cenário específico.
9. O uso de mocking e stubbing em testes unitários permite criar casos de teste mais previsíveis e repetíveis, aumentando a confiabilidade dos resultados obtidos.
10. Embora sejam técnicas poderosas, o uso adequado de mocking e stubbing em testes unitários requer o entendimento profundo do código que está sendo testado, bem como das suas dependências externas.

7. Subtópico:
7. Cobertura do código por meio dos testes unitários 
Assertivas:
1. A cobertura do código por meio dos testes unitários é uma prática crucial para garantir a qualidade do software.
2. Os testes unitários são responsáveis por verificar o funcionamento isolado de cada unidade do código.
3. A cobertura do código pelos testes unitários permite identificar falhas e erros no código de forma mais rápida e eficiente.
4. A cobertura do código por meio dos testes unitários auxilia na detecção de problemas de interoperabilidade entre as diferentes partes do sistema.
5. A cobertura do código pelos testes unitários é fundamental para garantir a manutenabilidade e escalabilidade do software.
6. A cobertura do código por meio dos testes unitários permite a refatoração do código sem comprometer seu funcionamento.
7. Os testes unitários proporcionam uma documentação viva do código, pois servem como exemplos claros de como cada unidade deve se comportar.
8. A cobertura do código pelos testes unitários ajuda a evitar regressões, pois garante que os comportamentos previamente testados continuem funcionando corretamente.
9. A cobertura do código por meio dos testes unitários contribui para a confiabilidade do software, fornecendo um meio de validação contínua.
10. Os testes unitários são fundamentais para manter a integridade do código durante o desenvolvimento e facilitar a manutenção futura.

8. Subtópico:
8. Identificação e correção de bugs através dos testes unitários 
Assertivas:
1. Os testes unitários são uma estratégia eficiente para identificar bugs em um software.
2. A identificação de bugs por meio de testes unitários permite uma correção mais rápida e precisa.
3. Os testes unitários são responsáveis por identificar falhas específicas de cada função ou método de um sistema.
4. A correção de bugs por meio de testes unitários contribui para a melhoria contínua da qualidade do software.
5. Durante os testes unitários, é possível identificar bugs antes mesmo da integração com outras partes do sistema.
6. A identificação de bugs através dos testes unitários é essencial para garantir um código livre de erros.
7. A prática de testes unitários facilita a manutenção do software, pois torna mais fácil encontrar e corrigir possíveis bugs.
8. A correção de bugs através dos testes unitários evita retrabalho e reduz o tempo necessário para correções no software.
9. Os testes unitários são uma parte fundamental do processo de desenvolvimento de software, pois garantem a confiabilidade do sistema.
10. A identificação e correção de bugs por meio dos testes unitários ajuda a evitar falhas no software que poderiam impactar negativamente o usuário final.

9. Subtópico:
9. Integração contínua e papel dos testes unitários 
Assertivas:
1. A integração contínua é uma prática que consiste em integrar e testar frequentemente o código produzido por diferentes desenvolvedores em um ambiente compartilhado.
2. A integração contínua visa detectar erros ou conflitos de integração de maneira antecipada, evitando a acumulação de problemas em momentos posteriores do ciclo de desenvolvimento.
3. Os testes unitários desempenham um papel fundamental na integração contínua, uma vez que são responsáveis por avaliar o funcionamento individual de cada componente do software.
4. Os testes unitários são automatizados e executados frequentemente durante o processo de integração contínua, proporcionando feedback imediato sobre possíveis falhas ou regressões introduzidas no código.
5. A abordagem de testes unitários na integração contínua permite que erros sejam identificados e corrigidos de forma proativa, evitando que se propaguem para outras partes do sistema.
6. A utilização de testes unitários na integração contínua auxilia na garantia da qualidade do código, aumentando a confiabilidade do software entregue.
7. Os testes unitários na integração contínua possibilitam a detecção precoce de problemas relacionados à integração de módulos e componentes diferentes.
8. A prática de testes unitários na integração contínua contribui para a redução de riscos e custos de retrabalho, uma vez que erros são identificados e corrigidos em estágios iniciais do processo de desenvolvimento.
9. A integração contínua aliada aos testes unitários promove uma cultura de desenvolvimento ágil, estimulando a colaboração entre os membros da equipe e agilizando a entrega de software de qualidade.

10. Subtópico:
10. Melhores práticas na elaboração de testes unitários
Assertivas:
1. Testes unitários são uma prática essencial para garantir a qualidade do código.
2. Testes unitários devem ser independentes e não depender de outros componentes do sistema.
3. Testes unitários devem cobrir todos os caminhos possíveis de execução do código.
4. Testes unitários devem ser escritos de forma clara e concisa.
5. Testes unitários devem ser executados de forma automática e periódica.
6. Testes unitários devem ser de fácil compreensão, tanto para o desenvolvedor que os escreveu como para outros membros da equipe.
7. Testes unitários devem ser específicos para cada unidade de código que está sendo testada.
8. Testes unitários devem verificar tanto casos de sucesso quanto casos de falha.
9. Testes unitários devem ser fáceis de manter e atualizar conforme o código é alterado.
10. Testes unitários devem ter uma boa cobertura de código, ou seja, devem abranger o maior número possível de linhas e ramos de execução.


