Item do edital: 5.2 microsserviços -orquestração de serviços e API gateway-   
 
1. Subtópico:
1. Definição e características dos microsserviços
Assertivas:
1. Microsserviços são uma arquitetura de software em que uma aplicação é composta por vários serviços independentes e autônomos.
2. Os microsserviços são projetados para serem pequenos e modularizados, focados em uma única funcionalidade específica.
3. Os microsserviços podem ser desenvolvidos em diferentes linguagens de programação e tecnologias, desde que se comuniquem de forma padronizada, como por meio de APIs.
4. Cada microsserviço tem seu próprio banco de dados, permitindo a escalabilidade e flexibilidade no gerenciamento dos dados.
5. Os microsserviços podem ser implantados e atualizados de forma independente, sem a necessidade de parar a aplicação inteira.
6. A comunicação entre os microsserviços geralmente é feita de forma assíncrona, por meio de mensagens ou eventos.
7. Os microsserviços permitem uma melhor distribuição e aproveitamento de recursos, possibilitando escalabilidade horizontal.
8. A arquitetura de microsserviços requer um bom gerenciamento e monitoramento dos serviços, para garantir a disponibilidade e prevenir falhas.
9. A aplicação de microsserviços traz benefícios para o desenvolvimento ágil, permitindo a adoção de equipes de desenvolvimento autônomas e frequentes entregas de valor.
10. A adoção de microsserviços requer um planejamento cuidadoso e uma boa compreensão das características e desafios dessa arquitetura, sendo necessário avaliar a complexidade e os custos envolvidos.

2. Subtópico:
2. Vantagens e desvantagens da arquitetura de microsserviços
Assertivas:
1. A arquitetura de microsserviços permite uma maior modularidade e escalabilidade das aplicações.
2. Ao adotar a arquitetura de microsserviços, é possível realizar atualizações e implementações de forma independente em cada serviço.
3. A utilização de microsserviços permite uma melhor distribuição de carga e resiliência na infraestrutura.
4. Por serem independentes, os microsserviços possibilitam o uso de diferentes tecnologias e linguagens de programação.
5. A arquitetura de microsserviços promove agilidade no desenvolvimento, permitindo equipes menores e mais especializadas.
6. A separação em microsserviços facilita a escala horizontal dos recursos, evitando gargalos de desempenho.
7. A arquitetura de microsserviços facilita a adoção de práticas DevOps, permitindo a implementação contínua e a entrega mais rápida de novas funcionalidades.
8. A divisão em microsserviços auxilia no isolamento de problemas, minimizando o impacto de erros em outros componentes do sistema.
9. A complexidade aumenta com a adoção da arquitetura de microsserviços, pois é necessário gerenciar a comunicação entre os serviços.
10. A arquitetura de microsserviços demanda maior esforço inicial para o design e planejamento da aplicação, pois é necessário definir os limites entre os diferentes serviços.

3. Subtópico:
3. Conceito de orquestração de serviços em microsserviços
Assertivas:
1. A orquestração de serviços em microsserviços é uma abordagem em que um serviço principal coordena e controla a execução de outros serviços menores.
2. A orquestração de serviços em microsserviços permite a composição e a coordenação de diferentes serviços para criar uma funcionalidade ou processo mais complexo.
3. Na orquestração de serviços em microsserviços, o serviço principal é responsável por definir a sequência e a lógica de execução dos serviços menores.
4. A orquestração de serviços em microsserviços promove a modularidade e a reutilização de serviços, facilitando a manutenção e a evolução do sistema.
5. A orquestração de serviços em microsserviços ajuda a promover a separação de preocupações e a escalabilidade, permitindo que os serviços menores sejam atualizados ou substituídos independentemente.
6. A orquestração de serviços em microsserviços pode ser realizada por meio de ferramentas e tecnologias como o Kubernetes, Docker e Apache Kafka.
7. Uma das vantagens da orquestração de serviços em microsserviços é a maior flexibilidade na implementação de processos de negócio complexos.
8. A orquestração de serviços em microsserviços facilita a integração de sistemas heterogêneos, permitindo a interação entre diferentes tecnologias e protocolos.
9. A orquestração de serviços em microsserviços promove a descentralização do controle de fluxo, permitindo que cada serviço individual mantenha seu estado e seu contexto.
10. A orquestração de serviços em microsserviços é uma abordagem amplamente adotada em soluções de arquitetura distribuída, especialmente em aplicações baseadas em nuvem.

4. Subtópico:
4. Ferramentas para orquestração de serviços em microsserviços (como Kubernetes, Docker Swarm)
Assertivas:
1. Kubernetes é uma plataforma de orquestração de serviços em microsserviços amplamente utilizada.
2. Docker Swarm é uma ferramenta de orquestração de serviços em microsserviços desenvolvida pela Docker Inc.
3. O Kubernetes oferece recursos avançados, como escalabilidade automática e gerenciamento de containers em cluster.
4. Tanto o Kubernetes quanto o Docker Swarm são capazes de lidar com o gerenciamento de containers em um ambiente de microsserviços.
5. As ferramentas de orquestração de serviços em microsserviços são projetadas para facilitar a implantação, escalabilidade e gerenciamento de aplicações em ambientes dinâmicos.
6. Tanto o Kubernetes quanto o Docker Swarm permitem a distribuição de containers em múltiplos nós de um cluster para garantir alta disponibilidade.
7. O Kubernetes utiliza um modelo de manifesto declarativo (YAML) para definir a infraestrutura e configuração dos serviços em microsserviços.
8. O Docker Swarm possui um modelo de serviço que permite definir, implantar e dimensionar aplicativos em um ambiente de microsserviços.
9. Tanto o Kubernetes quanto o Docker Swarm suportam a integração com diferentes provedores de nuvem, facilitando a implementação em ambientes híbridos ou multi-nuvem.
10. As ferramentas de orquestração de serviços em microsserviços, como Kubernetes e Docker Swarm, são essenciais para otimizar o gerenciamento e a escalabilidade de aplicações baseadas em microsserviços.

5. Subtópico:
5. Entendimento do API Gateway na arquitetura de microsserviços
Assertivas:
1. O API Gateway é um componente fundamental na arquitetura de microsserviços.
2. O API Gateway é responsável por receber todas as requisições externas e direcioná-las para os microsserviços correspondentes.
3. O API Gateway facilita o processo de autenticação e autorização das requisições, aumentando a segurança na arquitetura de microsserviços.
4. O API Gateway permite o controle e monitoramento centralizado das requisições feitas aos microsserviços.
5. O API Gateway proporciona o padrão de projeto de API gateway pattern, que visa simplificar a comunicação entre clientes e servidores.
6. O API Gateway pode realizar a transformação de dados e a tradução de protocolos, garantindo a interoperabilidade entre microsserviços e clientes.
7. O API Gateway permite a implementação de recursos como a cache de respostas, aumentando o desempenho e a eficiência dos microsserviços.
8. A utilização do API Gateway contribui para a redução da complexidade e do acoplamento entre os microsserviços.
9. O API Gateway possibilita o roteamento dinâmico das requisições, direcionando-as para diferentes versões ou instâncias dos microsserviços.
10. A configuração do API Gateway pode ser feita através de arquivos de configuração ou APIs RESTful, permitindo uma maior flexibilidade e escalabilidade na arquitetura de microsserviços.

6. Subtópico:
6. Funções e benefícios do API Gateway 
Assertivas:
1. O API Gateway é uma solução que atua como ponto único de entrada para todas as APIs de um ecossistema.
2. O principal objetivo do API Gateway é facilitar o gerenciamento e controle das APIs, simplificando a implementação, a segurança e o monitoramento.
3. Uma das funções do API Gateway é o roteamento inteligente, permitindo redirecionar as solicitações para os serviços corretos com base em regras e parâmetros configuráveis.
4. O API Gateway oferece recursos de autenticação e autorização, permitindo controlar o acesso às APIs e proteger os recursos do sistema contra acessos não autorizados.
5. Ao utilizar um API Gateway, é possível realizar o monitoramento das APIs em tempo real, o que proporciona uma visão integrada do desempenho e disponibilidade dos serviços.
6. O API Gateway pode ser utilizado para padronizar as respostas das APIs, fornecendo uma interface consistente para os consumidores e facilitando a integração de diferentes sistemas.
7. Por meio do API Gateway é possível implementar políticas de segurança para evitar ataques, como SQL Injection e Cross-Site Scripting, por exemplo.
8. Utilizar um API Gateway possibilita a centralização e o gerenciamento de métricas e logs das APIs, facilitando a análise de dados e a identificação de problemas.
9. É possível configurar um API Gateway para realizar o versionamento das APIs, permitindo a coexistência de versões antigas e novas de serviços durante o processo de atualização.
10. Ao utilizar um API Gateway, é possível reduzir a complexidade da arquitetura, pois ele abstrai detalhes técnicos e simplifica a integração entre os sistemas.

7. Subtópico:
7. Implementação e gerenciamento do API Gateway 
Assertivas:
1. O API Gateway é uma ferramenta essencial para implementação e gerenciamento de APIs em um ambiente de integração de sistemas.
2. O API Gateway simplifica o processo de desenvolvimento de APIs, permitindo uma integração eficiente entre diferentes sistemas e plataformas.
3. O API Gateway auxilia no controle de acesso e segurança das APIs, permitindo a implementação de autenticação e autorização adequadas.
4. Ao utilizar o API Gateway, é possível monitorar e rastrear o tráfego de API, facilitando a identificação de gargalos de desempenho e problemas de integração.
5. O API Gateway oferece recursos de versionamento de APIs, permitindo a evolução controlada das interfaces e garantindo a compatibilidade retroativa.
6. Com o uso do API Gateway, é possível implementar políticas de limite de taxa (throttling), garantindo que a demanda de tráfego seja controlada e evitando sobrecargas nos sistemas.
7. Ao implementar um API Gateway, é possível realizar transformações de dados (ex: de formatos, protocolos, etc.), facilitando a integração entre diferentes sistemas heterogêneos.
8. O API Gateway permite a implementação de políticas de segurança, como a proteção contra ataques de negação de serviço (DDoS) e a prevenção de vulnerabilidades comuns.
9. O API Gateway oferece recursos de caching, permitindo o armazenamento temporário de respostas de API e melhorando o desempenho das chamadas subsequentes.
10. O API Gateway facilita a implementação de políticas de monitoramento e análise de tráfego, permitindo a geração de métricas e insights valiosos para a gestão de APIs.

8. Subtópico:
8. Segurança em microsserviços: autenticação e autorização através do API Gateway
Assertivas:
1. A autenticação e autorização em microsserviços podem ser realizadas por meio do API Gateway.
2. O API Gateway atua como ponto central de autenticação e autorização para todos os microsserviços.
3. A autenticação consiste na verificação da identidade de um usuário ou sistema antes de permitir acesso aos microsserviços.
4. A autorização é o processo de verificar as permissões concedidas a um usuário ou sistema para acessar determinados microsserviços.
5. O API Gateway oferece recursos para implementar políticas de segurança como autenticação baseada em tokens, como JSON Web Tokens (JWT).
6. A autenticação baseada em JWT permite que os usuários recebam um token de acesso após fornecerem suas credenciais, que é então verificado pelo API Gateway.
7. A autorização no API Gateway pode ser feita por meio de controle de acesso baseado em funções (RBAC), onde as permissões são atribuídas aos usuários com base em suas funções.
8. O API Gateway permite o gerenciamento centralizado de autenticação e autorização, simplificando o processo de segurança em microsserviços.
9. Ao utilizar o API Gateway para autenticação e autorização, os microsserviços podem se preocupar apenas com a lógica do negócio, aumentando a modularidade e a escalabilidade do sistema.
10. O uso do API Gateway para autenticação e autorização em microsserviços ajuda a garantir a segurança e integridade dos dados, mantendo um controle rigoroso sobre as permissões de acesso.

9. Subtópico:
9. Padrões de design
Assertivas:
1. Os padrões de design são diretrizes de boas práticas que visam facilitar o desenvolvimento de sistemas de software.
2. Os padrões de design ajudam a promover a reutilização de código e a modularidade em projetos de software.
3. O padrão de design "Factory Method" permite a criação de objetos sem especificar exatamente a classe a ser instanciada.
4. O padrão de design "Singleton" garante que uma classe tenha apenas uma instância em todo o sistema.
5. O padrão de design "Observer" permite a definição de uma dependência de um para muitos entre objetos, de forma que quando um objeto muda de estado, todos os seus dependentes são notificados e atualizados automaticamente.
6. O padrão de design "Decorator" permite adicionar novos comportamentos ou responsabilidades a um objeto dinamicamente, em tempo de execução.
7. O padrão de design "Strategy" permite a criação de famílias de algoritmos encapsulados e intercambiáveis.
8. O padrão de design "MVC" (Model-View-Controller) separa os componentes de uma aplicação em camadas, de forma a permitir a independência entre eles.
9. O padrão de design "Composite" permite agrupar objetos em uma estrutura de árvore, compondo objetos em estruturas complexas.
10. O padrão de design "Command" encapsula uma solicitação como um objeto, permitindo parametrizar clientes com diferentes solicitações, enfileirar solicitações e suportar operações que podem ser desfeitas.


