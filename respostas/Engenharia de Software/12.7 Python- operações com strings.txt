Item do edital: 12.7 Python- operações com strings   
 
1. Subtópico:
1. Conceitos básicos e definição de strings em Python
Assertivas:
1. Strings em Python são sequências imutáveis de caracteres.
2. Em Python, strings são definidas utilizando aspas simples ('') ou aspas duplas ("").
3. As strings em Python podem conter letras, números, espaços e caracteres especiais.
4. O comprimento de uma string em Python pode ser obtido utilizando a função len().
5. É possível concatenar strings em Python utilizando o operador de adição (+).
6. Em Python, é possível acessar caracteres específicos de uma string utilizando a indexação.
7. As strings em Python podem ser percorridas utilizando um loop for.
8. É possível formatar strings em Python utilizando os métodos format() ou f-strings.
9. Em Python, é possível transformar uma string em uma lista de caracteres utilizando a função list().
10. É possível converter uma string em letras maiúsculas ou minúsculas utilizando os métodos upper() e lower().

2. Subtópico:
2. Métodos de manipulação de strings: upper(), lower(), split(), join()
Assertivas:
1. O método upper() converte todos os caracteres de uma string em maiúsculos.
2. O método lower() converte todos os caracteres de uma string em minúsculos.
3. O método split() divide uma string em uma lista de substrings com base em um caractere delimitador.
4. O método join() concatena os elementos de uma lista de strings em uma única string, utilizando um separador especificado.
5. O método upper() não altera os caracteres que já estão em maiúsculo na string.
6. O método lower() não altera os caracteres que já estão em minúsculo na string.
7. O método split() retorna uma lista vazia se a string for vazia.
8. O método join() retorna a string original se a lista de strings for vazia.
9. O método split() remove o caractere delimitador da string resultante.
10. O método join() não insere nenhum caractere no início ou no final da string resultante.

3. Subtópico:
3. Formatação de strings em Python: uso do método format() e f-strings
Assertivas:
1. O método format() em Python é usado para formatar strings substituindo os marcadores de posição pelos valores fornecidos.
2. É possível especificar o índice do argumento a ser substituído utilizando o método format() em Python.
3. Os argumentos fornecidos para o método format() em Python podem ser tanto posicionais como nomeados.
4. Ao utilizar o método format() em Python, é possível formatar os valores em diferentes formatos, como decimal, hexadecimal e ponto flutuante.
5. As f-strings em Python são um novo método de formatação de strings introduzido na versão 3.6.
6. As f-strings permitem a substituição de variáveis diretamente na definição da string, utilizando chaves { }.
7. É possível realizar operações matemáticas e chamadas de métodos dentro das f-strings em Python.
8. As f-strings em Python são uma forma mais eficiente e simples de formatar strings em comparação ao método format().
9. As f-strings podem ser usadas em conjunto com o método format() em Python, permitindo uma formatação mais avançada.
10. Ao utilizar as f-strings em Python, é possível também definir opções de formatação, como alinhamento e preenchimento dos valores substituídos.

4. Subtópico:
4. Operações aritméticas com strings: concatenação e repetição
Assertivas:
1. A operação de concatenação de strings consiste em unir duas ou mais strings em uma única string.
2. A concatenação de strings é uma operação comutativa, ou seja, não importa a ordem em que as strings são concatenadas, o resultado final será o mesmo.
3. A repetição de uma string consiste em duplicar ou multiplicar o conteúdo da string original, resultando em uma sequência de strings idênticas.
4. A repetição de uma string pode ser realizada através do uso de operadores específicos ou método disponível em algumas linguagens de programação.
5. A concatenação de string com uma string vazia resultará na preservação da string original.
6. A repetição de uma string vazia sempre resultará em uma string vazia como resultado.
7. A concatenação de strings pode ser utilizada para a construção de mensagens personalizadas ou composição de textos dinâmicos.
8. A repetição de uma string pode ser útil em casos onde é necessário imprimir múltiplas vezes o mesmo conteúdo.
9. A operação de concatenação de strings pode ser utilizada para unir informações como nomes, endereços, números de telefone, entre outros, em um único campo.
10. A repetição de uma string pode ser limitada por um valor específico, possibilitando controlar o número de repetições desejadas.

5. Subtópico:
5. Indexação e fatiamento (slicing) de strings 
Assertivas:
1. A indexação de strings é realizada utilizando números inteiros positivos.
2. Ao buscar um índice negativo em uma string, ocorrerá um erro.
3. O primeiro caractere de uma string possui o índice 0.
4. O último caractere de uma string possui o índice igual ao tamanho da string menos 1.
5. O fatiamento (slicing) de strings permite criar subconjuntos contíguos de caracteres.
6. Ao utilizar o fatiamento em uma string, o primeiro índice é inclusivo e o segundo é exclusivo.
7. O índice de início do fatiamento deve ser menor que o índice de fim.
8. O resultado de um fatiamento é uma nova string contendo os caracteres do intervalo especificado.
9. A técnica de fatiamento é útil para extrair porções específicas de uma string.
10. É possível utilizar índices alternativos no fatiamento, especificando um terceiro argumento para definir o passo.

6. Subtópico:
6. Imutabilidade das strings em Python
Assertivas:
1. Strings em Python são imutáveis, o que significa que não é possível modificá-las diretamente após a sua criação.
2. Ao realizar uma operação de concatenação em Python, um novo objeto de string é criado em memória em vez de modificar a string original.
3. A imutabilidade das strings em Python traz benefícios em termos de segurança e prevenção de erros em programas.
4. A propriedade de imutabilidade das strings permite que elas possam ser usadas como chaves em dicionários.
5. A manipulação de strings em Python envolve técnicas que criam novas strings a partir de operações sobre as originais, em vez de modificar diretamente as existentes.
6. A imutabilidade das strings torna o processo de busca e substituição de caracteres menos eficiente em Python.
7. A tentativa de alterar um caractere específico em uma string em Python resultará em um TypeError.
8. É possível criar uma nova string em Python usando a função built-in `join()` a partir de uma sequência de strings existentes.
9. Comparar strings em Python envolve a comparação dos valores de seus caracteres um a um.
10. A imutabilidade das strings em Python permite que elas sejam utilizadas como chaves em conjuntos (sets) e como elementos de listas.

7. Subtópico:
7. Uso da função len() para determinar o comprimento da string
Assertivas:
1. A função len() é utilizada para determinar o comprimento de uma string em Python.
2. A função len() retorna um valor inteiro que representa a quantidade de caracteres de uma string.
3. A função len() pode ser aplicada em qualquer string, independentemente do seu conteúdo.
4. Ao aplicar a função len() em uma string vazia, o resultado será zero.
5. A função len() contabiliza todos os caracteres de uma string, inclusive os espaços em branco.
6. Se uma string contiver caracteres especiais, como acentos ou símbolos, a função len() irá contá-los normalmente.
7. Se uma string possuir caracteres de escape, como \n ou \t, a função len() irá contabilizá-los como apenas um caractere.
8. A função len() não distingue entre letras maiúsculas e minúsculas, contabilizando-as da mesma forma.
9. A função len() não altera a string original ao ser aplicada, apenas retorna o seu comprimento.
10. Ao utilizar a função len() em uma string cujo comprimento seja muito grande, o tempo de execução pode ser afetado.

8. Subtópico:
8. Comparação entre strings: operadores ==, !=, <, >, <=, >= 
Assertivas:
1. O operador "==" compara duas strings e retorna verdadeiro se forem exatamente iguais, caso contrário, retorna falso.
2. O operador "!=" compara duas strings e retorna verdadeiro se forem diferentes, caso contrário, retorna falso.
3. O operador "<" compara duas strings lexicograficamente e retorna verdadeiro se a primeira for menor que a segunda, caso contrário, retorna falso.
4. O operador ">" compara duas strings lexicograficamente e retorna verdadeiro se a primeira for maior que a segunda, caso contrário, retorna falso.
5. O operador "<=" compara duas strings lexicograficamente e retorna verdadeiro se a primeira for menor ou igual à segunda, caso contrário, retorna falso.
6. O operador ">=" compara duas strings lexicograficamente e retorna verdadeiro se a primeira for maior ou igual à segunda, caso contrário, retorna falso.
7. As comparações entre strings são realizadas de acordo com a tabela ASCII.
8. A comparação entre strings é sensível a maiúsculas e minúsculas.
9. Quando comparadas, strings vazias são consideradas iguais.
10. A ordem lexicográfica das strings é determinada caractere por caractere, onde os caracteres são comparados de acordo com seus valores numéricos na tabela ASCII.

9. Subtópico:
9. Conversão entre tipos diferentes usando str(), int() e float()
Assertivas:
1. A função str() é utilizada para converter um valor em formato texto para uma string.
2. A função int() permite a conversão de um valor para um número inteiro.
3. O método float() é utilizado para converter um valor para um número de ponto flutuante.
4. A conversão de um número inteiro para string utilizando str() resulta em uma string contendo o valor numérico.
5. Ao converter uma string contendo um número inteiro para int() é possível obter o valor numérico correspondente.
6. A conversão de um número de ponto flutuante para string utilizando str() resulta em uma string contendo o valor numérico.
7. Ao converter uma string contendo um número de ponto flutuante para float() é possível obter o valor numérico correspondente.
8. A função int() não arredonda o número float durante a conversão, ele simplesmente remove a parte decimal.
9. A função float() é utilizada para converter um número inteiro ou uma string numérica em um número de ponto flutuante.
10. A função str() não realiza alterações no valor original durante a conversão, apenas retorna uma representação textual do valor.

10. Subtópico:
10
Assertivas:
1. A Constituição Federal de 1988 é a atual Carta Magna do Brasil.
2. O Poder Executivo é exercido pelo Presidente da República, eleito por voto direto dos cidadãos.
3. O princípio da legalidade é um dos fundamentos do Estado Democrático de Direito.
4. O voto é obrigatório para os cidadãos maiores de 18 anos e menores de 70 anos.
5. O Brasil é um país laico, ou seja, não possui uma religião oficial estabelecida pelo Estado.
6. O Poder Judiciário tem o papel de garantir o cumprimento das leis e a justiça no país.
7. A Justiça Eleitoral é responsável pela organização e fiscalização das eleições no Brasil.
8. A polícia civil tem a função de investigar crimes, enquanto a polícia militar é responsável pela manutenção da ordem pública.
9. A Presidência da República é um cargo eletivo, com mandato de 4 anos, podendo ser reeleito por mais um período.
10. A organização dos Três Poderes (Executivo, Legislativo e Judiciário) é uma das bases do sistema de freios e contrapesos da democracia brasileira.


