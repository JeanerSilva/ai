Item do edital: 13. Java.    
 
1. Subtópico:
1. Sintaxe e Estrutura de Programação em Java
Assertivas:
1. A sintaxe do Java é estruturada, baseada em blocos de código delimitados por chaves {}.
2. A primeira instrução em um programa em Java é a declaração do pacote usando a palavra-chave "package".
3. Interfaces em Java são definidas pela palavra-chave "interface" e podem ser implementadas por classes utilizando a palavra-chave "implements".
4. A maioria das estruturas de controle em Java utiliza a sintaxe de parênteses, como no caso do "if", "for" e "while".
5. A palavra-chave "static" indica que um membro (variável ou método) pertence à classe, e não a uma instância específica dessa classe.
6. A palavra-chave "final" indica que uma variável, método ou classe é constante e não pode ser alterado.
7. Os arrays em Java são objetos que armazenam múltiplos valores de um mesmo tipo, e sua declaração necessita especificar o tamanho.
8. Em Java, herança é a relação entre classes onde uma classe filha herda características e comportamentos de uma classe mãe.
9. O modificador de acesso "public" permite que um membro (variável ou método) seja acessado de qualquer lugar.
10. A palavra-chave "this" é utilizada para referenciar o objeto atual dentro de uma classe.

2. Subtópico:
2. Orientação a Objetos em Java
Assertivas:
1) Em orientação a objetos, o conceito de encapsulamento busca proteger os atributos de uma classe, permitindo o acesso a eles somente por meio de métodos.
2) Em Java, a herança é uma técnica utilizada em orientação a objetos que permite que uma classe herde características e comportamentos de outra classe.
3) Polimorfismo é um conceito em orientação a objetos que permite que objetos de classes diferentes sejam tratados de maneira uniforme.
4) Em Java, interfaces são utilizadas para definir um contrato entre uma classe e outras que desejam implementá-la, estabelecendo métodos que devem ser implementados pelas classes que a utilizarem.
5) Um objeto em Java é uma instância de uma classe, podendo ter atributos e comportamentos definidos pela classe.
6) Em orientação a objetos, o conceito de reutilização de código é incentivado pela criação de classes e objetos que podem ser utilizados em diferentes partes de um programa.
7) O polimorfismo em Java permite que um objeto possa ser referenciado por diferentes tipos de variáveis, proporcionando flexibilidade e extensibilidade ao código.
8) Na orientação a objetos, o polimorfismo é um importante princípio que permite a criação de métodos genéricos que podem ser utilizados por diferentes objetos.
9) O conceito de herança em Java permite a criação de hierarquias de classes, em que uma classe pode herdar características e comportamentos de outra classe.
10) Em Java, construtores são métodos especiais utilizados para inicializar objetos de uma classe, podendo definir argumentos que devem ser passados durante a criação do objeto.

3. Subtópico:
3. Manipulação de Strings e Arrays em Java
Assertivas:
1. A classe String em Java é imutável, ou seja, não é possível alterar seu conteúdo após a criação.
2. O método length() em Java retorna a quantidade de caracteres em uma string.
3. O método substring() em Java permite extrair uma parte específica de uma string.
4. O método concat() em Java concatena duas strings, retornando uma nova string com a junção dos dois valores.
5. O método split() em Java permite dividir uma string em um array de substrings, utilizando um caracter delimitador.
6. O operador "+" em Java pode ser utilizado para concatenar strings.
7. A classe StringBuilder em Java é uma alternativa para manipulação eficiente de strings mutáveis.
8. O método toCharArray() em Java converte uma string em um array de caracteres.
9. O método indexOf() em Java retorna a posição da primeira ocorrência de um caracter em uma string.
10. O método replace() em Java substitui todas as ocorrências de um caracter por outro em uma string.

4. Subtópico:
4. Tratamento de Exceções e Assertions em Java
Assertivas:
1. O tratamento de exceções em Java é utilizado para lidar com situações de erro que podem ocorrer durante a execução de um programa.
2. As exceções podem ser divididas em duas categorias: exceções verificadas (checked exceptions) e exceções não verificadas (unchecked exceptions).
3. Para tratar uma exceção, é possível utilizar as cláusulas try-catch-finally.
4. A cláusula try define um bloco de código onde exceções podem ocorrer.
5. A cláusula catch captura uma exceção específica e define o tratamento a ser realizado.
6. A cláusula finally é opcional e é utilizada para definir um bloco de código que sempre será executado, independentemente de ter ocorrido uma exceção ou não.
7. É possível lançar uma exceção utilizando a palavra-chave throw.
8. O tratamento de exceções em Java utiliza o conceito de pilha de chamadas (stack trace), que indica o histórico de chamadas de métodos até o ponto onde ocorreu a exceção.
9. As assertions em Java são utilizadas para verificar condições que devem ser sempre verdadeiras durante a execução de um programa.
10. As assertions permitem identificar erros lógicos e evitar que o programa continue a execução em um estado inconsistente.

5. Subtópico:
5. Coleções, Generics e Expressões Lambda em Java
Assertivas:
1. Em Java, as coleções são estruturas de dados que permitem armazenar e manipular grupos de elementos de forma eficiente.
2. As coleções em Java podem ser implementadas por meio de interfaces, como List, Set e Map.
3. Os Generics em Java permitem especificar o tipo de dados que uma coleção pode armazenar, proporcionando maior segurança e facilidade na manipulação dos elementos.
4. O uso de Generics em coleções em Java permite evitar problemas de compilação relacionados à tipagem dos dados.
5. As expressões lambda em Java são recursos introduzidos a partir do Java 8 que permitem escrever funções anônimas de forma mais concisa e expressiva.
6. As expressões lambda em Java podem ser utilizadas em conjunto com as coleções para realizar operações como filtrar, mapear e reduzir elementos.
7. As expressões lambda em Java são especialmente úteis para trabalhar com coleções de forma funcional, evitando a necessidade de escrever loops e condicionais.
8. As coleções em Java podem ser facilmente combinadas com o uso de Generics para aproveitar os benefícios de ambos os recursos.
9. O uso de Generics em conjunto com as coleções em Java contribui para a escrita de código mais genérico e reutilizável.
10. Tanto as coleções, quanto os Generics e as expressões lambda são recursos fundamentais para o desenvolvimento de aplicações eficientes e de alta qualidade em Java.

6. Subtópico:
6. Concorrência e Multithreading em Java 
Assertivas:
1. Em Java, é possível criar threads para executar múltiplas tarefas simultaneamente.
2. A concorrência em Java pode ser alcançada utilizando a classe Thread ou implementando a interface Runnable.
3. Em Java, a sincronização de threads pode ser feita utilizando as palavras-chave synchronized e lock.
4. O conceito de deadlock pode ocorrer em programas multithread em Java, quando duas ou mais threads ficam bloqueadas e aguardando uma a outra.
5. O uso de semáforos é uma forma de controlar a concorrência entre as threads em Java.
6. Em Java, as threads compartilham a mesma memória e podem acessar as mesmas variáveis, o que pode levar a problemas de leitura e escrita concorrentes se não forem devidamente tratados.
7. O  método sleep() é uma forma de pausar uma thread em Java por um determinado período de tempo.
8. O método join() permite que uma thread aguarde a finalização de outra thread antes de continuar sua execução.
9. Threads em Java podem ser criadas de forma anônima, diretamente dentro de um método.
10. O operador volatile pode ser utilizado em variáveis compartilhadas entre threads para garantir que as alterações sejam sempre visíveis a todas as threads.

7. Subtópico:
7. Entrada/Saída (I/O), Networking e Serialização em Java 
Assertivas:
1. Em Java, a entrada de dados pode ser realizada utilizando a classe Scanner.
2. A saída de dados em Java pode ser realizada através da utilização da classe System.out.
3. Em Java, a serialização é o processo de converter um objeto em uma sequência de bytes, permitindo sua gravação em um arquivo ou transferência em rede.
4. A serialização em Java é implementada através das interfaces Serializable e Externalizable.
5. A desserialização é o processo oposto à serialização, onde o objeto é reconstruído a partir da sequência de bytes.
6. Em Java, a desserialização é realizada utilizando a interface Serializable.
7. O Java IO (Input/Output) fornece mecanismos para leitura e gravação de dados, seja em dispositivos de armazenamento, arquivos ou rede.
8. A classe Socket é utilizada para a comunicação em rede em Java, permitindo a conexão e troca de dados entre clientes e servidores.
9. A classe ServerSocket é utilizada para criar um servidor de rede em Java, que pode aguardar e atender requisições de múltiplos clientes.
10. A classe ObjectOutputStream é utilizada para serializar objetos em Java e escrevê-los em streams de saída.

8. Subtópico:
8. Padrões de Projeto (Design Patterns) aplicados ao Java 
Assertivas:
1. O Design Pattern Singleton é utilizado em Java para garantir que uma classe tenha apenas uma instância e forneça um ponto de acesso global a essa instância.
2. O Design Pattern Observer é aplicado em Java para estabelecer uma relação de dependência um-para-muitos entre objetos, de modo que quando um objeto muda de estado, todos os seus dependentes sejam notificados e atualizados automaticamente.
3. O Design Pattern Factory Method é utilizado em Java para definir uma interface para criar objetos, mas permite que as subclasses decidam qual classe concreta criar.
4. O Design Pattern Builder é aplicado em Java para separar a construção de um objeto complexo de sua representação, de modo que o mesmo processo de construção possa criar diferentes representações.
5. O Design Pattern Adapter é utilizado em Java para permitir que duas classes com interfaces incompatíveis trabalhem em conjunto. 
6. O Design Pattern Decorator é aplicado em Java para adicionar funcionalidade a um objeto dinamicamente, envolvendo-o em um objeto de uma classe complementar.
7. O Design Pattern Proxy é utilizado em Java para fornecer um substituto ou placeholder para um objeto para controlar o acesso a ele.
8. O Design Pattern Strategy é aplicado em Java para definir uma família de algoritmos, encapsulá-los e torná-los intercambiáveis, de modo que cada um possa variar independentemente do cliente que os utiliza.
9. O Design Pattern Command é utilizado em Java para encapsular uma solicitação como um objeto, permitindo que você parametrize os clientes com diferentes solicitações, enfileira ou registre as solicitações e suporte operações desfazer.
10. O Design Pattern Template Method é aplicado em Java para definir a estrutura de um algoritmo, deixando alguns passos para as subclasses implementarem.

9. Subtópico:
9. Desenvolvimento Web com Servlets, JSPs, JSF no ambiente do java.
Assertivas:
1. Os Servlets no desenvolvimento web com Java utilizam a API Servlet para processar e responder a solicitações do cliente.
2. JSPs, JavaServer Pages, são arquivos que misturam código HTML com elementos Java, utilizados para a criação dinâmica de páginas web.
3. O JSF, JavaServer Faces, é um framework Java utilizado para a construção de interfaces de usuário baseadas em componentes.
4. O ambiente do Java é amplamente utilizado para o desenvolvimento de aplicações web, garantindo segurança e escalabilidade.
5. O Servlet Container, como o Apache Tomcat, é responsável por executar os Servlets e gerenciar solicitações e respostas HTTP.
6. Os JSPs oferecem a possibilidade de reutilização de código Java e componentes já prontos em uma página web.
7. O JSF simplifica o relacionamento entre a camada de apresentação e a camada de negócio em uma aplicação web.
8. Com o Servlets, é possível criar aplicações web dinâmicas que respondem a eventos e interagem com o usuário.
9. JSPs e JSF são tecnologias que permitem a separação lógica entre o código Java e a marcação HTML, facilitando a manutenção do código.
10. O desenvolvimento web com Servlets, JSPs e JSF no ambiente Java oferece uma gama de recursos avançados para criação de interfaces de usuário interativas e aplicativos web robustos.

10. Subtópico:
10.Java Persistence API (JPA) para persistência de dados
Assertivas:
1) A JPA é uma API de persistência de dados em Java, que permite o mapeamento de objetos para registros em um banco de dados relacional.
2) A JPA é uma especificação da plataforma Java EE para estabelecer um padrão de persistência de objetos em bancos de dados.
3) O uso da JPA simplifica o acesso e manipulação de dados em aplicações Java, reduzindo a quantidade de código necessário.
4) A JPA oferece suporte a operações de leitura, gravação, atualização e exclusão de dados de forma transparente ao desenvolvedor.
5) A JPA utiliza o conceito de ORM (Mapeamento Objeto-Relacional), facilitando a persistência de objetos em bancos de dados relacionais.
6) A JPA permite o uso de anotações para descrever o mapeamento entre classes de domínio e tabelas do banco de dados.
7) A JPA utiliza consultas em linguagem JPQL (Java Persistence Query Language) para recuperar dados armazenados no banco de dados.
8) A JPA oferece suporte a cache de entidades, melhorando a performance de consultas frequentes.
9) A JPA permite a criação de relacionamentos entre entidades, como associações um-para-um, um-para-muitos e muitos-para-muitos.
10) A JPA é independente de fornecedores de banco de dados, permitindo a portabilidade de aplicações entre diferentes SGBDs.


