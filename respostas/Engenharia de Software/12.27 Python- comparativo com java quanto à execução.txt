Item do edital: 12.27 Python- comparativo com java quanto à execução   
 
1. Subtópico:
1. Conceitos básicos de Python e Java.
Assertivas:
1. Python e Java são linguagens de programação amplamente utilizadas no desenvolvimento de software.
2. Em Python, a indentação correta é fundamental para definir blocos de código, enquanto em Java, a indentação não tem impacto direto na execução.
3. Python é uma linguagem interpretada, enquanto Java é uma linguagem compilada.
4. Python possui uma sintaxe simples e legível, o que facilita o aprendizado e a compreensão do código, enquanto Java possui uma sintaxe mais rigorosa.
5. Em Python, não há a necessidade de declarar explicitamente o tipo das variáveis, enquanto em Java é necessário declarar o tipo de cada variável.
6. Python é frequentemente utilizado no desenvolvimento de aplicações web e científicas, enquanto Java é utilizado em aplicações empresariais e em dispositivos móveis.
7. Python possui uma vasta biblioteca padrão que oferece diversos módulos e pacotes para facilitar o desenvolvimento de projetos, enquanto Java possui sua própria API com uma ampla gama de bibliotecas.
8. Em Python, é possível utilizar listas, tuplas e dicionários para armazenar e manipular conjuntos de dados, enquanto em Java é necessário fazer uso de arrays e coleções.
9. Python facilita a implementação de programas orientados a objetos, pois permite herança múltipla, enquanto em Java a herança é simples, com apenas uma superclasse direta.
10. Tanto Python quanto Java possuem suporte para programação concorrente e paralela, mas com conceitos diferentes: em Python, é comum utilizar a biblioteca "threading", enquanto em Java a concorrência é tratada de maneira nativa através das "threads" e "locks".

2. Subtópico:
2. Comparação entre a sintaxe de Python e Java.
Assertivas:
1. Em Python, a indentação é obrigatória e define a estrutura do código, enquanto em Java, as chaves são utilizadas para delimitar blocos de código.
2. Python é uma linguagem interpretada, enquanto Java é uma linguagem compilada.
3. Java segue uma abordagem de tipagem estática, obrigando o programador a declarar explicitamente o tipo das variáveis, enquanto Python adota uma abordagem de tipagem dinâmica.
4. Em Java, todos os métodos devem estar contidos em classes, enquanto em Python é possível criar funções independentes de classes.
5. A sintaxe de Python é conhecida por sua simplicidade e legibilidade, tornando mais fácil para os iniciantes aprenderem programação, ao contrário de Java, que possui uma sintaxe mais complexa.
6. Python não requer o uso de ponto-e-vírgula para finalizar comandos, enquanto em Java, o ponto-e-vírgula é obrigatório no final de cada instrução.
7. Python possui um garbage collector que cuida automaticamente do gerenciamento de memória, enquanto em Java é necessário que o programador alocar e liberar a memória manualmente.
8. Em Python, tudo é um objeto e possui métodos associados, enquanto em Java, apenas os objetos de classes têm métodos associados.
9. Observa-se uma diferença em relação ao tratamento de exceções: em Python, o tratamento de exceções é feito através do uso de blocos try-except, enquanto em Java, é utilizado o bloco try-catch-finally.
10. Python é frequentemente utilizado para a criação de scripts e programas de automação, enquanto Java é amplamente utilizado para o desenvolvimento de aplicativos empresariais e sistemas de grande escala.

3. Subtópico:
3. Diferenças na execução de códigos em Python e Java.
Assertivas:
1. A execução de códigos em Python é interpretada, enquanto em Java é compilada.
2. Python é uma linguagem de programação de alto nível, enquanto Java é uma linguagem de programação de médio nível.
3. A sintaxe de Python é mais simples e intuitiva em comparação com a sintaxe de Java.
4. Python é uma linguagem orientada a objetos, assim como Java.
5. Java é conhecida por sua portabilidade, permitindo que os programas escritos em Java sejam executados em diferentes sistemas operacionais.
6. Python é mais adequado para projetos de desenvolvimento ágil devido à sua natureza flexível e dinâmica.
7. Python oferece suporte a tipagem dinâmica, enquanto Java tem tipagem estática.
8. Python possui uma vasta biblioteca padrão, facilitando o desenvolvimento de programas complexos.
9. Java é amplamente utilizado na indústria devido à sua robustez e capacidade de lidar com grandes projetos.
10. A principal diferença na execução de códigos Python e Java está na forma como cada linguagem lida com a alocação e gerenciamento de memória.

4. Subtópico:
4. Eficiência da execução em Python versus Java.
Assertivas:
1. A eficiência da execução em Python é influenciada pelo uso de interpretação em tempo de execução, o que pode resultar em um desempenho inferior ao Java em determinados cenários.
2. Java, por ser uma linguagem compilada, tende a apresentar um desempenho mais rápido na execução em comparação ao Python.
3. Python é conhecido por sua facilidade de leitura e escrita de código, o que pode compensar qualquer diferença de desempenho em comparação ao Java.
4. Em certos casos, a escolha entre Python e Java dependerá das necessidades específicas do projeto, levando em consideração a eficiência da execução.
5. Python é frequentemente utilizado para desenvolvimento de aplicações web e científicas, enquanto o Java é amplamente utilizado para desenvolvimento de aplicativos empresariais e móveis.
6. A eficiência da execução em Python pode ser melhorada através do uso de bibliotecas externas escritas em linguagens de mais baixo nível, como C ou C++, por meio de extensões externas.
7. A compilação just-in-time (JIT) em Java pode resultar em desempenho superior em relação ao Python, especialmente em aplicações que requerem processamento intensivo.
8. Python é reconhecido por sua facilidade de prototipação devido à sua sintaxe simples, enquanto Java permite uma estruturação mais rígida do código.
9. O uso de bibliotecas otimizadas em Python, como NumPy e pandas, pode resultar em um desempenho mais próximo do Java em operações matemáticas complexas.
10. Em resumo, a eficiência da execução em Python versus Java varia dependendo do contexto do projeto, das características da linguagem e das otimizações implementadas.

5. Subtópico:
5. Gerenciamento de memória em Python e Java.
Assertivas:
1. No gerenciamento de memória em Python, o garbage collector é responsável por liberar a memória ocupada por objetos não referenciados.
2. No gerenciamento de memória em Java, o garbage collector também é utilizado para liberar a memória ocupada por objetos não referenciados.
3. Tanto Python quanto Java utilizam alocação e desalocação automática de memória para objetos.
4. Em Python, a memória é alocada de forma dinâmica para objetos, permitindo que eles cresçam ou diminuam conforme necessário.
5. Em Java, a memória é alocada de maneira estática para objetos, com tamanho fixo determinado durante a compilação.
6. Em Python, a memória não utilizada é liberada automaticamente pelo garbage collector, sem necessidade de intervenção do desenvolvedor.
7. Em Java, a memória liberada pelo garbage collector pode ser reutilizada para a alocação de novos objetos.
8. As linguagens Python e Java possuem mecanismos de gerenciamento de memória que evitam problemas como vazamentos de memória.
9. O gerenciamento de memória em Python e Java é essencial para evitar problemas de falta de recursos em programas de longa execução.
10. Tanto Python quanto Java oferecem mecanismos para garantir um gerenciamento eficiente da memória, permitindo a otimização do consumo de recursos do sistema.

6. Subtópico:
6. Tratamento de erros e exceções em ambos os idiomas.
Assertivas:
1) No tratamento de erros e exceções em ambos os idiomas, é possível utilizar blocos de código para capturar e tratar erros específicos.
2) Tanto em Java quanto em Python, é fundamental utilizar mecanismos de tratamento de erros para garantir a robustez e o bom funcionamento dos programas.
3) Em ambos os idiomas, é possível lançar exceções manualmente por meio da palavra-chave "throw".
4) Em Java, é obrigatório tratar exceções verificadas utilizando os blocos "try-catch" ou declarando-as na assinatura do método.
5) Em Python, é possível capturar e tratar exceções específicas utilizando blocos "try-except" e fornecendo tratamentos diferenciados para cada tipo de exceção.
6) Tanto em Java quanto em Python, é possível utilizar a cláusula "finally" para garantir que um bloco de código seja sempre executado, mesmo após a ocorrência de exceções.
7) Em ambos os idiomas, é possível criar e utilizar classes personalizadas para representar exceções específicas do domínio do problema.
8) Em Java, é possível utilizar a palavra-chave "throws" para propagar exceções verificadas para chamadores de um método.
9) Em Python, é possível utilizar a estrutura "with" para lidar com exceções e recursos que precisam ser fechados após o uso, como arquivos.
10) Tanto em Java quanto em Python, é possível implementar hierarquias de exceções, onde classes de exceção mais específicas herdam comportamentos de classes de exceção mais genéricas.

7. Subtópico:
7. Comparação das bibliotecas padrão do Python com as do Java.
Assertivas:
1. As bibliotecas padrão do Python são mais abrangentes e oferecem uma vasta gama de funcionalidades em comparação com as do Java.
2. Python possui uma biblioteca padrão mais intuitiva e de fácil utilização, o que facilita o desenvolvimento de aplicações.
3. Java oferece uma biblioteca padrão robusta, porém requer conhecimentos mais avançados para utilizar todas as funcionalidades disponíveis.
4. Python possui uma biblioteca padrão mais adequada para tarefas de análise de dados e processamento de informações.
5. Java tem uma biblioteca padrão mais voltada para o desenvolvimento de aplicações corporativas e sistemas em larga escala.
6. A biblioteca padrão do Python conta com módulos para suporte à manipulação de arquivos, expressões regulares, acesso à Internet e redes, tornando-a vantajosa em aspectos de desenvolvimento web.
7. Python fornece uma biblioteca padrão mais amigável para lidar com operações matemáticas e científicas, oferecendo maior facilidade de implementação de algoritmos complexos.
8. Java possui uma biblioteca padrão mais amplamente adotada pela indústria, o que garante uma maior comunidade de suporte e uma vasta gama de recursos disponíveis.
9. A biblioteca padrão do Python conta com módulos para manipulação de strings, tarefas de processamento de texto e operações de data e hora, tornando-a vantajosa em aspectos relacionados a manipulação de dados estruturados.
10. Java oferece uma biblioteca padrão mais orientada a objetos, o que a torna ideal para a construção de sistemas escaláveis e de alta performance.

8. Subtópico:
8. Multithreading: diferenças entre a implementação no Python e no Java.
Assertivas:
1. A implementação de multithreading em Python e Java permite a execução simultânea de várias thread em um mesmo programa.
2. No Python, o módulo padrão `threading` é utilizado para criar e gerenciar threads, enquanto no Java utiliza-se a classe `Thread` da biblioteca Java.
3. No Python, é possível utilizar a abordagem de multithreading para melhorar a eficiência em programas que possuam muitas tarefas de I/O, como leitura e escrita em arquivos e acessos à rede.
4. Em Java, a biblioteca `java.util.concurrent` oferece diversas classes e estruturas de dados específicas para facilitar a programação em multithreading.
5. Em Python, o Global Interpreter Lock (GIL) limita a execução simultânea de threads em programas que possuam uma única thread de CPU, o que pode afetar o desempenho em cenários específicos.
6. Em Java, não há a mesma limitação do GIL presente no Python, permitindo uma melhor escalabilidade em programas que utilizem múltiplas threads de CPU.
7. Em Python, é possível utilizar a biblioteca `multiprocessing` para realizar o processamento paralelo, que utiliza múltiplos processos em vez de threads para executar tarefas simultaneamente.
8. No Python, o Gerenciador de Contexto `ThreadPoolExecutor` da biblioteca `concurrent.futures` fornece uma maneira mais eficiente de gerenciar e reutilizar threads.
9. Em Java, é possível utilizar a palavra-chave `synchronized` para garantir a exclusão mútua e sincronização de acesso a recursos compartilhados entre threads.
10. Em Python, é possível utilizar mecanismos como semáforos, mutex e locks para controlar o acesso concorrente a recursos compartilhados entre threads.

9. Subtópico:
9. Orientação a objetos: comparação entre as abordagens do Python e do Java
Assertivas:
1. Na abordagem de orientação a objetos em Python, não é necessário declarar explicitamente o tipo de uma variável, enquanto em Java, a declaração do tipo é obrigatória.
2. Tanto Python quanto Java permitem a criação de classes e objetos como parte de suas abordagens de orientação a objetos.
3. Em Python, é possível alterar dinamicamente os atributos de um objeto já criado, enquanto em Java, os atributos são definidos em tempo de compilação e não podem ser modificados.
4. Em ambas as abordagens, Python e Java, os objetos são criados a partir de classes que servem como templates.
5. Tanto Python quanto Java suportam herança de classes, permitindo a criação de subclasses para reutilização de código.
6. Em Python, as classes podem ter múltiplas heranças (herança múltipla), enquanto em Java, é permitida apenas uma herança direta.
7. Python oferece suporte nativo à sobrecarga de operadores, permitindo que os objetos interajam de forma intuitiva, enquanto Java não oferece esse recurso.
8. Em Java, todas as classes devem ser colocadas em arquivos separados com o mesmo nome da classe, enquanto Python permite a definição de várias classes no mesmo arquivo.
9. Python possui métodos especiais, conhecidos como métodos mágicos, que permitem a personalização do comportamento dos objetos, enquanto Java não possui essa funcionalidade.
10. Em Python, a passagem de parâmetros para métodos de objeto é feita automaticamente, enquanto em Java, é necessário fornecer explicitamente uma referência ao objeto ao chamar o método.

10. Subtópico:
10. Portabilidade dos códigos
Assertivas:
1. A portabilidade de códigos refere-se à capacidade de um software ser executado em diferentes plataformas sem a necessidade de modificações significativas.
2. A portabilidade de códigos é uma característica desejável em programas de computador, pois permite que sejam usados em diferentes sistemas operacionais.
3. A linguagem de programação Java é conhecida por sua portabilidade, pois os programas escritos nessa linguagem podem ser executados em diferentes ambientes sem alterações.
4. A portabilidade de códigos implica em não depender de recursos específicos de um sistema ou plataforma para funcionar corretamente.
5. A portabilidade de códigos facilita a distribuição e a instalação de programas, pois não é necessário adaptá-los para diferentes sistemas.
6. A adoção de padrões e boas práticas de codificação contribui para a portabilidade de códigos, pois reduz as dependências específicas de uma determinada plataforma.
7. A tecnologia de virtualização ajuda a alcançar a portabilidade de códigos ao permitir a execução de programas em ambientes virtuais que simulam diferentes sistemas operacionais.
8. A portabilidade de códigos pode ser comprometida quando são utilizadas bibliotecas ou componentes de terceiros específicos para uma plataforma.
9. A depender do grau de complexidade e dependência de recursos específicos, a adaptação de um programa para diferentes plataformas pode exigir um grande esforço de desenvolvimento.
10. A portabilidade de códigos contribui para a interoperabilidade entre sistemas, permitindo a troca de informações e a integração de diferentes aplicações.


