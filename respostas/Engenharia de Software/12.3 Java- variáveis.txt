Item do edital: 12.3 Java- variáveis   
 
1. Subtópico:
1. Definição e tipos de variáveis em Java
Assertivas:
1. Em Java, uma variável é um espaço de armazenamento que pode conter um valor que pode ser alterado durante a execução do programa.
2. Existem diferentes tipos de variáveis em Java, incluindo variáveis primitivas e variáveis de referência.
3. As variáveis primitivas em Java são: int, char, boolean, byte, short, long, float e double.
4. As variáveis de referência em Java são usadas para armazenar endereços de objetos e incluem tipos como String, arrays e classes definidas pelo programador.
5. As variáveis primitivas em Java são armazenadas diretamente na memória, enquanto as variáveis de referência armazenam o endereço do objeto real na memória.
6. As variáveis em Java devem ser declaradas com um tipo específico antes de serem usadas.
7. Uma vez declarada, uma variável pode ser inicializada com um valor imediatamente ou pode ser atribuída posteriormente.
8. As variáveis em Java têm escopo, o que significa que elas só são visíveis dentro do bloco de código onde foram declaradas.
9. Em Java, é possível reutilizar o nome de uma variável em diferentes escopos, o que é conhecido como sombreamento.
10. As variáveis em Java devem ter um nome válido, que começa com uma letra, seguida de letras, dígitos ou sublinhados, e não podem ser uma palavra-chave reservada da linguagem.

2. Subtópico:
2. Declaração e inicialização de variáveis
Assertivas:
1. A declaração de variáveis é uma etapa fundamental para o correto funcionamento dos programas de computador.
2. Na linguagem de programação C, a declaração de variáveis pode ser feita no início do código ou no momento em que são necessárias.
3. Na linguagem de programação Python, não é necessário declarar explicitamente o tipo das variáveis antes de utilizá-las.
4. A inicialização de variáveis é o processo de atribuir um valor inicial às variáveis no momento de sua criação.
5. A falta de inicialização de variáveis pode levar a comportamentos não determinísticos e erros na execução do programa.
6. Em linguagens de programação como C e C++, é uma boa prática inicializar todas as variáveis antes de utilizá-las.
7. Algumas linguagens de programação fornecem valores padrão para as variáveis não inicializadas, como 0 para variáveis numéricas.
8. Em Python, é possível atribuir um valor inicial às variáveis na própria declaração, utilizando o operador de atribuição (=).
9. É importante declarar e inicializar variáveis com nomes significativos, que retratem a informação que elas irão armazenar.
10. A declaração e inicialização correta de variáveis contribui para a legibilidade e manutenibilidade do código.

3. Subtópico:
3. Variáveis primitivas versus objetos
Assertivas:
1. As variáveis primitivas são armazenadas em um local fixo da memória, enquanto os objetos são armazenados em regiões dinâmicas da memória.
2. As variáveis primitivas são copiadas por valor, ou seja, quando atribuídas a outra variável, uma cópia é feita. Já os objetos são copiados por referência, ou seja, um novo ponteiro é criado apontando para o mesmo objeto.
3. Variáveis primitivas possuem um tamanho fixo em memória, que é determinado pela sua própria definição (por exemplo, um inteiro ocupa 4 bytes). Já os objetos possuem um tamanho variável, dependendo dos atributos que possuem.
4. Variáveis primitivas são criadas e manipuladas de forma mais eficiente em relação aos objetos, pois exigem menos recursos do sistema.
5. As variáveis primitivas possuem valores padrão definidos pelo tipo de dado, como zero para inteiros e false para booleanos. Já os objetos, por padrão, possuem o valor null, indicando que não referenciam nenhum objeto.
6. As variáveis primitivas são simples e representam valores básicos, como números inteiros, números de ponto flutuante e caracteres. Os objetos, por sua vez, são complexos e podem conter atributos e métodos.
7. As variáveis primitivas são imutáveis, ou seja, seu valor não pode ser alterado após a sua atribuição inicial. Já os objetos podem ser alterados através da manipulação de seus atributos.
8. Variáveis primitivas podem ser utilizadas para representar dados simples que não possuem comportamentos específicos. Objetos são utilizados para representar entidades mais complexas, com atributos e funções específicas.
9. As variáveis primitivas são armazenadas na stack, enquanto os objetos são armazenados no heap.
10. Variáveis primitivas possuem menor consumo de memória em comparação aos objetos, uma vez que estes últimos podem conter diversos atributos e métodos.

4. Subtópico:
4. Escopo e ciclo de vida das variáveis
Assertivas:
1. O escopo de uma variável determina onde a variável pode ser acessada dentro de um programa.
2. Variáveis têm um ciclo de vida que começa quando são declaradas e termina quando seu escopo é encerrado.
3. No ciclo de vida de uma variável, ela pode ser inicializada com um valor padrão ou um valor específico.
4. Variáveis globais têm um ciclo de vida durante toda a execução do programa.
5. Variáveis locais têm um ciclo de vida limitado ao escopo em que foram declaradas.
6. O ciclo de vida de uma variável termina quando o escopo em que foi declarada é encerrado.
7. O escopo de uma variável pode ser determinado pelo bloco de código em que foi declarada, como uma função ou um loop.
8. Variáveis de instância têm um ciclo de vida associado a uma instância específica de uma classe.
9. Variáveis estáticas têm um ciclo de vida que dura enquanto o programa estiver em execução, independentemente da criação de instâncias.
10. O escopo e o ciclo de vida das variáveis são fundamentais para a execução correta de um programa, evitando erros de acesso e referência.

5. Subtópico:
5. Conversão entre tipos de variáveis (casting)
Assertivas:
1. O casting é uma técnica utilizada para realizar a conversão entre diferentes tipos de variáveis em uma linguagem de programação.
2. O casting é necessário quando se deseja atribuir uma variável de um tipo a outra variável de um tipo diferente.
3. O casting pode resultar na perda de informações, caso a conversão não seja feita corretamente.
4. Em algumas linguagens de programação, é possível realizar o casting implícito quando a conversão entre tipos é feita automaticamente pelo compilador.
5. O casting explícito é aquele em que o programador especifica de forma clara a conversão de um tipo para outro.
6. Em algumas situações, a conversão de tipos envolvendo floating point pode resultar em arredondamentos ou truncamento.
7. O casting de uma variável de tipo numérico para um tipo inteiro pode descartar a parte decimal do valor original.
8. É possível realizar o casting de uma variável de tipo inteiro para um tipo floating point, adicionando uma parte decimal zero.
9. O casting pode ser utilizado para converter uma variável de um tipo mais amplo para um tipo mais específico.
10. O casting pode ser útil na manipulação de variáveis em diferentes escalas de representação numérica.

6. Subtópico:
6. Uso de constantes com a palavra-chave final
Assertivas:
1. O uso da palavra-chave "final" para declarar constantes indica que o valor atribuído a ela não pode ser alterado ao longo do programa. 

2. A declaração de uma constante utilizando a palavra-chave "final" deve ser seguida pelo tipo de dado da constante e pelo seu identificador. 

3. As constantes declaradas com a palavra-chave "final" devem ter seus identificadores em letras maiúsculas e separados por underscore. 

4. Ao declarar uma constante com a palavra-chave "final", é obrigatório atribuir um valor a ela na mesma linha de declaração. 

5. As constantes declaradas com a palavra-chave "final" podem ser usadas em qualquer parte do programa, garantindo que o valor atribuído a ela não será alterado. 

6. A utilização da palavra-chave "final" não é exclusiva para a declaração de constantes. Ela também pode ser usada para indicar que uma classe, método ou parâmetro não pode ser modificado ou extendido. 

7. É possível declarar múltiplas constantes utilizando a palavra-chave "final" em uma mesma linha, separando-as por vírgulas. 

8. Ao declarar uma constante utilizando a palavra-chave "final", não é possível alterar seu valor em nenhum momento do programa. 

9. A utilização de constantes com a palavra-chave "final" auxilia na legibilidade e manutenção do código, uma vez que indica que aquele valor é uma informação fixa. 

10. Ao utilizar uma constante com a palavra-chave "final" em um programa, o compilador realiza otimizações, uma vez que sabe que aquele valor é imutável.

7. Subtópico:
7. Variáveis estáticas e não estáticas 
Assertivas:
1. Variáveis estáticas são declaradas fora de qualquer método ou construtor em uma classe.
2. Variáveis estáticas pertencem à classe em si, e não a uma instância específica da classe.
3. Variáveis estáticas são compartilhadas por todas as instâncias da classe.
4. Variáveis estáticas podem ser acessadas diretamente pelo nome da classe, sem a necessidade de uma instância.
5. Variáveis não estáticas, também conhecidas como variáveis de instância, são acessíveis somente por meio de uma instância da classe.
6. Cada instância de uma classe possui sua própria cópia das variáveis não estáticas.
7. Variáveis estáticas podem ser acessadas mesmo sem a criação de uma instância da classe.
8. Variáveis estáticas são inicializadas apenas uma vez, quando a classe é carregada pelo ClassLoader.
9. Variáveis não estáticas são inicializadas quando uma nova instância da classe é criada.
10. Variáveis estáticas são úteis para armazenar valores constantes ou informações compartilhadas entre instâncias da classe.

8. Subtópico:
8. Regras para nomeação de variáveis em Java 
Assertivas:
1. Em Java, o nome de uma variável deve começar com uma letra ou com o símbolo de underline (_).
2. O tamanho do nome de uma variável em Java é limitado a 255 caracteres.
3. Em Java, é permitido utilizar letras, números e símbolos especiais, como $, para nomear variáveis.
4. Nomes de variáveis em Java são case-sensitive, ou seja, diferencia maiúsculas de minúsculas.
5. Não é permitido utilizar palavras reservadas da linguagem Java como nome de variável.
6. Em Java, uma variável não pode ter o mesmo nome que uma classe existente.
7. Nomes de variáveis em Java podem conter espaços em branco.
8. É permitido utilizar acentos e caracteres especiais, como ç e ã, para nomear variáveis em Java.
9. Em Java, o nome de uma variável não pode iniciar com um número.
10. Nomes de variáveis podem ser compostos por várias palavras, onde a primeira letra de cada palavra após a primeira seja maiúscula (camelCase).

9. Subtópico:
9. Operações matemáticas básicas com variáveis 
Assertivas:
1. Em operações aritméticas com variáveis, a ordem de resolução das operações deve ser seguida para se obter resultados corretos.
2. A adição de duas variáveis resulta em um novo valor, que é a soma dos valores das variáveis.
3. A subtração de uma variável por outra variável resulta em um novo valor, que é a diferença entre os valores das variáveis.
4. A multiplicação de duas variáveis resulta em um novo valor, que é o produto dos valores das variáveis.
5. A divisão de uma variável por outra variável resulta em um novo valor, que é o quociente entre os valores das variáveis.
6. A soma de uma variável com um número resulta em um novo valor, que é a adição do valor da variável com o número.
7. A subtração de um número por uma variável resulta em um novo valor, que é a diferença entre o número e o valor da variável.
8. A multiplicação de uma variável por um número resulta em um novo valor, que é o produto do valor da variável pelo número.
9. A divisão de uma variável por um número resulta em um novo valor, que é o quociente entre o valor da variável e o número.
10. Operações matemáticas com variáveis podem ser resolvidas utilizando as mesmas regras das operações com números.

10. Subtópico:
10. Manipulação de strings como objetos imutáveis
Assertivas:
1. A manipulação de strings como objetos imutáveis significa que elas não podem ser alteradas após sua criação.
2. A imutabilidade de strings permite maior segurança, evitando modificações indesejadas em programas.
3. Em linguagens de programação que tratam strings como objetos imutáveis, é necessário criar novas strings para efetuar alterações.
4. A imutabilidade de strings torna possível a implementação de operações de cópia rápida.
5. Manipular strings como objetos imutáveis permite ganhos de desempenho em cenários onde há compartilhamento de referências.
6. A imutabilidade de strings facilita a implementação de cache de strings, reduzindo a utilização de memória.
7. A manipulação de strings como objetos imutáveis torna o código mais simples e menos sujeito a erros.
8. Em linguagens que possuem strings imutáveis, os métodos de manipulação de strings costumam retornar uma nova string modificada.
9. A imutabilidade de strings é comumente utilizada em linguagens de programação como Java e Python.
10. A manipulação de strings como objetos imutáveis promove a transparência referencial, facilitando a compreensão do código por outros desenvolvedores.


