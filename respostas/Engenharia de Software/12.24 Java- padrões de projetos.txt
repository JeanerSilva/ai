Pergunta Original: 12.24 Java- padrões de projetos   
 
1. Subtópico:
1. Conceitos fundamentais de padrões de projeto em Java
Assertivas:
1. Padrões de projeto em Java são soluções reutilizáveis para problemas comuns encontrados no desenvolvimento de software.
2. O padrão de projeto Singleton em Java permite a criação de apenas uma instância de uma classe, garantindo o acesso global a essa instância.
3. O padrão de projeto Factory Method em Java é utilizado para criar objetos de uma hierarquia de classes, permitindo que a subclasse decida qual objeto criar.
4. O padrão de projeto Observer em Java define uma dependência de um para muitos entre objetos, de modo que quando um objeto muda de estado, todos os seus dependentes são notificados e atualizados automaticamente.
5. O padrão de projeto Strategy em Java permite a definição de uma família de algoritmos, encapsulando-os e tornando-os intercambiáveis. Isso permite que o algoritmo varie independentemente dos clientes que o utilizam.
6. O padrão de projeto Decorator em Java permite a adição de funcionalidades a um objeto de forma dinâmica, sem modificar sua estrutura original.
7. O padrão de projeto Builder em Java é utilizado para a construção de objetos complexos passo a passo, permitindo diferentes representações do mesmo processo de construção.
8. O padrão de projeto Template Method em Java define o esqueleto de um algoritmo em uma classe, permitindo que as subclasses substituam partes do algoritmo sem alterar sua estrutura.
9. O padrão de projeto Composite em Java permite tratar objetos individuais e composições de objetos de maneira uniforme, fornecendo uma estrutura de árvore.
10. O padrão de projeto Proxy em Java permite a criação de um objeto representante que controla o acesso a outro objeto, podendo adicionar funcionalidades extras, como a verificação de permissões.

2. Subtópico:
2. Padrões de criação: Singleton, Factory Method e Abstract Factory
Assertivas:
1. O padrão de criação Singleton permite que apenas uma única instância de uma classe seja criada em todo o sistema.
2. O padrão de criação Factory Method define uma interface para criar objetos, mas permite que as subclasses decidam qual classe concreta será instanciada.
3. O padrão de criação Abstract Factory fornece uma interface para criar famílias de objetos relacionados sem especificar suas classes concretas.
4. Um Singleton garante que somente uma instância de uma classe será criada, independentemente da quantidade de solicitações de criação.
5. O padrão Factory Method separa a criação de objetos de sua utilização, permitindo que as subclasses decidam qual classe concreta será instanciada.
6. O Abstract Factory possibilita a criação de famílias de objetos relacionados, garantindo que todas as classes concretas sejam compatíveis com a interface definida pela fábrica.
7. Singleton é um padrão de criação utilizado quando se deseja restringir a criação de instâncias de uma classe a apenas uma única ocorrência.
8. O Factory Method é um padrão de criação que permite que uma classe delegue a responsabilidade de criar objetos para suas subclasses.
9. Abstract Factory é um padrão de criação que abstrai a criação de objetos relacionados, fornecendo interfaces para suas famílias de classes.
10. O uso adequado dos padrões Singleton, Factory Method e Abstract Factory pode melhorar a flexibilidade e a manutenibilidade de um sistema através da separação de responsabilidades na criação de objetos.

3. Subtópico:
3. Padrões estruturais: Adapter, Decorator e Facade
Assertivas:
1. O padrão Adapter permite a comunicação entre interfaces incompatíveis, convertendo a interface de uma classe em outra interface esperada pelo cliente.

2. O padrão Decorator permite adicionar funcionalidades a um objeto de forma dinâmica, sem modificar sua estrutura interna.

3. O padrão Facade fornece uma interface simplificada para um conjunto de interfaces complexas, facilitando o uso e a compreensão do sistema pelo cliente.

4. O padrão Adapter é comumente utilizado em situações em que é necessário adaptar uma classe existente para se adequar a uma nova interface.

5. O padrão Decorator é útil quando é necessário adicionar comportamentos extras a um objeto em tempo de execução, sem afetar a estrutura do mesmo.

6. O padrão Facade é eficaz para simplificar o acesso a um sistema complexo, ocultando a complexidade interna e fornecendo uma maneira mais simples de interagir com o sistema.

7. O padrão Adapter pode ser implementado utilizando uma classe que implementa a nova interface e faz uso de um objeto da classe sendo adaptado.

8. O padrão Decorator segue o princípio da abertura/fechamento, pois permite adicionar comportamentos a um objeto sem modificá-lo.

9. O padrão Facade promove o baixo acoplamento entre o cliente e as classes internas do sistema, facilitando a manutenção e evolução do código.

10. Os padrões Adapter, Decorator e Facade são exemplos de padrões estruturais que proporcionam flexibilidade, reutilização de código e aderência aos princípios de design orientado a objetos.

4. Subtópico:
4. Padrões comportamentais: Observer, Strategy e Template Method
Assertivas:
1. O padrão de projeto Observer permite que objetos observadores sejam notificados automaticamente por um objeto sujeito de qualquer alteração de estado.
2. O padrão de projeto Strategy permite que algoritmos específicos sejam encapsulados em classes separadas, permitindo que eles sejam selecionados e substituídos dinamicamente durante a execução do programa.
3. O padrão de projeto Template Method define o esqueleto de um algoritmo em uma classe base e permite que as subclasses forneçam a implementação dos passos específicos desse algoritmo.
4. O padrão de projeto Observer é baseado em um acoplamento fraco entre o objeto sujeito e os objetos observadores, permitindo que eles possam variar independentemente um do outro.
5. O padrão de projeto Strategy permite que o comportamento de um objeto seja alterado durante a execução do programa sem a necessidade de modificar sua estrutura interna.
6. O padrão de projeto Template Method segue o princípio do "Hollywood Principle", onde classes base convidam subclasses a realizarem tarefas, mas evitam depender de suas implementações concretas.
7. O padrão de projeto Observer é amplamente utilizado em sistemas de eventos e interfaces gráficas, onde o objeto sujeito precisa notificar automaticamente os objetos observadores sobre alterações de estado.
8. O padrão de projeto Strategy permite que diferentes estratégias sejam usadas intercambiavelmente em um programa, sem a necessidade de modificar o código que as utiliza.
9. O padrão de projeto Template Method é utilizado quando muitas classes relacionadas compartilham uma estrutura comum de algoritmos, mas cada uma implementa esses algoritmos de maneiras diferentes.
10. O padrão de projeto Observer é implementado geralmente por meio de interfaces ou classes abstratas, permitindo um alto grau de flexibilidade e extensibilidade na definição dos objetos observadores.

5. Subtópico:
5. Aplicação prática dos padrões de projeto em Java
Assertivas:
1. A aplicação prática dos padrões de projeto em Java contribui para melhorar a legibilidade e a manutenibilidade do código.
2. Os padrões de projeto em Java são soluções comprovadas para problemas comuns enfrentados no desenvolvimento de software.
3. A aplicação correta dos padrões de projeto em Java facilita a reutilização de código e a escalabilidade de sistemas.
4. O conhecimento dos padrões de projeto em Java é fundamental para desenvolvedores que desejam criar soluções eficientes e robustas.
5. Os padrões de projeto em Java, como Singleton e Factory, podem ser aplicados para criar instâncias de objetos de forma segura e controlada. 
6. Ao utilizar padrões de projeto em Java, é possível separar responsabilidades e melhorar a coesão dos componentes de um sistema.
7. A aplicação prática dos padrões de projeto em Java permite a criação de interfaces mais flexíveis e adaptáveis às mudanças de requisitos.
8. Os padrões de projeto em Java, como MVC e Observer, auxiliam na separação de preocupações e no gerenciamento de eventos em sistemas complexos.
9. A utilização dos padrões de projeto em Java possibilita a implementação de arquiteturas modularizadas e facilmente testáveis.
10. Ao aplicar os padrões de projeto em Java, é possível reduzir a duplicação de código e melhorar a extensibilidade de um sistema.

6. Subtópico:
6. Benefícios e desvantagens do uso de padrões de projeto 
Assertivas:
1. O uso de padrões de projeto pode aumentar a reutilização de código, reduzindo assim o tempo necessário para desenvolvimento de novas funcionalidades.
2. Os padrões de projeto fornecem soluções testadas e comprovadas para problemas de projeto recorrentes, aumentando a qualidade do software desenvolvido.
3. A adoção de padrões de projeto pode melhorar a legibilidade e manutenibilidade do código, facilitando a compreensão e evolução do sistema.
4. Uma desvantagem do uso de padrões de projeto pode ser a complexidade adicional que eles podem introduzir no código, tornando-o mais difícil de entender e debugar.
5. A utilização indevida de padrões de projeto pode levar ao chamado "overengineering", ou seja, aplicar soluções complexas para problemas que não exigem tanta sofisticação.
6. Os padrões de projeto ajudam a promover a separação de responsabilidades e o princípio da coesão, facilitando a manutenção e extensibilidade do código.
7. Alguns padrões de projeto, como o Singleton, podem introduzir problemas de concorrência em sistemas multi-threaded.
8. Ao utilizar padrões de projeto, é importante considerar o contexto e requisitos específicos do projeto, pois nem sempre todos os padrões são adequados para todas as situações.
9. Padrões de projeto não devem ser considerados como uma bala de prata para resolver todos os problemas de design, mas sim como diretrizes que podem ser adaptadas de acordo com a necessidade.
10. É fundamental que os desenvolvedores tenham um bom entendimento dos padrões de projeto e consigam aplicá-los corretamente, evitando a criação de soluções complexas e pouco eficientes.

7. Subtópico:
7. Relação entre os padrões de projetos e a orientação a objetos 
Assertivas:
1. Os padrões de projetos são soluções reutilizáveis para problemas comuns em projetos de software.
2. A orientação a objetos é um paradigma de programação que se baseia na criação de objetos com propriedades e comportamentos.
3. Os padrões de projetos podem ser aplicados em projetos que utilizam a orientação a objetos.
4. Os padrões de projetos visam melhorar a flexibilidade, extensibilidade e manutenibilidade de um sistema.
5. A orientação a objetos proporciona a criação de classes e objetos, facilitando a reutilização de código e a organização estrutural do projeto.
6. Os padrões de projetos podem ser utilizados para resolver problemas de design complexos na aplicação de princípios da orientação a objetos.
7. A adoção dos padrões de projetos auxilia na redução de erros e facilita a comunicação entre desenvolvedores em um projeto.
8. A orientação a objetos fornece princípios como encapsulamento, herança e polimorfismo, que se relacionam diretamente com a aplicação dos padrões de projetos.
9. A utilização dos padrões de projetos não implica necessariamente em seguir as diretrizes da orientação a objetos.
10. A combinação dos padrões de projetos com os princípios da orientação a objetos resulta em sistemas mais robustos e de fácil manutenção.

8. Subtópico:
8. Uso dos padrões MVC (Model-View-Controller) em Java 
Assertivas:
1. O padrão MVC divide uma aplicação em três componentes principais: Model, View e Controller.
2. O Model é responsável pela manipulação dos dados e lógica de negócio.
3. A View é responsável pela interface com o usuário, apresentando os dados de maneira visual.
4. O Controller é responsável por receber as requisições do usuário e atuar como intermediário entre o Model e a View.
5. O uso do padrão MVC em Java promove uma melhor organização e modularidade do código.
6. O padrão MVC facilita a manutenção e escalabilidade de um sistema Java.
7. A separação de responsabilidades proporcionada pelo uso do padrão MVC em Java auxilia na reutilização de código.
8. O padrão MVC ajuda na criação de testes automatizados, proporcionando uma maior cobertura do código.
9. O uso correto do padrão MVC permite que alterações na interface do usuário não afetem a lógica de negócio.
10. O padrão MVC em Java é amplamente utilizado no desenvolvimento de aplicações web e desktop.

9. Subtópico:
9. Estudo detalhado do padrão Composite em Java 
Assertivas:
1. O padrão Composite em Java permite tratar objetos individuais e coleções de objetos de maneira uniforme.
2. O padrão Composite em Java utiliza uma estrutura hierárquica de classes para representar a composição de objetos.
3. No padrão Composite em Java, todas as classes devem implementar uma interface comum para garantir a uniformidade do tratamento dos objetos.
4. O padrão Composite em Java permite adicionar e remover objetos de uma estrutura composta de forma transparente para o cliente.
5. No padrão Composite em Java, os objetos folha representam os elementos da composição e os objetos compostos representam as estruturas hierárquicas.
6. O padrão Composite em Java permite que o cliente trate os objetos individuais e compostos de maneira polimórfica.
7. O padrão Composite em Java facilita a adição de novos tipos de objetos na estrutura composta, sem afetar sua interface ou estrutura existente.
8. O padrão Composite em Java pode ser utilizado para representar estruturas de dados arborescentes como árvores e grafos.
9. O padrão Composite em Java é especialmente útil quando se trabalha com estruturas recursivas e hierarquias que podem ser tratadas de forma uniforme.

10. Subtópico:
10. An
Assertivas:
1. An é uma linguagem de programação voltada para a manipulação e análise de dados.
2. An foi desenvolvida pela Google e lançada em 2018.
3. As principais características da linguagem An incluem eficiência, simplicidade e escalabilidade.
4. An oferece suporte a programação funcional e imperativa.
5. A sintaxe da linguagem An é inspirada em C++ e Python.
6. An é uma linguagem tipada estaticamente, o que proporciona maior segurança na detecção de erros.
7. An oferece uma ampla biblioteca padrão que inclui funções para manipulação de strings, listas e matrizes.
8. Uma das principais aplicações da linguagem An está na área de aprendizado de máquina e ciência de dados.
9. An é uma linguagem de código aberto, o que permite que os desenvolvedores contribuam para seu aprimoramento.
10. A popularidade da linguagem An tem crescido rapidamente, tornando-se uma opção atraente para profissionais de TI.


