Item do edital: 1.1 Arquitetura de sistemas web- protocolo HTTP   
 
1. Subtópico:
1.1.1 Conceitos básicos de protocolo HTTP
Assertivas:
1. O protocolo HTTP (Hypertext Transfer Protocol) é um protocolo utilizado para transferência de informações na internet.
2. O HTTP é um protocolo de aplicação da camada de aplicação do modelo OSI.
3. O HTTP utiliza o modelo cliente-servidor para a troca de informações entre os dispositivos.
4. O HTTP é baseado em requisições e respostas, onde o cliente envia a requisição e o servidor responde com os dados solicitados.
5. O HTTP utiliza o método GET para solicitar informações específicas de um recurso no servidor.
6. O HTTP utiliza o método POST para enviar dados a um servidor para processamento ou armazenamento.
7. O HTTP é um protocolo stateless, o que significa que cada requisição é independente e não guarda informações sobre as requisições anteriores.
8. O HTTP permite a comunicação entre diferentes tipos de dispositivos, como computadores, smartphones e tablets.
9. O HTTP utiliza a URI (Uniform Resource Identifier) para identificar o recurso a ser solicitado ou disponibilizado.
10. O HTTP utiliza o cabeçalho HTTP para incluir informações adicionais na requisição e na resposta, como tipo de contente, idioma e cache.

2. Subtópico:
1.1.2 Funcionamento do protocolo HTTP
Assertivas:
1) O protocolo HTTP é responsável pela comunicação entre cliente e servidor na web.
2) O HTTP utiliza o método de requisição-resposta para trocar informações.
3) O HTTP opera na camada de aplicação do modelo OSI.
4) O HTTP utiliza o TCP como protocolo de transporte.
5) O HTTP suporta a transferência de texto, imagens, vídeos e outros tipos de dados.
6) O HTTP utiliza URLs para identificar recursos na web.
7) O HTTP é um protocolo stateless, ou seja, não mantém informações de estado entre requisições.
8) O HTTP utiliza códigos de status para indicar o resultado da requisição.
9) O HTTP permite o uso de autenticação, permitindo a proteção de recursos sensíveis.
10) O HTTP utiliza o cabeçalho para enviar informações adicionais na requisição e na resposta.

3. Subtópico:
1.1.3 Métodos de requisição do protocolo HTTP
Assertivas:
1. O protocolo HTTP permite diferentes métodos de requisição, incluindo o GET, POST, PUT, DELETE, HEAD e OPTIONS.
2. O método GET é usado para solicitar um recurso específico através de sua URL.
3. O método POST é usado para enviar dados do cliente para o servidor e pode ser usado para criar novos recursos no servidor.
4. O método PUT é usado para atualizar um recurso existente no servidor.
5. O método DELETE é usado para remover um recurso específico do servidor.
6. O método HEAD é usado para solicitar apenas os metadados de um recurso, como o tamanho ou a data de modificação.
7. O método OPTIONS é usado para solicitar as opções de comunicação disponíveis em um recurso ou servidor.
8. O protocolo HTTP também oferece suporte a métodos menos comuns, como CONNECT, TRACE, PATCH, LINK e UNLINK.
9. Os métodos de requisição do HTTP são padronizados pela RFC 2616.
10. A escolha do método de requisição adequado depende da finalidade da requisição e das operações permitidas pelo servidor.

4. Subtópico:
1.1.4 Códigos de status do protocolo HTTP
Assertivas:
1) O código de status HTTP 200 indica que a requisição foi bem sucedida.
2) O código de status HTTP 404 indica que a página solicitada não foi encontrada.
3) O código de status HTTP 302 indica uma redireção temporária.
4) O código de status HTTP 403 indica que o acesso à página é proibido.
5) O código de status HTTP 500 indica um erro interno de servidor.
6) O código de status HTTP 301 indica uma redireção permanente.
7) O código de status HTTP 401 indica que é necessário autenticação para acessar a página.
8) O código de status HTTP 304 indica que a página não foi modificada desde a última requisição.
9) O código de status HTTP 201 indica que uma nova página foi criada com sucesso.
10) O código de status HTTP 503 indica que o servidor está temporariamente indisponível.

5. Subtópico:
1.1.5 Diferenças entre as versões do protocolo HTTP (HTTP 0,9,  0,10, 2 e 3)
Assertivas:
1. O protocolo HTTP 0.9 é a versão mais antiga do protocolo e suporta apenas o método GET para recuperar informações de um servidor.
2. A versão HTTP 1.0 foi lançada em 1996 e introduziu novos métodos, como POST e HEAD, além de suportar cabeçalhos e códigos de status.
3. O HTTP 1.1 é a versão mais amplamente utilizada atualmente e possui melhorias significativas, como a persistência de conexão e a compressão de dados.
4. A versão HTTP 1.1 também introduziu o uso de cache e permitiu a definição de conexões persistentes, reduzindo a sobrecarga de latência e melhorando o desempenho.
5. O HTTP/2 foi projetado para melhorar a eficiência do protocolo, introduzindo o uso de multiplexação de fluxo e compactação de cabeçalhos.
6. O HTTP/2 suporta o carregamento paralelo de recursos, reduzindo o tempo necessário para carregar uma página e melhorando a experiência do usuário.
7. O HTTP/2 é compatível com versões anteriores do protocolo e pode ser implementado em servidores que já suportam HTTP 1.1.
8. A versão HTTP/3 é a mais recente, sendo projetada para melhorar ainda mais a eficiência do protocolo por meio do uso do transporte QUIC.
9. O HTTP/3 utiliza a criptografia por padrão e é mais resistente a problemas de latência em comparação com o HTTP/2.
10. O HTTP/3 está sendo implementado gradualmente e ainda não é amplamente adotado, mas é considerado uma atualização significativa para o protocolo HTTP.

6. Subtópico:
1.1.6 Segurança no protocolo HTTP: HTTPS e SSL/TLS 
Assertivas:
1. O protocolo HTTPS é uma versão segura do HTTP que utiliza criptografia para garantir a confidencialidade dos dados trocados entre o cliente e o servidor.
2. O HTTPS utiliza certificados digitais para autenticar a identidade dos servidores e proteger contra ataques de phishing.
3. O SSL/TLS (Secure Sockets Layer/Transport Layer Security) é o protocolo utilizado pelo HTTPS para estabelecer conexões seguras.
4. O SSL/TLS utiliza algoritmos criptográficos para criptografar os dados transmitidos e garantir a integridade das informações.
5. A autenticação mútua é uma característica do SSL/TLS, onde tanto o cliente quanto o servidor são autenticados, garantindo a segurança do canal de comunicação.
6. Os certificados digitais utilizados no HTTPS e SSL/TLS são emitidos por autoridades de certificação confiáveis.
7. O HTTPS garante a confidencialidade dos dados através da criptografia, impedindo que terceiros não autorizados possam interceptar e entender as informações.
8. O SSL/TLS implementa mecanismos para prevenir ataques de man-in-the-middle, onde um atacante se posiciona entre o cliente e o servidor para interceptar e modificar as comunicações.
9. O uso do HTTPS é recomendado para proteger informações sensíveis, como dados pessoais, informações bancárias e senhas.
10. A adoção do HTTPS e SSL/TLS é uma prática essencial para garantir a segurança nas transações online e proteger a privacidade dos usuários.

7. Subtópico:
1.11 .7 Cookies e sessões em sistemas web via protocolo HTTP 
Assertivas:
1. A tecnologia de cookies permite que informações sejam armazenadas no cliente durante a navegacão em um sistema web via protocolo HTTP.
2. Os cookies são utilizados para personalizar a experiência dos usuários em um sistema web, lembrando suas preferências e informações de login.
3. As informações armazenadas em um cookie são enviadas através dos cabeçalhos HTTP entre o servidor e o cliente.
4. Os cookies têm um prazo de validade, determinado pelo servidor, e podem ser persistentes (permanecem armazenados no cliente mesmo após o navegador ser fechado) ou temporários (são apagados assim que o navegador é encerrado).
5. As sessões em sistemas web permitem que o servidor armazene informações relacionadas às interações do usuário, como dados de login e estado da aplicação.
6. As sessões são representadas por meio de um identificador único, geralmente um cookie, que é enviado entre o cliente e o servidor para identificar qual sessão está ativa.
7. As sessões oferecem uma forma segura de armazenar informações confidenciais, pois os dados são mantidos no servidor e não são acessíveis ao cliente.
8. Os cookies e as sessões são amplamente utilizados em sistemas web para garantir a persistência de dados e a autenticação dos usuários.
9. A tecnologia de cookies pode ser configurada para que o cliente aceite, recuse ou solicite confirmação do usuário para cada cookie enviado pelo servidor.
10. Através do protocolo HTTP, é possível acessar, modificar e deletar os cookies e sessões utilizados em um sistema web.

8. Subtópico:
11 .8 Headers (cabeçalhos) no Protocolo HTTP 
Assertivas:
1. Os headers (cabeçalhos) são parte integrante do Protocolo HTTP.
2. Os headers são utilizados para enviar informações adicionais ao servidor ou ao cliente durante uma requisição ou resposta HTTP.
3. Os headers são compostos por um nome e um valor, separados por dois pontos.
4. Os headers podem ser usados para definir o tipo de conteúdo que está sendo enviado ou recebido.
5. É possível incluir múltiplos headers em uma mesma requisição ou resposta HTTP.
6. Os headers podem ser utilizados para controlar o cache das páginas web.
7. Os headers podem conter informações sobre autenticação e sessões.
8. É possível adicionar headers personalizados para atender necessidades específicas.
9. Os headers podem ser usados para redirecionar uma requisição HTTP.
10. Os headers podem ser utilizados para comprimir o conteúdo enviado ou recebido durante uma requisição ou resposta HTTP.

9. Subtópico:
11 .9 Autent
Assertivas:
1. A função do algoritmo de autenticação 11 .9 é garantir a identificação correta de usuários em um sistema.
2. O uso de criptografia é uma das principais técnicas utilizadas pelo algoritmo de autenticação 11 .9.
3. O algoritmo 11 .9 possui uma taxa de falsos positivos extremamente baixa.
4. A autenticação realizada pelo algoritmo 11 .9 é baseada em tokens.
5. Um dos principais benefícios da utilização do algoritmo de autenticação 11 .9 é o aumento da segurança dos sistemas.
6. O algoritmo 11 .9 é amplamente utilizado em sistemas de login e controle de acesso.
7. A autenticação realizada pelo algoritmo 11 .9 garante a integridade dos dados transmitidos.
8. O algoritmo 11 .9 é considerado seguro contra ataques de força bruta.
9. O uso do algoritmo de autenticação 11 .9 diminui a probabilidade de ataques de phishing.
10. A implementação correta do algoritmo 11 .9 é essencial para garantir a confiabilidade dos sistemas de autenticação.


