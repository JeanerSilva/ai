Pergunta Original: 12.20 Java- testes   
 
1. Subtópico:
1. Fundamentos de Java: Conceitos básicos, sintaxe e estrutura.
Assertivas:
1. A palavra-chave "public" é usada para indicar que um método ou variável pode ser acessado por qualquer classe.
2. Em Java, a declaração de uma classe é feita utilizando a palavra-chave "class", seguida pelo nome da classe.
3. Para iniciar a execução de um programa Java, é necessário ter um método chamado "main", que serve como ponto de partida.
4. Em Java, o operador de atribuição "=" é usado para atribuir um valor a uma variável.
5. Os tipos primitivos em Java incluem int, float, double, char, boolean, entre outros.
6. Arrays são utilizados em Java para armazenar conjuntos de valores do mesmo tipo.
7. O comando "if" é utilizado para fazer testes condicionais e executar um bloco de código se a condição for verdadeira.
8. O laço de repetição "for" é utilizado para executar um bloco de código repetidas vezes, controlado por uma variável de controle.
9. Em Java, a palavra-chave "static" é usada para indicar que uma variável ou método pertence à classe, e não a uma instância específica.
10. Java é uma linguagem de programação orientada a objetos, o que significa que é baseada em classes e objetos.

2. Subtópico:
2. Programação Orientada a Objetos em Java: Classes, objetos, herança e polimorfismo.
Assertivas:
1. A programação orientada a objetos em Java é um paradigma de programação que se baseia na criação e manipulação de objetos.
2. Uma classe em Java é um tipo de dado que define as características e comportamentos de um objeto.
3. Um objeto em Java é uma instância de uma classe, e possui atributos e métodos próprios.
4. A herança em Java permite a criação de classes filhas que herdam características e comportamentos de uma classe pai.
5. A herança em Java facilita a reutilização de código, uma vez que as classes filhas aproveitam os atributos e métodos da classe pai.
6. O polimorfismo em Java permite que um objeto seja tratado de diferentes formas, dependendo do contexto em que é utilizado.
7. O polimorfismo em Java é alcançado através de sobrescrita de métodos e classes abstratas.
8. Uma classe abstrata em Java é uma classe que não pode ser instanciada, mas pode ser utilizada como base para outras classes.
9. A interface em Java define um contrato que uma classe que a implementa deve cumprir, especificando os métodos que a classe deve ter.
10. Em Java, é possível implementar herança múltipla de interfaces, permitindo que uma classe implemente várias interfaces ao mesmo tempo.

3. Subtópico:
3. Manipulação de Strings e Arrays em Java.
Assertivas:
1. O método length() é utilizado em Java para retornar o tamanho de uma string.
2. A classe String em Java é imutável, ou seja, não é possível modificar uma string já criada.
3. O método charAt() é utilizado em Java para retornar o caractere de uma string em uma determinada posição.
4. O método concat() é utilizado em Java para concatenar duas strings.
5. Arrays em Java possuem um tamanho fixo e não podem ser alterados depois de criados.
6. O método length é utilizado em Java para retornar o tamanho de um array.
7. Em Java, é possível inicializar um array especificando seus elementos entre chaves, separados por vírgula.
8. O método toString() é utilizado em Java para converter um array em uma string.
9. O método equals() é utilizado em Java para comparar se dois arrays são iguais.
10. O método sort() é utilizado em Java para ordenar os elementos de um array em ordem crescente.

4. Subtópico:
4. Estruturas de controle em Java: loops, condicionais e operadores lógicos.
Assertivas:
1. O operador de igualdade em Java é representado pelo símbolo "==", retornando verdadeiro apenas se ambos os operandos possuírem o mesmo valor.
2. O operador de negação em Java é representado pelo símbolo "!", retornando o inverso do valor do operando.
3. O loop "for" em Java permite executar um bloco de código repetidamente, dada uma condição e uma expressão de iteração.
4. O comando "if" em Java permite executar um bloco de código apenas se uma determinada condição for verdadeira. Caso contrário, o bloco é ignorado.
5. O comando "else" em Java é utilizado em conjunto com o "if", permitindo executar um bloco de código caso a condição do "if" seja falsa.
6. O operador "&&" em Java realiza a operação lógica de "AND", retornando verdadeiro apenas se ambas as expressões forem verdadeiras.
7. O operador "||" em Java realiza a operação lógica de "OR", retornando verdadeiro se pelo menos uma das expressões for verdadeira.
8. O loop "while" em Java executa um bloco de código repetidamente, desde que uma determinada condição seja verdadeira.
9. O operador "!" pode ser utilizado em conjunto com qualquer expressão lógica em Java para inverter o seu valor.
10. O operador "==" em Java não deve ser utilizado para comparar Strings, pois ele compara as referências dos objetos e não o conteúdo em si. Nesse caso, é recomendado utilizar o método "equals()" para realizar a comparação.

5. Subtópico:
5. Exceções em Java: try-catch-finally blocks, tipos de exceções.
Assertivas:
1. Em Java, o uso dos blocos try-catch-finally é uma técnica utilizada para lidar com exceções.
2. O bloco try é utilizado para envolver o código onde pode ocorrer uma exceção.
3. O bloco catch é utilizado para capturar e tratar uma exceção específica.
4. É possível utilizar vários blocos catch em sequência para tratar diferentes tipos de exceções.
5. O bloco finally é opcional, mas caso seja utilizado, o código dentro dele será sempre executado, independentemente de ocorrer uma exceção ou não.
6. Os blocos try-catch-finally podem ser aninhados, permitindo tratar exceções em vários níveis de um programa.
7. Em Java, existem dois tipos de exceções: as exceções verificadas (checked exceptions) e as exceções não verificadas (unchecked exceptions).
8. As exceções verificadas são aquelas que estendem a classe Exception e são obrigatoriamente declaradas ou tratadas no código.
9. As exceções não verificadas são aquelas que estendem a classe RuntimeException e não precisam ser declaradas ou tratadas no código.
10. As exceções em Java são hierarquicamente organizadas em uma árvore, onde a classe Throwable é a raiz e as demais classes representam diferentes tipos de exceções.

6. Subtópico:
6. Coleções em Java (Java Collections Framework): Listas, conjuntos e mapas.
Assertivas:
1. O Java Collections Framework define uma hierarquia de interfaces e classes para representar listas, conjuntos e mapas.
2. As listas em Java Collections Framework são implementadas através das classes ArrayList e LinkedList.
3. Os conjuntos em Java Collections Framework são implementados através das classes HashSet e TreeSet.
4. A interface Set não permite a inclusão de elementos duplicados, garantindo a unicidade dos elementos.
5. A interface List permite a inclusão de elementos duplicados e mantém a ordem de inserção dos elementos.
6. A classe HashMap é a implementação mais comum da interface Map em Java Collections Framework.
7. A classe TreeMap implementa a interface Map em Java Collections Framework e mantém a ordem dos elementos de acordo com um critério pré-definido.
8. A classe LinkedHashMap estende a classe HashMap e mantém a ordem de inserção dos elementos.
9. A classe HashSet não garante uma ordem específica dos elementos, pois utiliza o conceito de hash para otimizar as operações.
10. Java Collections Framework contém métodos para realizar operações comuns em listas, conjuntos e mapas, como adicionar, remover e pesquisar elementos.

7. Subtópico:
7. Multithreading em Java: Criação de threads, sincronização e comunicação entre threads.
Assertivas:
1. A criação de threads em Java pode ser feita tanto através da extensão da classe Thread quanto da implementação da interface Runnable.
2. A execução simultânea de várias threads em um programa Java é conhecida como multithreading.
3. Ao criar uma nova thread, é necessário implementar o método run(), que contém o código a ser executado pela thread.
4. A sincronização de threads em Java pode ser realizada através do uso da palavra-chave synchronized ou através do uso de monitores explícitos.
5. O uso de blocos synchronized garante que apenas uma thread por vez possa acessar um determinado trecho de código.
6. O método wait() da classe Object em Java é utilizado para fazer uma thread esperar até que outra thread a notifique.
7. A comunicação entre threads em Java pode ser feita através do uso de métodos wait() e notify() ou notifyAll(), que permitem que as threads aguardem por uma determinada condição antes de continuarem sua execução.
8. Threads em Java compartilham o mesmo espaço de memória, o que permite que elas acessem e modifiquem as mesmas variáveis.
9. O uso correto de mecanismos de sincronização e comunicação entre threads em Java é fundamental para evitar condições de corrida e garantir a consistência dos dados.
10. O modelo de programação multithread em Java é amplamente utilizado para criar programas que realizam tarefas simultâneas de forma mais eficiente.

8. Subtópico:
8. Entrada/Saída (I/O)
Assertivas:
1. A I/O é a responsável pela comunicação entre o computador e seus dispositivos periféricos.
2. A I/O tem como objetivo permitir a entrada e saída de dados do sistema.
3. A I/O pode ser realizada por meio de diversas técnicas, como mapeamento de memória, polling e interrupções.
4. A I/O mapeada em memória permite que o dispositivo periférico seja acessado por meio de endereços de memória.
5. O polling é um método de I/O em que o processador verifica constantemente se o dispositivo está pronto para receber ou enviar dados.
6. A I/O por interrupção permite que o dispositivo periférico interrompa a CPU para informar que está pronto para transferir dados.
7. Os controladores de dispositivos são responsáveis por gerenciar a I/O entre dispositivos de hardware e a CPU.
8. As interfaces de I/O entre dispositivos e controladores podem ser de diversos tipos, como serial, paralela, USB, dentre outras.
9. A I/O é uma operação síncrona, ou seja, o processador precisa esperar a conclusão da operação para realizar outras tarefas.
10. A I/O é essencial para o funcionamento adequado de um sistema computacional, permitindo a interação com os dispositivos periféricos.


