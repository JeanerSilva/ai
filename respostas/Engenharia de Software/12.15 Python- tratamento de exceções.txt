Pergunta Original: 12.15 Python- tratamento de exceções   
 
1. Subtópico:
1. Conceito e importância do tratamento de exceções em Python.
Assertivas:
1. O tratamento de exceções em Python é utilizado para lidar com possíveis erros durante a execução de um programa.
2. O tratamento de exceções é fundamental para melhorar a robustez e estabilidade de um programa em Python.
3. O tratamento de exceções em Python permite que erros sejam detectados e tratados de forma adequada, evitando paradas abruptas na execução do programa.
4. Ao tratar exceções em Python, é possível fornecer mensagens de erro personalizadas, facilitando a identificação e correção de problemas.
5. O tratamento de exceções em Python é baseado no uso de blocos de código try-except, onde o código propenso a erros é colocado no bloco try e o tratamento da exceção é realizado no bloco except.
6. Em Python, é possível tratar diferentes tipos de exceções individualmente utilizando várias cláusulas except.
7. O tratamento de exceções em Python permite que o programa tome ações específicas após a ocorrência de um erro, como exibir uma mensagem de erro, registrar em um arquivo de log ou realizar algum tipo de correção automática.
8. É possível utilizar a cláusula else após um bloco except em Python, para definir um código a ser executado caso nenhuma exceção seja lançada.
9. O tratamento de exceções em Python ajuda a separar a lógica de tratamento de erros da lógica principal do programa, facilitando a compreensão do código e favorecendo a manutenibilidade.
10. O tratamento de exceções em Python é uma prática recomendada e amplamente utilizada no desenvolvimento de software, tanto em aplicações de pequeno porte como em sistemas complexos.

2. Subtópico:
2. Tipos comuns de exceções em Python: ValueError, TypeError, IndexError, KeyError.
Assertivas:
1. O tipo de exceção ValueError é gerado quando uma função ou método recebe um argumento de tipo correto, mas com valor inválido.
2. O tipo de exceção TypeError é lançado quando ocorre uma operação inválida ou incompatível em relação aos tipos dos operandos.
3. O tipo de exceção IndexError é gerado quando ocorre uma tentativa de acesso a um índice inexistente em uma lista, tupla ou outra estrutura indexada.
4. O tipo de exceção KeyError é lançado quando há uma tentativa de acessar uma chave inexistente em um dicionário.
5. O tipo de exceção ValueError é frequentemente utilizado quando ocorrem erros com conversões de tipo, como tentar converter uma string que não representa um número para int.
6. O tipo de exceção TypeError ocorre quando se tenta realizar uma operação inválida, como somar um número com uma string.
7. O tipo de exceção IndexError é bastante comum ao se iterar sobre elementos de uma lista e se tentar acessar um índice fora de seu intervalo válido.
8. O tipo de exceção KeyError é gerado quando se tenta acessar uma chave inexistente em um dicionário, como recuperar um valor a partir de uma chave que não foi previamente inserida.
9. As exceções ValueError, TypeError, IndexError e KeyError são alguns dos tipos mais comuns de exceções em Python.
10. É importante conhecer e tratar adequadamente esses tipos de exceções para garantir a robustez e eficiência de programas desenvolvidos em Python.

3. Subtópico:
3. Uso da cláusula 'try' e 'except' para captura e tratamento de exceções.
Assertivas:
1. O uso da cláusula 'try' é uma estrutura fundamental em linguagens de programação para lidar com exceções.
2. A cláusula 'try' é seguida por um bloco de código onde é possível ocorrer uma exceção.
3. A cláusula 'except' é usada para capturar a exceção lançada dentro do bloco de código 'try'.
4. A cláusula 'except' permite que o programador defina o tratamento adequado para a exceção capturada.
5. É possível utilizar várias cláusulas 'except' em sequência para tratar diferentes tipos de exceções.
6. O bloco de código 'except' só será executado se uma exceção for lançada dentro do bloco 'try'.
7. É possível adicionar uma cláusula 'else' logo após as cláusulas 'except' para especificar um bloco de código a ser executado quando nenhuma exceção for lançada.
8. O bloco de código 'else' só será executado se nenhuma exceção for lançada dentro do bloco 'try'.
9. A cláusula 'finally' pode ser utilizada em conjunto com as cláusulas 'try' e 'except' para definir um bloco de código que será sempre executado, independentemente de ocorrer uma exceção ou não.
10. O uso adequado da cláusula 'try' e 'except' é essencial para garantir uma correta manipulação e tratamento de exceções em programas de computador.

4. Subtópico:
4. Implementação da cláusula 'finally' no manejo de exceções.
Assertivas:
1. A cláusula "finally" é utilizada para definir um bloco de código que será sempre executado, independentemente de ocorrerem exceções ou não.

2. A cláusula "finally" é executada após o bloco try-catch, mesmo que um retorno seja utilizado no bloco try.

3. A cláusula "finally" é opcional e pode ser omitida em um bloco try-catch.

4. É possível ter múltiplos blocos "finally" em um bloco try-catch.

5. A cláusula "finally" é executada mesmo que uma exceção seja lançada no bloco catch.

6. A cláusula "finally" é executada somente se o bloco try for executado.

7. A cláusula "finally" pode ser utilizada para liberar recursos, como fechar conexões com bancos de dados ou arquivos abertos.

8. A cláusula "finally" é sempre executada, mesmo que aconteça um erro de compilação no bloco try-catch.

9. A cláusula "finally" é recomendada para ser utilizada quando é necessário garantir que determinadas operações precisam ser realizadas, independentemente de exceções.

10. A cláusula "finally" pode ser utilizada em conjunto com as cláusulas "try" e "catch" para criar um tratamento completo de exceções em um programa.

5. Subtópico:
5. Utilização do comando 'raise' para gerar uma exceção manualmente.
Assertivas:
1. O comando 'raise' em python é utilizado para gerar uma exceção manualmente.
2. A utilização do comando 'raise' ocorre quando o desenvolvedor identifica a necessidade de lançar uma exceção em um ponto específico do código.
3. O comando 'raise' permite que o desenvolvedor personalize a mensagem de erro da exceção que está sendo lançada.
4. Ao utilizar o comando 'raise', o programa irá interromper a sua execução normal e tratar a exceção gerada.
5. A utilização correta do comando 'raise' contribui para a detecção de erros e a implementação de tratamentos adequados.
6. O comando 'raise' pode ser utilizado tanto para exceções pré-definidas pela linguagem (como ValueError ou TypeError) quanto para exceções personalizadas.
7. A utilização do comando 'raise' requer conhecimento prévio sobre as exceções disponíveis e suas características.
8. Com o comando 'raise', é possível monitorar e reportar erros de forma eficiente durante a execução do programa.
9. A utilização do comando 'raise' é uma prática comum e recomendada na programação em Python.
10. O comando 'raise' é uma ferramenta indispensável para o desenvolvedor que deseja garantir a robustez e a confiabilidade do seu código.

6. Subtópico:
6. Criação e uso de exceções personalizadas em Python.
Assertivas:
1. As exceções personalizadas em Python são criadas através da definição de uma nova classe que herda da classe base Exception.
2. O uso de exceções personalizadas é recomendado quando uma situação imprevista ocorre dentro de um programa Python.
3. É possível definir atributos adicionais para as exceções personalizadas, permitindo que informações específicas sejam transmitidas sobre o erro ocorrido.
4. As exceções personalizadas podem ser utilizadas para sinalizar erros específicos em um programa Python, facilitando a depuração e manutenção do código.
5. Ao lançar uma exceção personalizada em Python, é possível capturá-la utilizando blocos try/except, permitindo o tratamento adequado do erro.
6. As exceções personalizadas em Python podem ser utilizadas para capturar erros de validação, como por exemplo, quando um valor inválido é inserido em uma função.
7. É possível criar hierarquias de exceções personalizadas em Python, de forma a organizar e categorizar os diferentes tipos de erros que podem ocorrer em um programa.
8. Ao utilizar exceções personalizadas em Python, é possível criar mensagens de erro customizadas que auxiliam na identificação e solução de problemas.
9. As exceções personalizadas em Python podem ser utilizadas para interrupções controladas de execução, permitindo que o fluxo do programa seja redirecionado de acordo com as necessidades específicas.
10. Ao criar exceções personalizadas em Python, é importante documentar adequadamente o seu propósito e forma de utilização, de forma a facilitar a compreensão e reutilização do código por outros desenvolvedores.

7. Subtópico:
7. Hierarquia das classes de Exceção na linguagem Python.
Assertivas:
1. As classes de exceção em Python seguem uma hierarquia, em que algumas classes são subclasses de outras.
2. A classe base para todas as exceções em Python é a classe "BaseException".
3. A classe "Exception" é uma das subclasses diretas da classe "BaseException" na hierarquia de exceções em Python.
4. A classe "Exception" é a classe base para a maioria das exceções não relacionadas a condições de erro graves em Python.
5. A classe "ArithmeticError" é uma das subclasses diretas da classe "Exception" na hierarquia de exceções em Python.
6. A classe "ArithmeticError" é a classe base para exceções relacionadas a erros de cálculos matemáticos em Python.
7. A classe "ZeroDivisionError" é uma das subclasses diretas da classe "ArithmeticError" na hierarquia de exceções em Python.
8. A classe "ZeroDivisionError" é usada para representar a exceção ocorrida ao tentar dividir um número por zero em Python.
9. A classe "TypeError" é uma das subclasses diretas da classe "Exception" na hierarquia de exceções em Python.
10. A classe "TypeError" é usada para representar a exceção ocorrida quando ocorre uma operação ou função em um tipo incompatível em Python.

8. Subtópico:
8. Diferença entre erros sintáticos e exceções em tempo de execução
Assertivas:
1. Erros sintáticos são identificados durante a análise léxica e sintática do código, enquanto exceções em tempo de execução ocorrem durante a execução do programa.
2. Erros sintáticos estão relacionados à estrutura gramatical da linguagem de programação, enquanto exceções em tempo de execução estão associadas a erros lógicos ou imprevistos durante a execução do programa.
3. Erros sintáticos impedem a compilação ou interpretação correta do código, enquanto exceções em tempo de execução podem ser capturadas e tratadas pelo programa.
4. Erros sintáticos são identificados pelo compilador/interpretador antes do programa ser executado, enquanto exceções em tempo de execução ocorrem durante a execução do programa.
5. Erros sintáticos resultam em um programa inválido, que não pode ser executado, enquanto exceções em tempo de execução permitem que o programa seja executado, desde que a exceção seja tratada corretamente.
6. Erros sintáticos são erros de programação que violam as regras da linguagem, enquanto exceções em tempo de execução podem ocorrer devido a erros lógicos ou problemas no ambiente de execução.
7. Erros sintáticos são mais fáceis de serem identificados e corrigidos, pois geralmente estão relacionados a erros de digitação, falta de fechamento de parênteses, entre outros. Já as exceções em tempo de execução podem ser mais complexas de serem identificadas e corrigidas.
8. Erros sintáticos geralmente são mais previsíveis, pois ocorrem quando o código não segue a estrutura gramatical da linguagem, enquanto exceções em tempo de execução podem ocorrer de forma imprevisível, dependendo de inputs ou situações específicas durante a execução do programa.
9. Erros sintáticos são erros de compilação, enquanto exceções em tempo de execução são erros de execução.
10. Erros sintáticos podem ser evitados através da utilização correta das regras gramaticais da linguagem de programação, enquanto exceções em tempo de execução podem ser previstas e tratadas através de mecanismos como try-catch.


