Item do edital: 2 Princípios e práticas de DevOps   
 
1. Subtópico:
1. Definição e fundamentos de DevOps
Assertivas:
1. O DevOps é uma metodologia que visa integrar o desenvolvimento de software com as operações de infraestrutura.
2. O DevOps utiliza automação para acelerar o processo de entrega de software, aumentando a eficiência e reduzindo erros humanos.
3. A comunicação e colaboração entre equipes é um dos principais fundamentos do DevOps.
4. O DevOps busca promover a cultura de responsabilidade compartilhada entre desenvolvedores e operadores, reduzindo o atrito entre ambos.
5. A utilização de ferramentas de controle de versão, como o Git, é parte integrante das práticas de DevOps.
6. O monitoramento contínuo de aplicações e infraestrutura é uma prática essencial do DevOps, permitindo a identificação precoce de problemas.
7. Testes automatizados são fundamentais para garantir a qualidade e a estabilidade das aplicações no contexto do DevOps.
8. A infraestrutura como código (IaC) é uma abordagem central do DevOps, permitindo a criação e gestão de ambientes de forma programática.
9. A implementação de pipelines de entrega contínua é um dos objetivos do DevOps, visando a entrega rápida e frequente de atualizações de software.
10. O DevOps promove a adoção de práticas ágeis e flexíveis, visando acelerar o desenvolvimento e a entrega de valor aos usuários finais.

2. Subtópico:
2. Benefícios e desafios na implementação do DevOps
Assertivas:
1. O uso do DevOps tem como benefício a agilidade no lançamento de novas funcionalidades e atualizações de software.
2. A implementação do DevOps requer uma mudança cultural nas equipes de desenvolvimento e operações, o que pode ser um desafio.
3. A integração contínua é um dos pilares do DevOps e permite a detecção de erros de forma antecipada, aumentando a qualidade do software.
4. O uso de automação é um benefício do DevOps, pois reduz o tempo e o esforço necessário para realizar tarefas repetitivas.
5. A colaboração entre desenvolvedores e operadores é essencial no DevOps, mas pode ser um desafio devido a diferenças em perspectivas e objetivos.
6. A padronização de processos é um benefício do DevOps, pois simplifica o trabalho e facilita a manutenção do software.
7. A implementação do DevOps requer investimento em ferramentas adequadas de integração, automação e monitoramento.
8. A comunicação eficiente e transparente é um dos princípios do DevOps, o que pode ser desafiador em grandes organizações.
9. O monitoramento contínuo é um benefício do DevOps, pois permite a identificação rápida de problemas e sua correção imediata.
10. A implementação do DevOps tem como objetivo principal a entrega de valor ao cliente de forma rápida e eficiente.

3. Subtópico:
3. Ferramentas e tecnologias utilizadas em DevOps
Assertivas:
1. A adoção de ferramentas e tecnologias em DevOps visa automatizar processos de desenvolvimento, integração e implantação de software.

2. A ferramenta Jenkins é amplamente utilizada em DevOps para implementar integração contínua e entrega contínua.

3. O Docker é uma tecnologia frequentemente empregada em DevOps para criar e implantar aplicativos em contêineres.

4. O uso do Kubernetes, uma plataforma de orquestração de contêineres, é comum em ambientes de DevOps que lidam com implantação e gerenciamento de aplicativos distribuídos.

5. A aplicação de infraestrutura como código (IaC) é uma prática comum em DevOps, na qual as configurações de infraestrutura são tratadas como código para permitir maior automatização e controle.

6. O uso de ferramentas de monitoramento contínuo e análise de registros, como o ELK Stack (Elasticsearch, Logstash e Kibana), é fundamental em ambientes de DevOps para identificar problemas e otimizar o desempenho do sistema.

7. A integração entre equipes de desenvolvimento e operações é essencial em DevOps, e a utilização de ferramentas de comunicação e colaboração, como Slack ou Microsoft Teams, é disseminada nessas práticas.

8. A ferramenta Ansible é frequentemente empregada em DevOps para automatizar tarefas de provisionamento, configuração e gerenciamento de servidores.

9. A utilização de ferramentas de testes automatizados, como o Selenium, é comum em DevOps para garantir a qualidade do software e minimizar erros em produção.

10. A prática de entrega contínua em DevOps é facilitada pelo uso de ferramentas de automação de implantação, como o Chef ou o Puppet.

4. Subtópico:
4. Princípios do Agile e sua relação com o DevOps
Assertivas:
1. Os princípios do Agile têm como objetivo promover a entrega rápida e contínua de valor ao cliente, por meio de adaptação constante e colaboração efetiva.
2. O desenvolvimento ágil prioriza a interação frequentemente com o cliente, buscando entender melhor suas necessidades e receber feedbacks constantes.
3. O DevOps é uma abordagem que busca integrar os times de desenvolvimento e de operações, visando otimizar a entrega de software de forma rápida e confiável.
4. Os princípios do Agile estão alinhados com a filosofia do DevOps, pois ambos compartilham da ideia de colaboração, comunicação e adaptação contínua.
5. O Agile e o DevOps têm como objetivo comum a melhoria da qualidade do software, através da automação de testes e de processos de integração e entrega contínua.
6. Tanto o Agile quanto o DevOps promovem a transparência nas atividades e buscam identificar e corrigir problemas de forma ágil e eficiente.
7. O Agile defende a valorização de indivíduos e interações, enquanto o DevOps enfatiza a automação e a eficiência dos processos.
8. O Agile e o DevOps valorizam a entrega incremental e iterativa, permitindo a liberação de funcionalidades em pequenas entregas de valor.
9. Ambas as abordagens Agile e DevOps têm ganhado cada vez mais espaço no mercado de TI, pois auxiliam na agilidade, adaptabilidade e qualidade dos projetos de tecnologia.
10. A adoção dos princípios do Agile aliada à implementação do DevOps pode trazer benefícios significativos, como redução de ciclos de desenvolvimento, aumento da produtividade e melhoria do relacionamento com o cliente.

5. Subtópico:
5. Integração contínua, entrega contínua e implantação contínua (CI/CD)
Assertivas:
1. A integração contínua (CI) é uma prática no desenvolvimento de software que consiste na combinação frequente e automatizada do código enviado por diferentes desenvolvedores em um repositório central.
2. A entrega contínua (CD) é uma abordagem que visa fornecer código confiável e testado para produção de maneira frequente e consistente.
3. A implantação contínua (CI) refere-se ao processo automatizado e contínuo de implantar o software em um ambiente de produção após passar por testes e aprovações prévias.
4. CI/CD é uma abordagem que busca garantir a qualidade do software por meio da automação de testes e da integração e entrega frequentes.
5. A integração contínua reduz os riscos de conflitos de código e problemas de integração entre desenvolvedores, facilitando a detecção precoce de erros.
6. A entrega contínua permite que as alterações de código sejam enviadas para produção de forma rápida e segura, garantindo uma disponibilidade mais rápida de novas funcionalidades.
7. A implantação contínua agiliza o processo de liberação do software em ambientes de produção, tornando-o mais eficiente e menos sujeito a erros humanos.
8. As práticas de CI/CD têm sido amplamente adotadas em projetos ágeis e devops, contribuindo para uma entrega mais rápida, confiável e escalável de software.
9. A integração contínua é baseada em testes automatizados, que verificam se o código enviado pelos desenvolvedores é funcional e compatível com o restante do sistema.
10. O uso de ferramentas de automação, como sistemas de integração e entrega contínua, é fundamental para implementar efetivamente os princípios de CI/CD.

6. Subtópico:
6. Gestão de configuração em um ambiente DevOps
Assertivas:
1. A gestão de configuração é uma prática fundamental na implementação de ambientes DevOps.
2. A gestão de configuração em um ambiente DevOps visa controlar e documentar todas as alterações realizadas nos componentes de um sistema.
3. A gestão de configuração permite garantir a estabilidade e integridade dos ambientes de desenvolvimento, teste e produção.
4. A gestão de configuração em um ambiente DevOps envolve a definição e controle de versões de software, infraestrutura e demais artefatos.
5. A gestão de configuração permite a automação de processos de implementação de mudanças em ambientes de produção.
6. A gestão de configuração em um ambiente DevOps promove a colaboração entre desenvolvedores, operadores e demais profissionais envolvidos.
7. A gestão de configuração permite a rápida identificação e resolução de problemas decorrentes de alterações ou atualizações em um sistema.
8. A gestão de configuração em um ambiente DevOps busca minimizar os riscos e impactos causados por alterações não planejadas.
9. A gestão de configuração envolve a criação e manutenção de uma linha de base que representa o estado ideal do sistema em todas as etapas de desenvolvimento e operações.
10. A gestão de configuração em um ambiente DevOps é realizada usando ferramentas específicas, como Git, Puppet, Chef, Ansible, entre outras.

7. Subtópico:
7. Monitoramento e logística no contexto do DevOps 
Assertivas:
1) O monitoramento é uma prática essencial no contexto do DevOps, visando a identificação e solução de problemas em tempo real.
2) A logística no DevOps se refere ao planejamento e coordenação de atividades relacionadas à entrega e implantação de software.
3) A monitoração contínua é fundamental para garantir a qualidade e estabilidade das aplicações durante todo o ciclo de vida do software.
4) A logística no DevOps envolve o gerenciamento eficiente de recursos e componentes necessários para a entrega do software.
5) A implementação de boas práticas de monitoramento proporciona melhorias na detecção precoce de falhas e, consequentemente, uma redução no tempo de resposta para resolução.
6) O monitoramento no DevOps auxilia na otimização de recursos e no planejamento de capacidade, contribuindo para a melhoria da performance e utilização dos recursos do ambiente.
7) A logística no contexto do DevOps abrange a gestão do fluxo de trabalho, desde o desenvolvimento até a produção, visando a entrega contínua de software.
8) O monitoramento no DevOps engloba a coleta, análise e interpretação de dados e métricas, proporcionando uma visão abrangente do desempenho e comportamento das aplicações.
9) A logística no DevOps busca reduzir os desperdícios e inconsistências nos processos de entrega e implantação de software.
10) O monitoramento adequado no DevOps possibilita a identificação antecipada de problemas de desempenho e escalabilidade, permitindo ações corretivas antes que afetem o usuário final.

8. Subtópico:
8. Cultura de colaboração entre desenvolvimento e operações (Dev & Ops)
Assertivas:
1. A cultura de colaboração entre desenvolvimento e operações (Dev & Ops) busca integrar as equipes de maneira eficiente e eficaz.
2. A cultura de colaboração entre Dev & Ops busca eliminar barreiras e promover a comunicação contínua entre as equipes.
3. A cultura de colaboração entre Dev & Ops tem o objetivo de melhorar a qualidade e a entrega de software, diminuindo os riscos operacionais.
4. A cultura de colaboração entre Dev & Ops envolve a automação de processos para aumentar a eficiência e minimizar erros.
5. A cultura de colaboração entre Dev & Ops incentiva a responsabilidade compartilhada pelo resultado final do software.
6. A cultura de colaboração entre Dev & Ops busca a adoção de práticas ágeis para permitir entregas mais frequentes e ajustes rápidos.
7. A cultura de colaboração entre Dev & Ops promove a aprendizagem contínua e a melhoria contínua dos processos.
8. A cultura de colaboração entre Dev & Ops envolve a criação de equipes multidisciplinares, com conhecimentos técnicos em ambas as áreas.

9. Subtópico:
9. Segurança em ambientes DevOps: conceito de 'DevSecOps'
Assertivas:
1. O conceito de 'DevSecOps' tem como objetivo integrar práticas de segurança em todas as etapas do ciclo de vida de desenvolvimento e operações.
2. O 'DevSecOps' visa eliminar a separação tradicional entre equipes de desenvolvimento, operações e segurança, promovendo colaboração e responsabilidade compartilhada.
3. A abordagem 'DevSecOps' busca identificar e resolver problemas de segurança o mais cedo possível, desde a fase de design e desenvolvimento até a produção.
4. A automação é fundamental para a implementação efetiva do 'DevSecOps', pois permite a aplicação consistente de políticas de segurança em todo o ambiente de desenvolvimento e operações.
5. A cultura de segurança é um elemento central no 'DevSecOps', incentivando a conscientização e priorização da segurança em todos os membros da equipe.
6. A implementação do 'DevSecOps' requer a definição de métricas que auxiliem na medição, monitoramento e melhoria contínua da segurança em ambientes DevOps.
7. O 'DevSecOps' incentiva a utilização de testes de segurança automatizados para identificar vulnerabilidades e falhas de configuração em tempo real.
8. A segurança em ambientes DevOps deve ser vista como um processo contínuo e iterativo, evoluindo constantemente para acompanhar as ameaças emergentes.
9. A colaboração entre os desenvolvedores, operadores e profissionais de segurança é essencial no 'DevSecOps', promovendo a troca de conhecimentos e a coleta de insights para aprimorar a segurança.
10. A implementação efetiva do 'DevSecOps' requer o apoio e a participação ativa da alta administração da organização, garantindo a alocação adequada de recursos e a priorização da segurança nos projetos de desenvolvimento.

10. Subtópico:
10.Práticas
Assertivas:
1. Práticas sustentáveis visam reduzir o impacto ambiental decorrente de atividades humanas.
2. Práticas alimentares saudáveis estão relacionadas a uma dieta equilibrada e variada.
3. Práticas de exercícios físicos regulares contribuem para a melhoria da saúde e bem-estar.
4. Práticas de gestão participativa promovem maior engajamento dos colaboradores nas decisões organizacionais.
5. Práticas de liderança ética e transparente são fundamentais para o desenvolvimento de equipes de trabalho eficientes.
6. Práticas de motivação e reconhecimento dos funcionários têm impacto positivo na produtividade organizacional.
7. Práticas de gerenciamento do tempo favorecem a produtividade pessoal e profissional.
8. Práticas de educação financeira auxiliam na gestão responsável e eficiente do dinheiro.
9. Práticas de resolução de conflitos contribuem para a melhoria do clima organizacional.
10. Práticas de cidadania ativa englobam a participação ativa na comunidade e no desenvolvimento local.


