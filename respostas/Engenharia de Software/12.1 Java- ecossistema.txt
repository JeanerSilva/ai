Item do edital: 12.1 Java- ecossistema   
 
1. Subtópico:
1. Fundamentos da linguagem Java
Assertivas:
1. A linguagem Java foi criada por James Gosling e sua equipe na Sun Microsystems.
2. A linguagem Java é orientada a objetos e possui diversas características desse paradigma.
3. Java é uma linguagem compilada, ou seja, seu código-fonte é transformado em bytecode executável por uma máquina virtual.
4. A máquina virtual Java (JVM) é responsável por interpretar e executar o bytecode gerado pelo compilador Java.
5. A linguagem Java é fortemente tipada, o que significa que todas as variáveis devem ter seus tipos declarados explicitamente.
6. Java oferece suporte a coleta de lixo (garbage collection), o que facilita a gestão da memória e a prevenção de vazamentos.
7. Java possui um conjunto de bibliotecas padrão (Java API) que oferecem diversas funcionalidades prontas para uso.
8. A plataforma Java é altamente portátil, permitindo a execução de programas em diferentes sistemas operacionais.
9. Java é amplamente utilizado no desenvolvimento de aplicações desktop, web e móveis.
10. A partir da versão 8, Java passou a oferecer suporte a programação funcional com o uso de expressões lambda.

2. Subtópico:
2. Estrutura e sintaxe do Java
Assertivas:
1. Em Java, as classes são as unidades básicas de estruturação e organização do código.
2. A sintaxe do Java é baseada em blocos de código delimitados por chaves ({}) e terminados com ponto e vírgula (;).
3. A palavra-chave "public" é utilizada para definir que uma classe ou método é de acesso público.
4. A estrutura de controle "if-else" é usada para tomar decisões condicionais em um programa Java.
5. Em Java, a palavra reservada "this" é utilizada para representar a instância atual de uma classe.
6. O operador "==" é utilizado em Java para verificar se duas variáveis têm o mesmo valor.
7. O bloco "try-catch" é usado para lidar com exceções em Java, permitindo a execução de um bloco de código mesmo que ocorra um erro.
8. Em Java, o operador de incremento (++), quando colocado antes de uma variável, incrementa o valor antes de qualquer outro processamento.
9. A estrutura de repetição "while" é utilizada em Java para executar um bloco de código enquanto uma condição for verdadeira.
10. Em Java, o operador de atribuição (=) é utilizado para atribuir um valor a uma variável.

3. Subtópico:
3. Programação orientada a objetos em Java
Assertivas:
1. A programação orientada a objetos em Java permite a criação de classes e objetos, que são as principais entidades de um programa.
2. Em Java, o encapsulamento é um dos princípios fundamentais da programação orientada a objetos, permitindo o controle de acesso aos atributos e métodos das classes.
3. A herança é uma característica da programação orientada a objetos em Java, que permite que uma classe herde características e comportamentos de outra classe.
4. Polimorfismo é uma técnica utilizada na programação orientada a objetos em Java, permitindo que um objeto seja tratado de diferentes formas com base em seu tipo.
5. A linguagem de programação Java suporta a construção de interfaces, que são contratos que definem os métodos que uma classe deve implementar.
6. Em Java, é possível utilizar a sobrecarga de métodos, que permite a definição de vários métodos com o mesmo nome, mas com parâmetros diferentes.
7. Java oferece suporte à criação de classes abstratas, que são classes que não podem ser instanciadas diretamente, mas podem ser herdadas por outras classes.
8. Uma das características da programação orientada a objetos em Java é o polimorfismo de classe, que permite que uma classe seja referenciada de maneiras diferentes.
9. Em Java, é possível utilizar o mecanismo de exceções para lidar com erros e situações inesperadas durante a execução de um programa.
10. Java utiliza o conceito de construtores para criar objetos e inicializar seus atributos no momento da criação.

4. Subtópico:
4. Gerenciamento de memória e coleta de lixo em Java
Assertivas:
1. O gerenciamento de memória em Java é feito automaticamente pelo Garbage Collector.
2. O Garbage Collector é responsável por identificar e desalocar objetos sem referências no programa.
3. A coleta de lixo em Java é um processo contínuo que ocorre de forma transparente para o programador.
4. O Garbage Collector utiliza o algoritmo de contagem de referências para identificar objetos sem referências.
5. Em Java, não é necessário liberar explicitamente a memória alocada pelos objetos.
6. A JVM (Máquina Virtual Java) é responsável por gerenciar a memória disponível para o programa.
7. O Garbage Collector pode ser otimizado por meio de ajustes de configuração na JVM.
8. O uso inadequado de objetos com referências fortes pode impactar negativamente o desempenho do Garbage Collector em Java.
9. Em Java, a programação orientada a objetos promove o uso eficiente de memória.
10. O Garbage Collector em Java contribui para a segurança e estabilidade do programa, evitando problemas como vazamento de memória.

5. Subtópico:
5. Tratamento de exceções em Java
Assertivas:
1. Em Java, o tratamento de exceções é feito por meio das palavras-chave try, catch e finally.
2. O bloco try é responsável por conter o código que pode gerar uma exceção.
3. O bloco catch é usado para tratar exceções específicas, capturando-as e executando um código de tratamento apropriado.
4. Em Java, uma exceção não tratada no bloco catch é propagada para o próximo bloco try-catch ou para o ambiente de execução.
5. O bloco finally é utilizado para definir um código que será executado independentemente de ocorrer ou não exceções.
6. Em Java, é possível capturar e tratar múltiplas exceções em um único bloco catch, separando-as por vírgulas.
7. A hierarquia de exceções em Java é representada por uma árvore de herança, onde as exceções mais genéricas são superclasses das mais específicas.
8. Em Java, é possível criar exceções personalizadas estendendo a classe Exception ou RuntimeException.
9. Ao lançar uma exceção em Java, é possível passar informações adicionais sobre o erro ocorrido por meio de parâmetros no construtor da exceção.
10. O tratamento adequado de exceções em Java contribui para a segurança e confiabilidade do sistema, permitindo a recuperação ou término controlado em caso de erros inesperados.

6. Subtópico:
6. Bibliotecas padrão do Java (Java Standard Library)
Assertivas:
1. A Biblioteca Padrão do Java, também conhecida como Java Standard Library, é um conjunto de classes e interfaces pré-definidas fornecidas pela plataforma Java.
2. A Biblioteca Padrão do Java possui componentes para manipulação de strings, coleções, entrada e saída, manipulação de data e hora, entre outros recursos.
3. A Biblioteca Padrão do Java fornece a classe java.util.ArrayList, que é uma implementação da interface List, permitindo armazenar e manipular uma lista dinâmica de objetos.
4. A Biblioteca Padrão do Java inclui a classe java.lang.Math, que oferece métodos estáticos para operações matemáticas comuns, como cálculo de raiz quadrada, valor absoluto, arredondamento, entre outros.
5. A Biblioteca Padrão do Java inclui a classe java.io.File, que permite a manipulação de arquivos e diretórios no sistema de arquivos.
6. A Biblioteca Padrão do Java disponibiliza a classe java.util.Scanner, que permite a leitura de dados a partir de uma variedade de fontes, como entrada do usuário, arquivos ou strings.
7. A Biblioteca Padrão do Java inclui a classe java.util.Random, que permite a geração de números aleatórios com diferentes distribuições.
8. A Biblioteca Padrão do Java possui a classe java.util.Arrays, que fornece métodos para manipulação de arrays, como ordenação, pesquisa e preenchimento.
9. A Biblioteca Padrão do Java inclui a classe java.util.regex.Pattern, que permite a manipulação de expressões regulares para buscar e manipular padrões em strings.
10. A Biblioteca Padrão do Java fornece a classe java.time.LocalDate, que permite a representação e manipulação de datas sem informação de fuso horário.

7. Subtópico:
7. Desenvolvimento de aplicativos multi-threaded em Java 
Assertivas:
1. O desenvolvimento de aplicativos multi-threaded em Java permite que múltiplas tarefas sejam executadas simultaneamente.
2. A utilização de threads em aplicativos Java aumenta a eficiência e o desempenho dos programas.
3. A linguagem Java oferece recursos nativos para facilitar a implementação de aplicações multi-threaded.
4. Threads em Java podem ser criadas tanto por meio de classes como também por meio de interfaces.
5. A sincronização de threads em aplicativos Java permite garantir a consistência dos dados compartilhados entre elas.
6. Java oferece mecanismos nativos para lidar com bloqueios e exclusões mútuas entre threads.
7. Aplicativos multi-threaded em Java são adequados para cenários que envolvem processamento paralelo e concorrente.
8. Um dos benefícios do desenvolvimento multi-threaded em Java é a redução do tempo de execução de programas.
9. A implementação adequada de semáforos em Java pode garantir a sincronização adequada entre as threads.
10. A utilização de técnicas de programação multi-threaded em Java requer conhecimento avançado das características e peculiaridades da linguagem.

8. Subtópico:
8. Uso do ecossistema Spring Framework no desenvolvimento com Java 
Assertivas:
1. O Spring Framework é uma plataforma de desenvolvimento de aplicativos Java que oferece diversos recursos para facilitar a criação de sistemas escaláveis e de alto desempenho.
2. O Spring Framework é uma solução open source, o que permite que os desenvolvedores acessem e modifiquem o código-fonte de acordo com as necessidades de suas aplicações.
3. O Spring Framework oferece um conjunto de módulos que podem ser utilizados de forma independente, permitindo que os desenvolvedores escolham apenas os recursos necessários para seus projetos.
4. O Spring Framework possui suporte a diferentes camadas de desenvolvimento, incluindo apresentação, serviços e persistência de dados, permitindo a criação de sistemas completos e integrados.
5. A utilização do Spring Framework facilita a implementação de padrões de projeto comuns, como MVC (Model-View-Controller) e DI (Dependency Injection), que auxiliam na separação de responsabilidades e no desenvolvimento de sistemas mais estruturados.
6. O Spring Framework oferece um conjunto de recursos avançados para a integração de aplicações, como suporte a serviços web, integração com sistemas de mensageria e integração com sistemas de cache.
7. O uso do Spring Framework no desenvolvimento com Java permite a criação de sistemas modulares, facilitando a manutenção e evolução das aplicações no longo prazo.
8. O Spring Framework oferece suporte a diferentes tecnologias e protocolos de comunicação, como HTTP, JMS, RMI, JDBC, entre outros, permitindo a integração com diversos sistemas e serviços.
9. O Spring Framework possui uma comunidade ativa e engajada, o que garante a disponibilidade de recursos, documentação e suporte por meio de fóruns e comunidades online.
10. A utilização do ecossistema Spring Framework pode contribuir significativamente para o aumento da produtividade no desenvolvimento de aplicações Java, devido à sua ampla gama de recursos e facilidades oferecidas.

9. Subtópico:
9. Conceitos e uso prático do JPA (Java Persistence API) 
Assertivas:
1. A JPA é uma especificação do Java que define uma interface comum para persistência de dados em aplicações Java.
2. O JPA facilita o mapeamento de objetos Java para tabelas em bancos de dados relacionais.
3. A JPA permite o uso de consultas JPQL (Java Persistence Query Language) para recuperar e manipular objetos persistentes.
4. O JPA suporta o uso de anotações para mapear classes e propriedades para entidades e colunas do banco de dados.
5. O JPA é uma alternativa ao uso direto de SQL em aplicações Java, oferecendo uma camada de abstração que simplifica a persistência de dados.
6. O JPA suporta os principais recursos de ORM (Object-Relational Mapping), como relacionamentos entre entidades, herança e polimorfismo.
7. O JPA pode ser utilizado em diferentes frameworks e servidores de aplicação, como Hibernate, EclipseLink e JBoss AS.
8. O JPA oferece suporte a transações para garantir a consistência dos dados e a atomicidade das operações de persistência.
9. O uso do JPA pode reduzir a complexidade do código relacionado à persistência de dados, facilitando a manutenção e evolução do sistema.
10. O JPA é amplamente utilizado no desenvolvimento de aplicações Java empresariais, proporcionando uma abordagem padronizada e eficiente para a persistência de dados.

10. Subtópico:
10. Segurança na programação com a linguagem java
Assertivas:
1. A segurança na programação com a linguagem Java envolve a utilização de mecanismos de controle de acesso, como permissões e autenticação.
2. A linguagem Java possui um sistema de gerenciamento automático de memória que contribui para a segurança da programação, evitando erros como vazamento de ponteiros.
3. A utilização de criptografia nas comunicações e no armazenamento de dados é uma prática recomendada para aumentar a segurança na programação com Java.
4. O uso de bibliotecas de segurança, como o Java Cryptography Architecture (JCA), pode melhorar a segurança em aplicações Java, proporcionando implementações de algoritmos criptográficos confiáveis e testados.
5. A implementação adequada de mecanismos de validação e sanização de dados, como a utilização de expressões regulares e a verificação de limites, pode ajudar a prevenir ataques de injeção de código em aplicações Java.
6. A utilização de princípios de programação segura, como o princípio do menor privilégio, é essencial para minimizar vulnerabilidades em aplicações Java.
7. A atualização regular das bibliotecas e frameworks utilizados na programação Java, bem como a aplicação de patches de segurança, é recomendada para garantir a segurança das aplicações.
8. A utilização de ferramentas de análise estática de código, como o FindBugs e o PMD, pode ajudar a identificar vulnerabilidades potenciais em aplicações Java.
9. A execução de testes de segurança, como testes de penetração, é uma etapa importante no desenvolvimento de aplicações Java seguras, permitindo identificar e corrigir falhas de segurança antes do lançamento da aplicação.
10. O conhecimento de boas práticas de segurança, como evitar o uso de informações sensíveis em logs e mensagens de erro, é fundamental para garantir a segurança na programação com a linguagem Java.


