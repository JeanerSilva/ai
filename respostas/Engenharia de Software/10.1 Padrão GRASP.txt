Item do edital: 10.1 Padrão GRASP.    
 
1. Subtópico:
1. Definição e importância do Padrão GRASP.
Assertivas:
1. O Padrão GRASP é um conjunto de padrões de projeto que visa melhorar a qualidade do design de software.
2. O Padrão GRASP é importante porque fornece diretrizes claras para a criação de modelos de design flexíveis e de fácil manutenção.
3. O Padrão GRASP enfatiza a responsabilidade adequada dos objetos em um sistema, permitindo uma distribuição lógica e organizada das funcionalidades.
4. O Padrão GRASP é usado para identificar as responsabilidades dos objetos em um sistema e atribuí-las de maneira adequada.
5. O Padrão GRASP ajuda a aumentar a coesão e a reduzir o acoplamento entre os objetos de um sistema, melhorando assim a modularidade do código.
6. O Padrão GRASP divide as responsabilidades entre os objetos com base em critérios como expertise, informação e controle.
7. O Padrão GRASP ajuda a identificar quais objetos devem ser responsáveis por certas tarefas e quais interações são necessárias.
8. O Padrão GRASP promove o reuso de código e a separação de preocupações em diferentes objetos, tornando o sistema mais extensível.
9. O Padrão GRASP é um guia útil para desenvolvedores de software que desejam criar sistemas flexíveis e de fácil manutenção.
10. O entendimento e a aplicação correta do Padrão GRASP podem levar a um design de software mais eficiente e robusto.

2. Subtópico:
2. Princípios fundamentais do Padrão GRASP.
Assertivas:
1. O Padrão GRASP (General Responsibility Assignment Software Patterns) é um conjunto de princípios fundamentais utilizados no desenvolvimento de software.
2. O Padrão GRASP visa auxiliar na atribuição de responsabilidades adequadas aos objetos dentro de um sistema.
3. O Padrão GRASP tem como objetivo tornar o sistema mais flexível, reutilizável e de fácil manutenção.
4. O Padrão GRASP destaca a importância de identificar as responsabilidades necessárias aos objetos antes de definir suas interações.
5. O Padrão GRASP promove a coesão e o baixo acoplamento dos objetos dentro de um sistema.
6. O Padrão GRASP inclui princípios como Expert, Creator, Controller, Low Coupling e High Cohesion.
7. O princípio Expert, do Padrão GRASP, sugere que a responsabilidade por executar uma tarefa deve ser atribuída ao objeto que possui as informações necessárias para realizá-la.
8. O princípio Creator, do Padrão GRASP, indica que a criação de novos objetos deve ser atribuída ao objeto que tem a informação necessária para inicializar corretamente o novo objeto.
9. O princípio Controller, do Padrão GRASP, estabelece que a tarefa de controlar o fluxo de interações entre objetos deve ser atribuída a um objeto responsável por gerenciar esse fluxo.
10. O Padrão GRASP é amplamente utilizado na engenharia de software como uma abordagem eficiente para a atribuição de responsabilidades entre os objetos de um sistema.

3. Subtópico:
3. Aplicação prática do Padrão GRASP em desenvolvimento de software.
Assertivas:
1. O Padrão GRASP (General Responsibility Assignment Software Patterns) é uma coleção de padrões que ajudam a projetar arquiteturas de software com responsabilidades adequadas.
2. O Padrão GRASP visa identificar as classes responsáveis e suas interações em um sistema, tornando o design mais flexível e de fácil manutenção.
3. O Padrão GRASP define um conjunto de princípios que podem ser aplicados durante o desenvolvimento de software para melhorar a qualidade e a eficiência do sistema.
4. O Padrão GRASP reconhece que a atribuição de responsabilidades adequadas é essencial para garantir um sistema de software robusto.
5. Uma das técnicas utilizadas pelo Padrão GRASP é a atribuição de responsabilidade de informação, que envolve definir quais objetos em um sistema possuem a informação necessária para realizar uma determinada tarefa.
6. Outra técnica empregada pelo Padrão GRASP é a atribuição de responsabilidade especializada, na qual um objeto é projetado para desempenhar uma função específica no sistema.
7. O Padrão GRASP promove a utilização de classes de controle, que são responsáveis por coordenar as ações entre objetos e garantir a integridade do sistema.
8. O Padrão GRASP incentiva o uso de classes de serviços, que encapsulam operações relacionadas a uma entidade específica do sistema.
9. Ao aplicar o Padrão GRASP, é importante considerar a coesão entre as classes, ou seja, o grau de afinidade funcional entre os métodos e atributos de uma classe.
10. O Padrão GRASP enfatiza a importância do baixo acoplamento entre as classes, visando reduzir a dependência entre os objetos e tornar o sistema mais flexível e extensível.

4. Subtópico:
4. As diferentes categorias de padrões no GRASP: Criador, Especialista, Controlador, etc.
Assertivas:
1. O GRASP é um padrão de projeto que define diferentes categorias de padrões de design que ajudam a resolver problemas comuns na construção de software.
2. O padrão GRASP Criador é responsável por atribuir a responsabilidade de criação de objetos a uma classe ou objeto específico.
3. O padrão GRASP Especialista define que a responsabilidade deve ser atribuída ao objeto que possui as informações necessárias para executar uma determinada tarefa.
4. O padrão GRASP Controlador define que uma classe ou objeto deve ser responsável por receber e coordenar as requisições do usuário.
5. O padrão GRASP Pura Fabricação indica que uma classe ou objeto deve ser responsável apenas pela criação de objetos de outras classes, sem ter uma responsabilidade direta sobre o domínio do problema.
6. O padrão GRASP Indireção é responsável por reduzir o acoplamento entre classes, permitindo que uma classe intermediária manipule a comunicação entre outras classes.
7. O padrão GRASP Polimorfismo permite que um objeto possa executar diferentes comportamentos através de chamadas de métodos com a mesma interface.
8. O padrão GRASP Variação Protegida propõe que classes devem ser projetadas de forma a permitir a diversificação dos algoritmos ou regras de negócio, sem alterar a estrutura básica da classe.
9. O padrão GRASP Expert em Informação define que as responsabilidades devem ser atribuídas ao objeto que possui o maior conhecimento ou expertise para lidar com as informações necessárias.
10. O padrão GRASP Baixo Acoplamento e Alta Coesão preconiza que as classes devem ser projetadas de forma a terem poucas dependências entre si, facilitando a manutenção e extensibilidade do sistema.

5. Subtópico:
5. Relação entre o Padrão GRASP e os princípios SOLID.
Assertivas:
1. O Padrão GRASP (General Responsibility Assignment Software Principles) e os princípios SOLID são ferramentas utilizadas no desenvolvimento de software.
2. O Padrão GRASP ajuda a identificar e atribuir responsabilidades aos objetos em um sistema orientado a objetos.
3. Os princípios SOLID são diretrizes de design de software que visam promover a qualidade, a modularidade e a extensibilidade do código.
4. O Padrão GRASP fornece diretrizes para a identificação de padrões de design e a aplicação dos princípios SOLID.
5. Tanto o Padrão GRASP quanto os princípios SOLID visam melhorar a manutenibilidade e a compreensibilidade do código fonte. 
6. O Padrão GRASP define os conceitos de Controlador, Criador, Expert, Polimorfismo, Serviço, Criador Protetor, Maven e Informação Expert.
7. O princípio SOLID "Single Responsibility Principle" (Princípio da Responsabilidade Única) defende que uma classe deve ter apenas uma razão para ser modificada.
8. O princípio SOLID "Open-Closed Principle" (Princípio Aberto-Fechado) preconiza que classes devem ser abertas para extensão, mas fechadas para modificação.
9. O princípio SOLID "Liskov Substitution Principle" (Princípio da Substituição de Liskov) estabelece que objetos de uma classe derivada podem ser substituídos por objetos da classe base sem que o comportamento do programa seja alterado.
10. O princípio SOLID "Dependency Inversion Principle" (Princípio da Inversão de Dependências) sugere que módulos de alto nível não devem depender de módulos de baixo nível, mas sim de abstrações.

6. Subtópico:
6. Benefícios da utilização do Padrão GRASP na programação orientada a objetos.
Assertivas:
1. O Padrão GRASP é utilizado na programação orientada a objetos para ajudar na definição das responsabilidades das classes.
2. A utilização do Padrão GRASP auxilia na criação de um design de software que seja flexível e de fácil manutenção.
3. O Padrão GRASP permite uma maior coesão entre as classes do sistema, aumentando a clareza e a organização do código.
4. Ao utilizar o Padrão GRASP, é possível identificar e delegar as responsabilidades corretas para cada classe, evitando uma sobrecarga desnecessária.
5. O Padrão GRASP oferece diretrizes que podem ser aplicadas na análise e design de sistemas, garantindo uma maior qualidade do software resultante.
6. O uso do Padrão GRASP promove a reutilização de código, permitindo a criação de classes mais genéricas e com funcionalidades mais flexíveis.
7. A aplicação do Padrão GRASP facilita a identificação e separação das entidades do sistema, promovendo uma arquitetura mais modular e escalável.
8. A utilização do Padrão GRASP aumenta a capacidade de manutenção do sistema, uma vez que as responsabilidades estão mais bem definidas e distribuídas entre as classes.
9. O Padrão GRASP contribui para a redução de dependências entre as classes do sistema, promovendo um acoplamento mais baixo e uma maior independência entre os componentes.
10. A aplicação do Padrão GRASP pode resultar em um código mais legível e compreensível, facilitando a colaboração entre os membros da equipe de desenvolvimento.

7. Subtópico:
7. Desafios e limitações na implementação do Padrão GRASP.
Assertivas:
1. A implementação do Padrão GRASP pode apresentar desafios relacionados à complexidade das técnicas de design envolvidas.
2. A falta de familiaridade da equipe de desenvolvimento com os conceitos do Padrão GRASP pode limitar a sua implementação efetiva.
3. A adaptação do Padrão GRASP para atender a requisitos específicos de um projeto pode representar uma limitação na sua implementação.
4. Os desafios na identificação e aplicação correta dos padrões GRASP podem ser intensificados em projetos de grande escala.
5. Limitações na capacidade de comunicação entre os membros da equipe podem dificultar a implementação eficaz do Padrão GRASP.
6. A falta de tempo e recursos adequados para treinamento e capacitação da equipe pode limitar a implantação do Padrão GRASP.
7. Desafios na identificação e divisão correta das responsabilidades entre as classes do sistema podem ser enfrentados na implementação do Padrão GRASP.
8. A complexidade da estrutura do sistema ou da arquitetura existente pode representar uma limitação na implementação do Padrão GRASP.
9. A falta de documentação adequada dos requisitos e especificações do sistema pode dificultar a aplicação efetiva do Padrão GRASP.
10. Desafios na escolha e aplicação de padrões GRASP adequados podem surgir devido a requisitos de negócios específicos ou restrições tecnológicas.

8. Subtópico:
8. Estudo de caso: aplicando o padrão GRASP em projetos
Assertivas:
1. O padrão GRASP é uma abordagem de design de software que visa facilitar a criação de sistemas orientados a objetos.
2. O padrão GRASP oferece um conjunto de princípios e diretrizes que auxiliam no desenvolvimento de projetos de software.
3. O padrão GRASP destaca a importância da atribuição de responsabilidades claras e bem definidas aos objetos do sistema.
4. O padrão GRASP estabelece que o objeto responsável por uma determinada operação deve ser aquele com a informação necessária para executá-la.
5. O padrão GRASP sugere a utilização de um controlador para gerenciar a interação entre diferentes objetos do sistema.
6. O padrão GRASP incentiva o uso de classes especialistas, que possuem conhecimento e expertise em uma área específica do sistema.
7. O padrão GRASP preconiza a utilização de classes indiretas como intermediárias entre outras classes, facilitando a manutenção e reutilização do código.
8. O padrão GRASP enfatiza a importância da criação de interfaces claras e coesas entre os diferentes objetos do sistema.
9. O padrão GRASP propõe a utilização de classes polimórficas, capazes de se adaptar às diferentes situações do sistema.
10. O padrão GRASP busca a criação de um design flexível e de fácil manutenção, levando em consideração os princípios da orientação a objetos.


