Item do edital: 8. RESTful    
 
1. Subtópico:
1. Definição e princípios fundamentais do RESTful
Assertivas:
1. O RESTful é um estilo de arquitetura de software utilizado para desenvolver serviços web.
2. O RESTful baseia-se nos princípios do protocolo HTTP para a comunicação entre os clientes e os servidores.
3. Um dos princípios fundamentais do RESTful é a utilização de recursos identificados por um URI (Uniform Resource Identifier).
4. O RESTful utiliza métodos padrões do HTTP, como GET, POST, PUT e DELETE, para manipular recursos.
5. As operações realizadas pelo RESTful são stateless, ou seja, não possuem dependência de estado entre as requisições.
6. O RESTful permite a representação de recursos em diferentes formatos, como XML e JSON.
7. O RESTful promove a interoperabilidade entre diferentes sistemas, utilizando os padrões e princípios da web.
8. O RESTful é amplamente utilizado para desenvolvimento de APIs (Application Programming Interface) de serviços web.
9. O RESTful permite a utilização de padrões de segurança, como autenticação e autorização, para proteger os recursos.
10. Um dos princípios fundamentais do RESTful é a utilização de hypermedia como mecanismo de controle da aplicação.

2. Subtópico:
2. Métodos HTTP em RESTful (GET, POST, PUT, DELETE)
Assertivas:
1. O método HTTP GET é utilizado em requisições RESTful para obter informações de um recurso específico.
2. O método HTTP POST é utilizado em requisições RESTful para criar um novo recurso.
3. O método HTTP PUT é utilizado em requisições RESTful para atualizar as informações de um recurso específico.
4. O método HTTP DELETE é utilizado em requisições RESTful para remover um recurso específico.
5. Os métodos HTTP em RESTful (GET, POST, PUT, DELETE) são padronizados e amplamente utilizados em aplicações web.
6. O método HTTP GET não possui corpo na requisição e retorna as informações solicitadas em um formato definido.
7. O método HTTP POST envia dados no corpo da requisição para serem processados e armazenados como um novo recurso.
8. O método HTTP PUT envia dados no corpo da requisição para atualizar as informações de um recurso existente.
9. O método HTTP DELETE não possui corpo na requisição e remove permanentemente um recurso específico.
10. Os métodos HTTP em RESTful são independentes do protocolo de comunicação utilizado, e podem ser utilizados em aplicações web baseadas em HTTP, HTTPS, entre outros.

3. Subtópico:
3. Conceito de recursos em RESTful
Assertivas:
1. Em RESTful, recursos são unidades de informação que podem ser acessadas e manipuladas através de uma API.
2. Recursos em RESTful são representados por URLs (Uniform Resource Locators) que descrevem a localização do recurso na web.
3. Cada recurso em RESTful possui um conjunto de operações padrão, conhecidas como verbos HTTP, como GET, POST, PUT e DELETE.
4. Recursos em RESTful são geralmente relacionados a entidades do mundo real, como usuários, produtos ou pedidos.
5. Recursos em RESTful podem ser acessados por meio de diferentes formatos de dados, como XML ou JSON.
6. Através do conceito de recursos em RESTful, diferentes partes de uma aplicação web podem interagir e trocar informações de maneira independente.
7. Recursos em RESTful podem ter seus estados alterados por meio de requisições HTTP enviadas aos endpoints correspondentes.
8. A utilização de recursos em RESTful permite a criação de APIs mais flexíveis e escaláveis, facilitando a evolução e manutenção da aplicação.
9. Recursos em RESTful são identificados de forma única por suas URLs, permitindo que os clientes acessem e manipulem a informação correta.
10. Recursos em RESTful seguem o princípio de separação entre cliente e servidor, tornando a arquitetura mais robusta e distribuída.

4. Subtópico:
4. Estrutura e formatação de URLs em RESTful
Assertivas:
1. As URLs em RESTful seguem um padrão hierárquico para representar recursos e suas relações.
2. A estrutura de uma URL em RESTful geralmente é composta por um domínio, seguido de um caminho que representa o recurso e, opcionalmente, um identificador único.
3. O uso de palavras significativas nos nomes de recursos é uma prática recomendada para facilitar a compreensão da URL.
4. Em URLs RESTful, os parâmetros podem ser enviados diretamente na URL usando uma sintaxe específica, como por exemplo "?parametro1=valor1&parametro2=valor2".
5. Para acessar um subrecurso em RESTful, é comum utilizar uma URL aninhada ao recurso principal, separada por uma barra ("/").
6. As URLs em RESTful não devem conter informações que indiquem ações específicas, como "criar" ou "excluir", já que essas ações são representadas pelos métodos HTTP utilizados.
7. É recomendado evitar o uso de caracteres especiais, espaços ou letras maiúsculas nas URLs em RESTful, pois pode causar problemas em alguns servidores ou dificuldade de interpretação.
8. A formatação de URLs em RESTful deve ser consistente em todo o sistema, seguindo uma convenção definida pela equipe de desenvolvimento.
9. Para permitir a expansão de funcionalidades futuras, URLs em RESTful devem ser projetadas de maneira flexível e extensível.
10. Ao estruturar URLs em RESTful, deve-se considerar a capacidade de serem intuitivas e fáceis de lembrar para os usuários finais.

5. Subtópico:
5. Uso de status codes HTTP em RESTful
Assertivas:
1. Os status codes HTTP são utilizados em aplicações RESTful para indicar o resultado da requisição.
2. Existem cinco classes de status codes HTTP: informativos, de sucesso, de redirecionamento, de erro do cliente e de erro do servidor.
3. O status code HTTP 200 indica que a requisição foi bem sucedida.
4. O status code HTTP 201 indica que uma nova entidade foi criada.
5. O status code HTTP 302 indica um redirecionamento temporário para outra URL.
6. O status code HTTP 400 indica uma requisição inválida.
7. O status code HTTP 401 indica que é necessário autenticação para acessar o recurso.
8. O status code HTTP 404 indica que o recurso solicitado não foi encontrado.
9. O status code HTTP 500 indica um erro interno do servidor.
10. O status code HTTP 503 indica que o serviço está indisponível temporariamente.

6. Subtópico:
6. Diferenças entre SOAP e RESTful 
Assertivas:
1. SOAP é um protocolo de comunicação baseado em XML, enquanto o RESTful é um estilo de arquitetura para comunicação de serviços.
2. SOAP utiliza um formato estruturado e complexo para envio de mensagens, incluindo informações adicionais como headers e envelopes, ao contrário do RESTful que utiliza uma abordagem mais simples e leve.
3. SOAP é mais adequado para ambientes corporativos que requerem um alto nível de segurança e integridade dos dados, enquanto RESTful é mais flexível e adequado para aplicações web e dispositivos móveis.
4. SOAP tem suporte embutido para tratamento de erros, garantindo a entrega de mensagens mesmo em caso de falhas, enquanto no RESTful os erros são tratados por códigos HTTP.
5. SOAP exige uma descrição rígida e padronizada do serviço através de arquivos WSDL (Web Services Description Language), enquanto RESTful não requer uma descrição formal do serviço.
6. RESTful é baseado no estilo arquitetural REST (Representational State Transfer), que implica em um estado de transferência de recursos via solicitações e respostas HTTP.
7. As operações em SOAP são definidas como chamadas de procedimento remoto (RPC), enquanto em RESTful as operações correspondem aos métodos HTTP (GET, POST, PUT, DELETE).
8. A codificação das mensagens em SOAP é um pouco mais complicada, exigindo conhecimento de XML, enquanto em RESTful a codificação é mais simples, utilizando formatos como JSON ou XML.
9. SOAP é compatível com diversos protocolos de transporte como HTTP, SMTP e TCP, enquanto RESTful é mais comumente utilizado com o protocolo HTTP.
10. SOAP é amplamente utilizado em sistemas legados e em integrações entre sistemas heterogêneos, enquanto RESTful é a escolha mais comum para projetos baseados em tecnologias modernas e em arquiteturas orientadas a serviços.

7. Subtópico:
7. Segurança na API Rest: autenticação e autorização 
Assertivas:
1. A autenticação é um processo necessário em uma API Rest para validar a identidade do usuário ou aplicação solicitante.
2. A autorização é utilizada em uma API Rest para definir as permissões de acesso a recursos específicos.
3. A autenticação e a autorização são essenciais para garantir a segurança em uma API Rest.
4. Existem diferentes mecanismos de autenticação suportados em uma API Rest, como OAuth2 e JWT.
5. A autenticação baseada em token é amplamente utilizada em APIs Rest para garantir a segurança da comunicação entre clientes e servidores.
6. A autenticação baseada em token envolve a geração de um token único para cada usuário ou aplicação que solicita acesso à API Rest.
7. A autenticação em duas etapas é um método adicional de segurança que pode ser implementado em uma API Rest para garantir uma camada extra de proteção.
8. A autorização baseada em papéis ou permissões é comumente adotada em APIs Rest para definir o nível de acesso de cada usuário ou aplicação aos recursos disponíveis.
9. A utilização de tokens de acesso com tempo de vida limitado é uma prática recomendada de segurança em APIs Rest.
10. A API Rest deve disponibilizar mecanismos para a revogação ou renovação de tokens de acesso, visando garantir a segurança contínua da aplicação.

8. Subtópico:
8. Representações de dados em REST (JSON, XML)
Assertivas:
1. JSON e XML são duas das principais representações de dados em REST.
2. JSON (JavaScript Object Notation) é um formato leve e fácil de ler e escrever.
3. XML (Extensible Markup Language) é uma linguagem de marcação que permite a representação de dados de forma estruturada.
4. Ambos JSON e XML são amplamente utilizados na comunicação entre sistemas através da arquitetura REST.
5. Tanto JSON quanto XML podem ser usados para representar dados complexos, como listas ou objetos aninhados.
6. JSON é mais comumente usado em aplicações web, especialmente em serviços de API REST.
7. XML é frequentemente usado em ambientes corporativos, especialmente em trocas de mensagens entre sistemas diferentes.
8. JSON é mais fácil de ser lido e interpretado por humanos, devido à sua sintaxe simplificada.
9. XML oferece suporte a recursos avançados, como validação de esquemas e transformações XSLT.
10. Tanto JSON quanto XML são formatos interoperáveis e podem ser lidos e processados por diversas linguagens de programação.

9. Subtópico:
9. Implementação prática de uma API Rest: exemplos e estudos de caso.
Assertivas:
1. A implementação prática de uma API Rest é essencial para a comunicação entre sistemas e aplicativos.
2. A API Rest é baseada nos princípios do protocolo HTTP, permitindo a transferência de dados de forma padronizada.
3. A API Rest utiliza métodos HTTP, como GET, POST, PUT e DELETE, para operações de leitura, criação, atualização e remoção de dados.
4. Exemplos práticos de implementação de uma API Rest incluem o desenvolvimento de uma API para um aplicativo móvel de delivery de alimentos.
5. Estudos de caso de implementação de uma API Rest podem abranger desde empresas de grande porte, como o Facebook, até startups em ascensão.
6. A implementação de uma API Rest requer a definição clara de recursos e endpoints, para permitir o acesso e manipulação dos dados.
7. A utilização do formato JSON é comum na implementação de uma API Rest, facilitando a interoperabilidade entre sistemas.
8. A implementação de uma API Rest pode ser feita utilizando diferentes tecnologias, como Node.js, Ruby on Rails, Django, entre outras.
9. Um dos benefícios da implementação de uma API Rest é a facilidade de integração com diferentes plataformas e linguagens de programação.
10. A implementação de uma API Rest está em constante evolução, acompanhando as demandas e inovações tecnológicas do mercado.

10. Subtópico:
10. Testes unitários e integração contínua com APIs Rest
Assertivas:
1. Os testes unitários são utilizados para verificar o comportamento individual de cada unidade de código em uma API Rest.
2. A utilização de testes unitários em APIs Rest é uma prática recomendada para garantir a qualidade e a robustez do sistema.
3. Através dos testes unitários em APIs Rest, é possível identificar e corrigir erros em um estágio inicial do desenvolvimento.
4. A integração contínua é uma estratégia que visa automatizar o processo de execução de testes unitários em APIs Rest.
5. Através da integração contínua, é possível realizar os testes unitários de forma automatizada, agilizando o ciclo de desenvolvimento.
6. A utilização de integração contínua em APIs Rest permite uma maior frequência de testes e a detecção precoce de problemas.
7. A integração contínua com testes unitários em APIs Rest contribui para a estabilidade e confiabilidade do sistema como um todo.
8. Com a utilização de testes unitários em API Rest, é possível garantir a integridade dos dados enviados e recebidos através da API.
9. Os testes unitários em APIs Rest possibilitam a verificação do correto funcionamento de endpoints e a validação dos dados retornados.
10. A adoção de testes unitários e integração contínua em APIs Rest é fundamental para garantir a qualidade do software e a satisfação dos usuários.


