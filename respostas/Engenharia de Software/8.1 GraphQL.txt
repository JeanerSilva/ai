Pergunta Original: 8.1 GraphQL.    
 
1. Subtópico:
1. Conceito e fundamentos do GraphQL
Assertivas:
1) A linguagem GraphQL foi desenvolvida pelo Facebook em 2012 como uma alternativa aos tradicionais métodos de acesso a dados.
2) O GraphQL permite que os clientes solicitem exatamente os dados que desejam, evitando a transferência de informações desnecessárias.
3) O GraphQL utiliza um único endpoint para todas as consultas, em oposição a abordagens tradicionais que possuem endpoints específicos para cada recurso.
4) O GraphQL utiliza um esquema forte para definir os tipos de dados disponíveis e as operações permitidas.
5) Os tipos de dados no GraphQL são compostos por campos com tipos específicos, permitindo uma modelagem flexível e ampla personalização.
6) O GraphQL não possui suporte nativo a autenticação e autorização, significando que esses aspectos devem ser implementados separadamente.
7) O GraphQL permite a execução de múltiplas consultas em uma única chamada, o que otimiza o desempenho e o consumo de recursos.
8) O GraphQL possui suporte para mutações, que são operações de escrita que permitem a criação, atualização e exclusão de recursos.
9) As consultas no GraphQL podem ser facilmente aninhadas, permitindo recuperar informações relacionadas de forma eficiente.
10) O GraphQL possui suporte nativo a subscrições, o que permite que os clientes recebam notificações em tempo real quando os dados são atualizados.

2. Subtópico:
2. Diferenças entre GraphQL e REST
Assertivas:
1. GraphQL é uma linguagem de consulta de dados utilizada para a comunicação entre cliente e servidor, enquanto REST é uma arquitetura para projetar serviços web.
2. GraphQL permite que os clientes solicitem especificamente os dados necessários, enquanto REST retorna todos os dados disponíveis no endpoint.
3. Em GraphQL, não há necessidade de múltiplas chamadas para obter diferentes conjuntos de dados, como ocorre em REST.
4. REST utiliza métodos HTTP como GET, POST, PUT e DELETE para operações em recursos, enquanto em GraphQL é usado apenas o método POST para consulta e mutação.
5. Em GraphQL, a definição de tipos de dados e esquemas permite uma melhor documentação e integração entre os sistemas.
6. Em REST, cada recurso é representado por uma URL única, enquanto em GraphQL não há uma correspondência direta entre as URLs e os recursos.
7. Em GraphQL, a estrutura dos dados é definida pelo cliente, o que permite uma maior flexibilidade na obtenção exata dos dados necessários.
8. REST é mais adequado para APIs simples e com baixa complexidade, enquanto GraphQL é mais adequado para casos em que a eficiência e a precisão na obtenção de dados são fundamentais.
9. Na modelagem de APIs em GraphQL, é possível usar diretivas para definir permissões e segurança, o que dá maior controle sobre as operações permitidas.
10. REST é baseado em um conjunto fixo de endpoints, enquanto em GraphQL os endpoints são dinâmicos e podem evoluir de acordo com as necessidades do cliente.

3. Subtópico:
3. Estrutura de uma Query no GraphQL
Assertivas:
1) Uma Query no GraphQL é uma forma de solicitar dados específicos de um servidor.
2) A estrutura básica de uma Query no GraphQL começa com a palavra-chave "query" seguida das chaves "{}".
3) Dentro das chaves, é possível definir os campos que se deseja obter usando a notação de nome seguido de dois pontos, sendo o nome do campo e seus subcampos.
4) Pode-se adicionar parâmetros a uma Query no GraphQL para filtrar os resultados desejados.
5) Para fazer referência a um campo específico dentro de uma Query, utiliza-se a notação de ponto.
6) A estrutura de uma Query no GraphQL permite a busca de dados em profundidades diferentes, retornando informações relacionadas ou aninhadas.
7) Uma Query no GraphQL pode ser escrita em uma única linha ou com quebras de linha para melhor legibilidade.
8) É possível renomear um campo dentro de uma Query no GraphQL utilizando a palavra-chave "as".
9) Dentro de uma Query no GraphQL, é possível adicionar diretivas para controlar o comportamento da requisição, como por exemplo, especificar que um campo seja aplicado apenas se determinada condição for verdadeira.
10) A estrutura de uma Query no GraphQL é flexível, permitindo que seja construída de acordo com as necessidades do desenvolvedor ou aplicação.

4. Subtópico:
4. Mutations no GraphQL: conceito e aplicação
Assertivas:
1. As mutations no GraphQL são utilizadas para realizar operações de escrita ou modificação de dados em um servidor GraphQL.
2. As mutations no GraphQL permitem que os clientes enviem operações de criação, atualização ou exclusão de dados para o servidor.
3. As mutations no GraphQL são definidas pelo desenvolvedor e especificam quais campos podem ser modificados e quais devem ser retornados como resultado da operação.
4. As mutações no GraphQL podem ser executadas em grupo, permitindo que várias operações de modificação sejam realizadas em uma única requisição.
5. Ao contrário das queries, as mutations no GraphQL não são apenas operações de leitura, mas também podem modificar o estado dos dados no servidor.
6. As mutations no GraphQL são declaradas na seção "mutation" do schema GraphQL, onde são definidos seus argumentos, nomes e tipos de retorno.
7. Ao executar uma mutation no GraphQL, pode-se especificar os campos que se deseja retornar como resultado da operação, garantindo eficiência na transferência de dados.
8. As mutations no GraphQL podem ser validadas e testadas individualmente, facilitando a depuração e garantindo a integridade das operações de modificação de dados.
9. Uma vantagem das mutations no GraphQL é que elas fornecem um controle mais granular sobre as permissões de acesso e a lógica de negócio para operações de escrita.
10. As mutations no GraphQL facilitam o desenvolvimento de APIs flexíveis e eficientes, pois permitem que as operações de escrita sejam personalizadas de acordo com as necessidades do cliente.

5. Subtópico:
5. Tipos de dados suportados pelo GraphQL
Assertivas:
1. O GraphQL suporta tipos de dados primitivos, como String, Int, Float, Boolean e ID.
2. O GraphQL permite a definição de tipos de dados personalizados, também conhecidos como tipos escalares.
3. O GraphQL suporta a criação de tipos de dados complexos, como objetos, listas e interfaces.
4. O GraphQL permite a criação de tipos de dados enumerados, que representam um conjunto limitado de valores.
5. O GraphQL oferece suporte a tipos de dados personalizados, chamados de Union Types, que podem representar mais de um tipo de dado.
6. O GraphQL permite a definição de tipos de dados não nulos, que garantem a presença de um valor.
7. O GraphQL suporta a criação de tipos de dados personalizados, chamados de input types, que são usados para representar dados enviados para uma operação de escrita.
8. O GraphQL permite a definição de tipos de dados personalizados, chamados de scalar types, que representam dados específicos.
9. O GraphQL permite a criação de tipos de dados escaláveis, que podem ser estendidos com campos adicionais em diferentes partes do sistema.
10. O GraphQL suporta a criação de tipos de dados personalizados, chamados de interface types, que definem um conjunto comum de campos que outras entidades podem implementar.

6. Subtópico:
6. Resolvers em GraphQL: definição e uso 
Assertivas:
1. Em GraphQL, os resolvers são responsáveis por recuperar os dados solicitados pelo usuário.
2. Os resolvers em GraphQL são definidos para cada campo do esquema.
3. Em um resolver, é possível especificar a fonte dos dados, como um banco de dados ou uma API externa.
4. Os resolvers em GraphQL podem conter lógica de negócio para manipular e transformar os dados antes de serem retornados.
5. Cada resolver em GraphQL é chamado quando o campo correspondente é solicitado na consulta.
6. Os resolvers em GraphQL podem ser escritos em diferentes linguagens de programação, como JavaScript, Python ou Java.
7. Em um resolver, é possível realizar validações e checagens de segurança antes de retornar os dados solicitados.
8. Os resolvers em GraphQL podem fazer requisições HTTP para obter dados de sistemas externos.
9. Em um resolver, é possível fazer operações complexas, como agregações ou consultas com filtros avançados.
10. Os resolvers em GraphQL permitem a criação de consultas flexíveis, onde apenas os dados solicitados pelo usuário são retornados.

7. Subtópico:
7. Schema Definition Language (SDL) em GraphQL 
Assertivas:
1. O SDL (Schema Definition Language) é uma linguagem declarativa utilizada para definir a estrutura de um schema em GraphQL.
2. O SDL permite definir quais são os tipos de dados disponíveis, juntamente com os campos e suas respectivas características.
3. Com o uso do SDL, é possível estabelecer a relação entre diferentes tipos de dados no schema GraphQL.
4. Ao definir o schema utilizando SDL, é possível especificar os campos obrigatórios e opcionais de um tipo de dado.
5. O SDL permite especificar os argumentos que uma determinada field aceita em uma query ou mutation.
6. Com SDL, é possível definir enumerações para limitar as opções de valores que um determinado campo de um tipo de dado pode aceitar.
7. Utilizando SDL, é possível definir interfaces, permitindo a criação e implementação de tipos de dados que compartilham características comuns.
8. O SDL também permite a criação de tipos escalares personalizados, para representar tipos de dados específicos.
9. Com o uso do SDL, é possível estabelecer relacionamentos um-para-um, um-para-muitos e muitos-para-muitos entre tipos de dados no schema GraphQL.
10. Utilizando o SDL, é possível criar directives personalizados para definir regras e comportamentos específicos para campos e tipos de dados no schema GraphQL.

8. Subtópico:
8. Introspection no GraphQL: conceito e utilidade 
Assertivas:
1) A introspecção no GraphQL é uma funcionalidade que permite aos desenvolvedores consultar e explorar a estrutura de um esquema GraphQL.
2) Através da introspecção, é possível obter informações sobre os tipos de dados, campos, interfaces, argumentos e outras características de um esquema GraphQL.
3) A introspecção no GraphQL é útil no processo de desenvolvimento, pois fornece uma documentação atualizada e em tempo real do esquema GraphQL.
4) Com a introspecção, os desenvolvedores podem descobrir quais operações são possíveis em um esquema GraphQL e quais argumentos são necessários para cada uma dessas operações.
5) A funcionalidade de introspecção no GraphQL permite a validação dos dados enviados e recebidos pela API, garantindo a integridade das informações.
6) A introspecção também facilita a implementação de ferramentas de autocompletar e sugestões de campo em clientes GraphQL.
7) Utilizando a introspecção, é possível criar consultas dinâmicas que se adaptam às mudanças no esquema GraphQL sem a necessidade de alterar o código-fonte do cliente.
8) A introspecção no GraphQL é compatível com várias linguagens de programação, o que facilita sua utilização em diferentes ambientes de desenvolvimento.
9) Por meio da introspecção, é possível realizar testes automatizados para garantir que uma API GraphQL esteja funcionando corretamente.
10) A introspecção no GraphQL é uma característica essencial para a criação de ferramentas de desenvolvimento eficientes e para facilitar a colaboração entre equipes de desenvolvedores.

9. Subtópico:
9. Implementação do Apollo Server para o uso do GraphQl.
Assertivas:
1. O Apollo Server permite implementar facilmente um servidor GraphQL em projetos web.
2. A implementação do Apollo Server permite criar APIs robustas e flexíveis utilizando a linguagem de consulta GraphQL.
3. O Apollo Server suporta não apenas Node.js, mas também integrações com várias outras tecnologias.
4. A implementação do Apollo Server facilita a criação de resolvers, que são responsáveis por resolver as queries e mutations do GraphQL.
5. O Apollo Server oferece recursos avançados, como caching, monitoramento e escalonamento automático.
6. O Apollo Server permite a definição de esquemas GraphQL personalizados para atender às necessidades específicas do projeto.
7. A implementação do Apollo Server é altamente customizável, possibilitando a adição de plugins e extensões.
8. O Apollo Server suporta o uso de middlewares para adicionar funcionalidades extras às resolvers.
9. A implementação do Apollo Server facilita a validação e autenticação de requisições GraphQL.
10. O Apollo Server é amplamente utilizado pela comunidade de desenvolvimento web devido à sua facilidade de uso e poderosas funcionalidades.

10. Subtópico:
10. Segurança em aplicações com o uso de GraphQl: autenticação, autorização, proteção contra ataques DDOS.
Assertivas:
1. A autenticação em aplicações com o uso de GraphQL é importante para garantir a identificação dos usuários.
2. A autorização é fundamental em aplicações com o uso de GraphQL para controlar o acesso dos usuários a diferentes recursos.
3. A proteção contra ataques de negação de serviço distribuído (DDoS) é crucial em aplicações com o uso de GraphQL para garantir a disponibilidade do serviço.
4. A adoção de medidas de segurança em aplicações GraphQL, como sanitização de entradas e validação de dados, contribui para prevenir ataques de injeção de código malicioso.
5. O uso de tokens de acesso (access tokens) é uma prática recomendada em aplicações com o uso de GraphQL para realizar a autenticação e autorização dos usuários.
6. Implementar limites de consulta (query limits) é uma estratégia comumente adotada em aplicações com o uso de GraphQL para mitigar ataques de exaustão de recursos.
7. A utilização de HTTPS (HTTP seguro) em aplicações com o uso de GraphQL é essencial para proteger a comunicação entre os clientes e o servidor.
8. A realização de testes de penetração (pentests) é uma atividade importante em aplicações com o uso de GraphQL para identificar possíveis vulnerabilidades e falhas de segurança.
9. A criptografia de dados sensíveis é uma medida de segurança fundamental em aplicações com o uso de GraphQL para garantir a confidencialidade das informações transmitidas.
10. Adotar uma política de gestão de chaves e certificados é crucial em aplicações com o uso de GraphQL para garantir a segurança e integridade dos dados transmitidos.


