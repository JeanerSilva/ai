Pergunta Original: 5.4 modelo cliente-servidor   
 
1. Subtópico:
1. Definição e características do modelo cliente-servidor
Assertivas:
1. O modelo cliente-servidor é um paradigma de computação distribuída em que as tarefas são divididas entre computadores chamados de clientes e servidores.

2. No modelo cliente-servidor, os clientes solicitam serviços aos servidores, que fornecem as respostas correspondentes.

3. No modelo cliente-servidor, a comunicação entre clientes e servidores é estabelecida através de protocolos de rede, como o TCP/IP.

4. No modelo cliente-servidor, os clientes possuem interfaces de usuário interativas, enquanto os servidores oferecem recursos e serviços para atender às solicitações dos clientes.

5. O modelo cliente-servidor permite uma arquitetura flexível e escalável para o desenvolvimento de sistemas distribuídos.

6. No modelo cliente-servidor, os servidores são responsáveis ​​por armazenar e gerenciar dados, enquanto os clientes executam as operações de processamento.

7. O modelo cliente-servidor possibilita o compartilhamento de recursos, como impressoras, arquivos e bancos de dados, entre os clientes conectados.

8. O modelo cliente-servidor permite a divisão de tarefas e a distribuição da carga de trabalho entre os servidores, melhorando o desempenho e a eficiência do sistema.

9. No modelo cliente-servidor, os servidores são implementados de forma mais robusta e confiável, garantindo a disponibilidade e a segurança dos recursos oferecidos.

10. O modelo cliente-servidor é amplamente utilizado em aplicações web, como sites e serviços online, assim como em sistemas corporativos que demandam a interação entre diferentes componentes de um sistema distribuído.

2. Subtópico:
2. Diferenças entre o modelo cliente-servidor e o modelo peer-to-peer
Assertivas:
1. No modelo cliente-servidor, o servidor é responsável por fornecer serviços e recursos para os clientes, enquanto no modelo peer-to-peer, todos os dispositivos podem funcionar tanto como cliente quanto como servidor.
2. No modelo cliente-servidor, a arquitetura é centralizada, com um servidor poderoso que controla e gerencia todas as comunicações, enquanto no modelo peer-to-peer, não há um servidor central e todas as comunicações ocorrem entre pares.
3. O modelo cliente-servidor é frequentemente utilizado em ambientes empresariais, onde há necessidade de um controle rígido e centralizado dos recursos, enquanto o modelo peer-to-peer é comumente encontrado em redes domésticas ou colaborativas.
4. No modelo cliente-servidor, a disponibilidade dos serviços depende da disponibilidade do servidor central, enquanto no modelo peer-to-peer os recursos podem ser disponibilizados por qualquer dispositivo na rede.
5. O modelo cliente-servidor é mais adequado para aplicações que requerem alta segurança e confiabilidade, já que o servidor central pode implementar mecanismos de controle e autenticação mais rigorosos do que no modelo peer-to-peer.
6. No modelo cliente-servidor, as atualizações e manutenções são centralizadas no servidor, necessitando de menos intervenções nos dispositivos clientes, enquanto no modelo peer-to-peer as atualizações podem ser realizadas individualmente em cada dispositivo.
7. O modelo cliente-servidor é mais escalável, permitindo um maior número de conexões simultâneas, enquanto o modelo peer-to-peer pode apresentar limitações em termos de escalabilidade quando há um grande número de dispositivos na rede.
8. A latência no modelo cliente-servidor é menor, pois as requisições são enviadas diretamente ao servidor central, enquanto no modelo peer-to-peer cada requisição precisa ser roteada pelos dispositivos intermediários antes de chegar ao destino.
9. No modelo cliente-servidor, a responsabilidade pela segurança e proteção dos dados é centralizada no servidor, enquanto no modelo peer-to-peer cada dispositivo é responsável por sua própria segurança.
10. O modelo cliente-servidor oferece maior controle e flexibilidade na administração dos recursos de rede, permitindo a implementação de políticas de gerenciamento e monitoramento mais eficazes, ao contrário do modelo peer-to-peer que oferece menos controle centralizado.

3. Subtópico:
3. Tipos de arquitetura cliente-servidor: 2-tier, 3-tier e n-tier
Assertivas:
1. Na arquitetura cliente-servidor 2-tier, a lógica de negócios é dividida entre o cliente e o servidor de banco de dados.
2. A arquitetura cliente-servidor 3-tier é caracterizada por ter três camadas distintas: a camada de apresentação, a camada de negócios e a camada de dados.
3. Na arquitetura cliente-servidor 2-tier, a camada de apresentação e a camada de negócios são combinadas em uma única camada.
4. A arquitetura cliente-servidor 3-tier é utilizada para separar responsabilidades e facilitar a manutenção do sistema.
5. Na arquitetura cliente-servidor 3-tier, a camada de apresentação é responsável pela interação com o usuário.
6. A arquitetura cliente-servidor n-tier é uma evolução da arquitetura 3-tier, permitindo a adição de mais camadas conforme a necessidade do sistema.
7. Na arquitetura cliente-servidor n-tier, cada camada possui sua própria responsabilidade e funcionalidade específica.
8. A arquitetura cliente-servidor n-tier permite melhor escalabilidade, pois é possível adicionar ou remover camadas conforme a demanda.
9. Na arquitetura cliente-servidor 2-tier, a comunicação entre o cliente e o servidor ocorre de forma direta.
10. A arquitetura cliente-servidor n-tier é amplamente utilizada em sistemas distribuídos e aplicações web de grande porte.

4. Subtópico:
4. Funções do servidor no modelo cliente-servidor
Assertivas:
1. No modelo cliente-servidor, o servidor é responsável por fornecer recursos e serviços aos clientes.
2. O servidor centraliza as funcionalidades e dados das aplicações, permitindo a compartilhamento de recursos entre os clientes.
3. O servidor tem a capacidade de processar solicitações e executar ações em nome dos clientes.
4. O servidor é responsável pela gestão dos acessos e permissões dos clientes aos recursos disponíveis.
5. O servidor pode ser físico, virtual ou em nuvem, dependendo da arquitetura adotada.
6. O servidor atua como ponto central de controle e coordenação das operações realizadas pelos clientes.
7. No modelo cliente-servidor, os servidores podem ser dedicados a funções específicas, como servidores de arquivos, servidores web ou servidores de banco de dados.
8. Os servidores no modelo cliente-servidor podem ser escalonados horizontalmente, permitindo que novos servidores sejam adicionados para lidar com um aumento na demanda.
9. O servidor fornece uma interface de programação (API) para que os clientes possam solicitar e consumir os recursos disponíveis.
10. O servidor no modelo cliente-servidor garante a integridade e segurança dos dados e recursos compartilhados.

5. Subtópico:
5. Funções do cliente no modelo cliente-servidor
Assertivas:
1. No modelo cliente-servidor, o cliente é responsável por enviar requisições de serviços ao servidor.
2. O cliente é responsável por tratar as respostas recebidas do servidor.
3. O cliente tem a função de processar e exibir os resultados obtidos a partir das respostas recebidas do servidor.
4. O cliente é encarregado de gerenciar a interface com o usuário, como a interação por meio de telas ou dispositivos periféricos.
5. O cliente é responsável por garantir a segurança na transmissão dos dados entre o cliente e o servidor.

6. No modelo cliente-servidor, o cliente pode utilizar diferentes protocolos de comunicação para interagir com o servidor, como HTTP, FTP ou SMTP.
7. O cliente pode solicitar diferentes serviços ao servidor, como acesso a bancos de dados, envio de e-mails ou download de arquivos.
8. O cliente pode ser uma aplicação instalada localmente no dispositivo do usuário, como um programa de computador, ou pode ser uma aplicação web acessada por meio de um navegador.
9. O cliente pode ser desenvolvido em diferentes linguagens de programação, de acordo com as necessidades do projeto.
10. As funções do cliente no modelo cliente-servidor podem variar de acordo com a arquitetura adotada, as características do sistema operacional e os requisitos da aplicação específica.

6. Subtópico:
6. Protocolos de comunicação em um ambiente cliente-servidor 
Assertivas:
1. O protocolo HTTP é amplamente utilizado em ambientes cliente-servidor para transferência de documentos e dados na web.
2. O protocolo SMTP é utilizado para envio de e-mails em ambientes cliente-servidor.
3. O protocolo FTP é utilizado para transferência de arquivos em ambientes cliente-servidor.
4. O protocolo DNS é utilizado para a resolução de nomes em ambientes cliente-servidor.
5. O protocolo SSH é utilizado para acesso remoto seguro em ambientes cliente-servidor.
6. O protocolo POP3 é utilizado para receber e-mails em ambientes cliente-servidor.
7. O protocolo IMAP é utilizado para acessar e-mails em ambientes cliente-servidor de forma mais avançada.
8. O protocolo SNMP é utilizado para monitoramento e gerenciamento de dispositivos em ambientes cliente-servidor.
9. O protocolo DHCP é utilizado para atribuição automática de endereços IP em ambientes cliente-servidor.
10. O protocolo LDAP é utilizado para acesso a diretórios de serviços em ambientes cliente-servidor.

7. Subtópico:
7. Segurança na arquitetura cliente-servidor: autenticação, autorização e criptografia 
Assertivas:
1. A segurança na arquitetura cliente-servidor inclui mecanismos de autenticação para verificar a identidade dos usuários.
2. A autorização na arquitetura cliente-servidor é responsável por controlar o acesso dos usuários às diversas funcionalidades do sistema.
3. A criptografia é um importante recurso de segurança utilizado na arquitetura cliente-servidor para proteger a comunicação entre os componentes.
4. A autenticação na arquitetura cliente-servidor é essencial para prevenir o acesso não autorizado aos recursos do sistema.
5. A autorização na arquitetura cliente-servidor determina os privilégios de cada usuário em relação às ações que eles podem realizar.
6. A criptografia garante que as informações transmitidas na arquitetura cliente-servidor permaneçam confidenciais e inacessíveis a terceiros.
7. A segurança na arquitetura cliente-servidor envolve o uso de protocolos de segurança, como SSL/TLS, para garantir a integridade e a confidencialidade dos dados.
8. A autenticação na arquitetura cliente-servidor pode ser realizada por meio de diferentes métodos, como senhas, biometria e certificados digitais.
9. A autorização na arquitetura cliente-servidor permite definir níveis de acesso diferentes para usuários com base em suas funções e responsabilidades.
10. A criptografia na arquitetura cliente-servidor pode ser aplicada tanto no tráfego de dados como no armazenamento, protegendo as informações em todas as etapas do processamento.

8. Subtópico:
8. Vantagens e desvantagens do uso da arquitetura cliente-servidor 
Assertivas:
1. A arquitetura cliente-servidor permite a separação das responsabilidades entre o cliente e o servidor, facilitando a manutenção e atualização de cada um individualmente.
2. Uma das vantagens da arquitetura cliente-servidor é a possibilidade de escalabilidade, permitindo a adição de mais servidores para atender ao aumento da demanda dos clientes.
3. O uso da arquitetura cliente-servidor possibilita o compartilhamento de recursos, como banco de dados e periféricos, entre os clientes conectados ao mesmo servidor.
4. A arquitetura cliente-servidor facilita a integração de diferentes tecnologias, já que o cliente comunica-se com o servidor por meio de protocolos padronizados.
5. Uma desvantagem do uso da arquitetura cliente-servidor é a dependência de uma conexão de rede estável entre o cliente e o servidor para garantir o funcionamento adequado do sistema.
6. A complexidade do desenvolvimento e manutenção de uma aplicação cliente-servidor pode ser considerada uma desvantagem, especialmente em projetos de grande porte.
7. Uma vantagem da arquitetura cliente-servidor é a capacidade de distribuir a carga de processamento entre o cliente e o servidor, melhorando o desempenho e a resposta do sistema.
8. A separação das responsabilidades entre o cliente e o servidor na arquitetura cliente-servidor facilita a implementação de atualizações e correções de bugs em cada componente separadamente.
9. A arquitetura cliente-servidor é amplamente utilizada em aplicações web, devido à sua capacidade de lidar com múltiplos clientes simultaneamente.
10. Uma desvantagem da arquitetura cliente-servidor é que ela requer recursos de hardware e software mais robustos para suportar o processamento e armazenamento centralizado no servidor.

9. Subtópico:
9. Implementação
Assertivas:
1. A implementação consiste na fase de execução de um projeto ou plano previamente elaborado.
2. A implementação eficaz requer uma boa gestão dos recursos disponíveis.
3. A implementação adequada de políticas públicas é fundamental para o desenvolvimento social de um país.
4. A implementação de boas práticas no ambiente corporativo pode contribuir para o aumento da produtividade e do lucro.
5. A implementação de medidas de sustentabilidade é importante para minimizar os impactos ambientais negativos.
6. A implementação de tecnologias avançadas pode impulsionar o desenvolvimento de uma organização.
7. A implementação de um sistema de gestão da qualidade requer o envolvimento de todos os colaboradores.
8. A implementação de processos de melhoria contínua pode ajudar a otimizar a eficiência operacional de uma empresa.
9. A implementação de políticas de diversidade e inclusão promove a igualdade de oportunidades no ambiente de trabalho.
10. A implementação de projetos educacionais pode contribuir para o desenvolvimento intelectual e social de uma comunidade.


