Pergunta Original: 12.9 Java- orientação a objeto   
 
1. Subtópico:
1. Conceitos fundamentais de Orientação a Objetos em Java
Assertivas:
1. A orientação a objetos em Java é baseada nos conceitos de encapsulamento, herança e polimorfismo.
2. A classe é a estrutura fundamental da orientação a objetos em Java, definindo os atributos e comportamentos de um objeto.
3. Um objeto em Java é uma instância de uma classe, contendo características específicas definidas pela classe.
4. O encapsulamento em Java permite controlar o acesso aos membros de uma classe, utilizando modificadores de acesso como "public", "private" e "protected".
5. A herança em Java permite criar classes que herdam atributos e métodos de outras classes, possibilitando a reutilização de código.
6. O polimorfismo em Java permite que objetos de diferentes classes possam ser tratados genericamente como objetos de uma mesma classe pai.
7. Java possui o conceito de interfaces, que definem um conjunto de métodos abstratos que podem ser implementados por classes concretas.
8. O polimorfismo em Java pode ser alcançado através do uso de classes abstratas e interfaces.
9. A palavra-chave "super" em Java permite chamar o construtor da classe pai dentro de um construtor de uma classe filha.
10. A palavra-chave "this" em Java é utilizada para referenciar o objeto atual (instância da classe) dentro de seus próprios métodos e construtores.

2. Subtópico:
2. Classes e Objetos em Java: Definição, Criação e Utilização
Assertivas:
1. Na programação orientada a objetos, classes são estruturas que representam objetos do mundo real, definindo seus atributos e comportamentos.
2. Em Java, a criação de objetos é feita a partir da instância de uma classe, utilizando o operador "new".
3. A palavra-chave "class" é utilizada para declarar a definição de uma classe em Java.
4. Os objetos criados a partir de uma classe possuem características próprias e podem ter seu estado alterado através dos atributos.
5. É possível criar vários objetos a partir de uma mesma classe, cada um com suas próprias características e estado.
6. Os objetos são criados em tempo de execução, quando o programa aloca memória para eles.
7. As classes em Java podem herdar características de outras classes através do mecanismo de herança.
8. Através da herança, é possível criar subclasses que extendem a funcionalidade de uma classe pai.
9. A partir de um objeto, é possível invocar métodos definidos em sua classe, executando determinadas ações.
10. A utilização de classes e objetos em Java é fundamental para a estruturação e organização de programas complexos, facilitando o desenvolvimento e a manutenção do código.

3. Subtópico:
3. Herança e Polimorfismo em Java
Assertivas:
1. O conceito de herança em Java permite que uma classe herde os atributos e métodos de outra classe, proporcionando reutilização de código.
2. Em Java, o modificador de acesso "protected" permite que os membros de uma classe possam ser acessados por classes filhas (herdeiras), mas não por outras classes fora do pacote.
3. Na herança múltipla em Java, uma classe pode herdar características de várias classes, desde que sejam interfaces.
4. O polimorfismo em Java permite que um objeto possa ser referenciado por múltiplos tipos, possibilitando a execução de métodos diferentes dependendo do tipo de referência utilizada.
5. A palavra-chave "super" em Java é utilizada para chamar construtores e métodos da classe mãe (superclasse) dentro da classe filha (subclasse).
6. O conceito de sobrescrita (override) em Java permite que uma classe filha redefina a implementação de um método já definido na classe mãe, proporcionando comportamentos diferentes.
7. A herança em Java só é possível entre classes, não sendo permitida herança de interfaces.
8. Em Java, uma classe final não pode ser estendida, ou seja, não pode ter subclasse.
9. Em uma relação de herança em Java, o construtor da superclasse é executado antes do construtor da subclasse.
10. O polimorfismo em Java é uma das características fundamentais da programação orientada a objetos, permitindo criar implementações específicas de um mesmo método em diferentes classes.

4. Subtópico:
4. Encapsulamento e Modificadores de Acesso: private, public e protected
Assertivas:
1. O encapsulamento é um conceito fundamental na programação orientada a objetos que visa ocultar os detalhes internos de uma classe.
2. O modificador de acesso "private" restringe o acesso a um membro da classe somente à própria classe, impedindo o acesso externo.
3. O modificador de acesso "public" permite o acesso livre a um membro da classe, tanto pela própria classe quanto por classes externas.
4. O modificador de acesso "protected" permite que um membro da classe seja acessado pela própria classe, pelas subclasses e por classes no mesmo pacote.
5. O encapsulamento nos permite controlar o acesso aos membros internos de uma classe, garantindo uma maior segurança e manutenção do código.
6. O uso do modificador de acesso "private" é recomendado quando desejamos esconder a implementação interna de uma classe.
7. O modificador de acesso "public" é geralmente utilizado para membros que precisam ser acessados por outras classes ou módulos do programa.
8. O modificador de acesso "protected" é útil quando queremos permitir que as subclasses acessem determinados membros da classe pai.
9. É possível acessar membros private de uma classe através de métodos públicos que atuam como interfaces para manipulação destes membros.
10. A definição adequada dos modificadores de acesso e o uso consciente do encapsulamento contribuem para a modularidade e reutilização do código.

5. Subtópico:
5. Métodos Construtores, Getters/Setters e Sobrecarga de Métodos 
Assertivas:
1. Os métodos construtores são utilizados para inicializar objetos de uma classe.
2. Os getters e setters são métodos utilizados para acessar e modificar os valores de atributos privados de uma classe.
3. A sobrecarga de métodos permite que uma classe tenha vários métodos com o mesmo nome, mas com parâmetros diferentes.
4. Os métodos construtores não podem ser sobrecarregados.
5. A utilização de getters e setters possibilita um maior controle sobre os atributos de uma classe.
6. A sobrecarga de métodos é realizada através da especificação de tipos e quantidade de parâmetros diferentes.
7. Os métodos construtores podem ter parâmetros, o que permite parametrizar a inicialização dos objetos.
8. Os getters e setters são considerados boas práticas na programação orientada a objetos.
9. A sobrecarga de métodos é uma forma de polimorfismo em Java.
10. O uso adequado de métodos construtores, getters/setters e sobrecarga de métodos contribui para a organização e clareza do código fonte.

6. Subtópico:
6. Interfaces em Java: Definição, Implementação e Uso 
Assertivas:
1. Interfaces em Java são utilizadas para criar contratos de implementação entre classes.
2. Uma interface em Java define um conjunto de métodos e constantes que uma classe deve implementar.
3. As interfaces em Java são utilizadas para estabelecer uma hierarquia de tipos mais abstrata e flexível.
4. As interfaces em Java não podem conter implementações de métodos, apenas as assinaturas dos mesmos.
5. Uma classe em Java pode implementar múltiplas interfaces, o que permite a herança de múltiplos contratos.
6. Interfaces em Java podem ser herdadas por outras interfaces, seguindo o princípio da herança múltipla limitada.
7. O acesso aos métodos de uma interface em Java é sempre público, sendo possível serem acessados por qualquer classe.
8. Interfaces em Java podem ser utilizadas para definir a especificação de um serviço, criando abstrações para diferentes implementações.
9. É possível utilizar interfaces em Java para criar código mais legível e modular, facilitando a manutenção e extensão do sistema.
10. A utilização de interfaces em Java é uma prática recomendada para garantir baixo acoplamento e alta coesão no código.

7. Subtópico:
7. Tratamento de Exceções com Try/Catch/Finally 
Assertivas:
1. O bloco "try" é utilizado para envolver um código que pode gerar uma exceção.

2. O bloco "catch" é utilizado para capturar e tratar uma exceção específica lançada no bloco "try".

3. O bloco "finally" é utilizado para determinar um trecho de código que sempre será executado, independentemente de ter ocorrido ou não uma exceção.

4. Em um bloco "try", é possível ter vários blocos "catch" para tratar diferentes tipos de exceção.

5. Em um bloco "catch", é possível lançar uma nova exceção se necessário.

6. Caso uma exceção seja lançada em um bloco "try" e não haja um bloco "catch" correspondente para tratá-la, a exceção será propagada para o código que chamou o bloco "try".

7. O bloco "finally" é opcional e pode ser omitido em um tratamento de exceção.

8. É possível utilizar apenas o bloco "try" e "finally", sem a necessidade de ter um bloco "catch".

9. É possível aninhar blocos "try" dentro de outros blocos "try" para tratamento de exceções específicas.

10. O tratamento de exceções com try/catch/finally é uma prática importante para garantir a robustez e a estabilidade de um programa.

8. Subtópico:
8. Coleções em Java: Listas, Conjuntos (Sets) e Mapas (Maps)
Assertivas:
1. As coleções em Java são estruturas de dados que permitem armazenar e manipular grupos de objetos.
2. As listas em Java permitem o armazenamento de elementos em uma sequência ordenada, permitindo elementos duplicados.
3. Os conjuntos em Java são coleções que não permitem elementos duplicados e não possuem uma ordem específica.
4. Os conjuntos em Java oferecem operações eficientes para pesquisa, inserção e remoção de elementos.
5. Os mapas em Java são coleções que permitem armazenar pares de chave-valor, onde cada chave é única.
6. Os mapas em Java fornecem operações rápidas para recuperar, inserir e remover pares de chave-valor.
7. As listas em Java podem ser implementadas através da classe ArrayList ou LinkedList.
8. Os conjuntos em Java podem ser implementados através das classes HashSet, LinkedHashSet e TreeSet.
9. Os mapas em Java podem ser implementados através das classes HashMap, LinkedHashMap e TreeMap.
10. As coleções em Java oferecem métodos eficientes para realizar operações como a ordenação, filtragem e busca de elementos.

9. Subtópico:
9. Programação Concorrente:
Assertivas:
1. A programação concorrente é uma técnica utilizada para executar múltiplas tarefas simultaneamente dentro de um programa.
2. A programação concorrente permite melhorar a eficiência e o desempenho de um software ao aproveitar recursos ociosos do sistema.
3. Um dos desafios da programação concorrente é garantir a corretude da execução do programa em cenários de concorrência.
4. A programação concorrente pode ser implementada usando threads, processos ou eventos.
5. As threads são unidades independentes de execução que compartilham recursos, como memória, com o processo principal ou outras threads.
6. A técnica de programação concorrente por meio de processos envolve a criação de processos separados para executar tarefas distintas.
7. Uma das principais vantagens da programação concorrente é a possibilidade de aumentar a capacidade de resposta do sistema, permitindo que tarefas críticas sejam executadas de forma rápida.
8. Um dos desafios da programação concorrente é lidar com condições de corrida, que ocorrem quando duas ou mais threads acessam o mesmo recurso simultaneamente.
9. A sincronização é uma técnica essencial na programação concorrente, pois permite controlar o acesso aos recursos compartilhados de forma ordenada.
10. O uso adequado de primitivas de sincronização, como semáforos e mutexes, é fundamental para evitar problemas de concorrência na programação concorrente.


