Pergunta Original: 12.28 Java- comparativo com python quanto à sintaxe   
 
1. Subtópico:
1. Conceitos básicos de sintaxe em Java e Python.
Assertivas:
1. Em Java e Python, a sintaxe define as regras e estrutura necessárias para escrever um código correto e legível.
2. Em ambas as linguagens, é obrigatório terminar cada instrução com um ponto-e-vírgula (;).
3. Java e Python possuem palavras-chave reservadas, como "if", "for" e "while", que desempenham funções específicas na estruturação do código.
4. Tanto em Java quanto em Python, a sintaxe permite o uso de operadores aritméticos para realizar cálculos matemáticos.
5. Ambas as linguagens permitem a declaração e utilização de variáveis para armazenar e manipular dados durante a execução do programa.
6. Em Java e Python, é possível criar condicionais (if-else) para tomar decisões com base em determinadas condições.
7. Os loops "for" e "while" são utilizados tanto em Java quanto em Python para realizar repetições de um bloco de código.
8. Em ambas as linguagens, a sintaxe permite a utilização de listas, arrays ou coleções para armazenar conjuntos de dados relacionados.
9. Em Java e Python, é possível criar funções, também chamadas de métodos, para agrupar código e executá-lo repetidamente em diferentes partes do programa.
10. Em ambas as linguagens, os comentários são usados para documentar o código e tornar mais fácil a sua compreensão, mas não são interpretados pelo sistema.

2. Subtópico:
2. Comparação entre a estrutura de controle de fluxo em Java e Python.
Assertivas:
1. Tanto Java quanto Python possuem estruturas de controle de fluxo, que permitem a tomada de decisões em um programa de acordo com condições específicas.
2. A estrutura de controle de fluxo em Java utiliza as palavras-chave if, else e else if para condições condicionais.
3. Em Python, a estrutura de controle de fluxo utiliza a palavra-chave if, seguida de dois pontos (:) e um bloco indentado para indicar as ações a serem executadas caso a condição seja verdadeira.
4. Tanto Java quanto Python permitem o uso do operador lógico AND (&&) para combinar várias condições em uma única estrutura condicional.
5. Para combinar várias condições com o operador lógico OR (||) em Java, utiliza-se a palavra-chave "dior", enquanto em Python usa-se a palavra-chave "or".
6. A estrutura de controle de fluxo switch-case, usada em Java, permite a execução de diferentes blocos de código com base no valor de uma variável ou expressão.
7. Em Python, não existe uma estrutura equivalente ao switch-case do Java, mas pode-se usar uma combinação de if-elif-else para alcançar o mesmo resultado.
8. Tanto Java quanto Python permitem o uso da estrutura de repetição for para iteração sobre uma sequência de elementos.
9. Em Java, o for-loop utiliza uma variável de controle inicializada, uma condição de término e uma expressão de atualização.
10. Em Python, o for-loop utiliza a construção for elemento in sequência, onde o elemento assume os valores da sequência a cada iteração.

3. Subtópico:
3. Diferenças na declaração de variáveis e tipos de dados em Java e Python.
Assertivas:
1. Em Java, as variáveis devem ser declaradas com um tipo de dado específico, enquanto em Python não é necessário declarar o tipo de dado das variáveis.
2. Java é uma linguagem fortemente tipada, o que significa que uma variável só pode armazenar valores de um determinado tipo, enquanto Python é uma linguagem fracamente tipada, permitindo que uma variável tenha seu tipo alterado durante a execução.
3. Em Java, todas as variáveis devem ser inicializadas antes de serem utilizadas, caso contrário, ocorrerá um erro de compilação, enquanto em Python é possível utilizar uma variável sem inicializá-la previamente.
4. Em Java, a declaração de variáveis requer o uso de palavras-chave como "int", "double", "boolean", entre outras, para definir o tipo de dado, enquanto em Python não são necessárias palavras-chave para declarar uma variável.
5. Em Java, os tipos de dados são divididos em dois grupos: tipos primitivos e tipos de referência, enquanto em Python, todos os tipos de dados são objetos.
6. Em Java, é possível definir constantes usando a palavra-chave "final" antes da declaração de uma variável, o que não é permitido em Python.
7. Java possui um sistema de tratamento de exceções que exige o uso explícito de blocos try-catch para lidar com exceções, enquanto em Python utiliza-se o bloco try-except.
8. Em Java, a conversão explícita de tipos de dados (cast) é necessária quando se deseja converter um tipo de dado para outro, enquanto em Python as conversões de tipos geralmente são implícitas.
9. Em Java, as variáveis têm escopo limitado, ou seja, não podem ser acessadas fora do bloco em que foram declaradas, a menos que sejam declaradas como variáveis de instância ou variáveis de classe. Em Python, as variáveis podem ser acessadas em qualquer parte do código em que estão definidas.
10. Java oferece a capacidade de definir tipos de dados complexos, como classes e interfaces, enquanto em Python existem estruturas de dados embutidas que permitem manipular objetos de forma mais simples.

4. Subtópico:
4. Comparação da orientação a objetos em Java e Python: classes, herança, polimorfismo.
Assertivas:
1. Em Java, a herança é implementada através da palavra-chave "extends", enquanto em Python utiliza-se a palavra-chave "class".
2. Em ambas as linguagens, é possível definir classes para a criação de objetos.
3. Em Java, todas as classes devem ser declaradas dentro de um pacote, enquanto em Python não há essa restrição.
4. Tanto em Java quanto em Python, o polimorfismo é uma característica da orientação a objetos, permitindo que objetos de classes diferentes sejam tratados de forma genérica.
5. Em Java, é possível utilizar a herança simples, ou seja, uma classe pode herdar somente de uma única outra classe. Python permite a herança múltipla, onde uma classe pode herdar de várias classes pai.
6. Tanto Java quanto Python permitem a criação de subclasses, que herdam propriedades e métodos da classe pai.
7. Java possui uma hierarquia de classes pré-definida, onde todas as classes são derivadas da classe "Object". Em Python, a classe pai padrão é "object".
8. Em Java, todos os métodos e atributos de uma classe são herdados por padrão pelas subclasses. Em Python, é necessário utilizar o conceito de "super" para herdar da classe pai.
9. Ambas as linguagens suportam encapsulamento, permitindo o controle de acesso aos atributos e métodos de uma classe.
10. Tanto em Java quanto em Python, as classes permitem a criação de objetos específicos a partir de uma estrutura de código reutilizável.

5. Subtópico:
5. Tratamento de exceções: diferenças entre Java e Python.
Assertivas:
1. Em Java, as exceções são obrigatoriamente tratadas ou declaradas com a cláusula "throws", enquanto em Python o tratamento é opcional.
2. Em Java, é possível criar tipos de exceções personalizados através da criação de classes que estendem a classe "Exception", o que não é possível em Python.
3. Em Java, o tratamento de exceções é feito através de blocos try-catch-finally, enquanto em Python utiliza-se blocos try-except-finally.
4. Em Java, é possível especificar um bloco finally que sempre será executado independentemente de ocorrer ou não uma exceção, característica que não existe nativamente em Python.
5. Em Java, é possível utilizar múltiplos blocos catch para tratar diferentes tipos de exceções de forma específica, enquanto em Python utiliza-se apenas um bloco except para tratar todas as exceções do bloco try.
6. Em Python, é possível utilizar a cláusula "else" no bloco try-except, que permite executar um código adicional caso nenhuma exceção seja levantada no try.
7. Em Java, é permitido lançar exceções verificadas (checked exceptions) que obrigam o chamador a tratá-las ou propagá-las, ao contrário de Python, onde todas as exceções são não verificadas (unchecked exceptions).
8. Em Java, a ordem das cláusulas catch é importante, pois exceções mais específicas devem ser capturadas antes de exceções mais genéricas, o que não é uma exigência em Python.
9. Em Java, é possível utilizar a cláusula throw para lançar manualmente uma exceção, o que não é uma opção em Python.
10. Em Python, todas as exceções são objetos e podem ser atribuídas a variáveis para posterior tratamento, enquanto em Java as exceções são objetos, mas não podem ser atribuídas diretamente a variáveis.

6. Subtópico:
6. Sintaxe para operações matemáticas básicas em ambos os idiomas.
Assertivas:
1. A sintaxe para realizar operações matemáticas básicas nos idiomas de programação é semelhante em termos de utilização de operadores aritméticos.
2. Tanto em Java quanto em Python, o símbolo "+" é usado para realizar a adição entre dois números.
3. Em ambas as linguagens, o operador "-" é utilizado para realizar subtrações entre números.
4. Nos idiomas de programação Java e Python, o "*" é o símbolo utilizado para realizar multiplicação.
5. Em termos de sintaxe, tanto em Java quanto em Python, o símbolo "/" é utilizado para realizar divisões entre números.
6. Em ambos os idiomas de programação, o operador "%" é utilizado para calcular o resto de uma divisão entre dois números.
7. Em Java, as operações matemáticas entre números inteiros podem resultar em números inteiros ou em números de ponto flutuante, dependendo dos operandos.
8. Em Python, as operações matemáticas entre números inteiros sempre resultam em números de ponto flutuante.
9. Em ambas as linguagens, é possível realizar operações matemáticas com números de ponto flutuante, utilizando os mesmos operadores.
10. Tanto em Java quanto em Python, é possível utilizar parênteses para estabelecer a ordem de precedência das operações matemáticas.

7. Subtópico:
7. Uso de bibliotecas padrão em Java vs Python: importação, uso, diferenças principais.
Assertivas:
1. Em Java, a importação das bibliotecas padrão é feita por meio da palavra-chave "import", seguida do nome da biblioteca e do componente necessário, enquanto em Python, utiliza-se a palavra-chave "import" seguida apenas do nome da biblioteca.
2. Tanto em Java quanto em Python, a importação de bibliotecas é necessária para utilizar recursos que não estão incluídos por padrão na linguagem.
3. Em Java, é comum utilizar bibliotecas como java.util, java.io e java.net para acesso a estruturas de dados, manipulação de arquivos e comunicação em rede, respectivamente.
4. Em Python, é comum utilizar bibliotecas como math, os e datetime para funções matemáticas, operações com o sistema operacional e manipulação de datas, respectivamente.
5. Uma das diferenças entre Java e Python é que em Python é possível importar apenas um componente específico de uma biblioteca, enquanto em Java é obrigatório importar toda a biblioteca.
6. Em Java, é possível criar seus próprios pacotes e bibliotecas para uso pessoal ou compartilhamento com outros desenvolvedores, enquanto em Python isso também é possível, mas não tão comum.
7. A linguagem Java possui uma lista extensa de bibliotecas padrão, cobrindo uma variedade de funcionalidades, enquanto a biblioteca padrão do Python é menos extensa, mas possui características mais abrangentes em certas áreas, como manipulação de strings e expressões regulares.
8. Tanto em Java quanto em Python, é possível importar bibliotecas de terceiros para ampliar as funcionalidades da linguagem, utilizando-se de gerenciadores de pacotes específicos para cada linguagem.
9. O processo de importação em Java é considerado mais explícito e verbose, exigindo que o desenvolvedor especifique o caminho completo da biblioteca necessária, enquanto em Python, a importação é mais sucinta e permite o uso de alias para facilitar a leitura do código.
10. A seleção entre o uso de bibliotecas padrão em Java ou Python depende das necessidades do projeto e da familiaridade do desenvolvedor com cada linguagem, levando em consideração fatores como desempenho, documentação e ecossistema de ferramentas disponíveis.

8. Subtópico:
8. Manipulação de strings na sintaxe do
Assertivas:
Python.
1. Na sintaxe do Python, é possível manipular strings utilizando aspas simples ('') ou aspas duplas ("").
2. A concatenação de strings em Python é realizada utilizando o operador de adição (+).
3. Em Python, é possível acessar caracteres individuais de uma string utilizando índices numéricos, iniciando em 0.
4. As strings em Python são imutáveis, o que significa que não é possível alterar um caractere específico sem criar uma nova string.
5. É possível utilizar o operador de multiplicação (*) para repetir uma string em Python.
6. Em Python, é possível utilizar caracteres de escape para representar caracteres especiais em uma string, como o '\n' para quebra de linha.
7. A função len() em Python retorna o comprimento de uma string, ou seja, a quantidade de caracteres presentes.
8. O método upper() em Python retorna uma nova string com todos os caracteres em letras maiúsculas.
9. O método lower() em Python retorna uma nova string com todos os caracteres em letras minúsculas.
10. O método strip() em Python remove os espaços em branco do início e final de uma string.


