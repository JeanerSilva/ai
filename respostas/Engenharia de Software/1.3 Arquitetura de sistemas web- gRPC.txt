Item do edital: 1.3 Arquitetura de sistemas web- gRPC   
 
1. Subtópico:
1. Conceito e fundamentos do gRPC
Assertivas:
1. O gRPC é um framework de comunicação de serviços baseado em RPC (Remote Procedure Call).
2. O gRPC foi desenvolvido pelo Google e é utilizado para a construção de aplicativos distribuídos.
3. O gRPC utiliza o protocolo HTTP/2 como base para a troca de mensagens entre cliente e servidor.
4. O gRPC suporta diversos tipos de serialização, como Protocol Buffers e JSON.
5. O gRPC permite a definição de contratos de serviço através de arquivos de definição .proto.
6. O gRPC utiliza os conceitos de stubs e skeletons para facilitar a implementação dos serviços.
7. O gRPC suporta a comunicação bidirecional, permitindo a troca de mensagens entre cliente e servidor de forma assíncrona.
8. O gRPC é altamente performático devido ao uso do protocolo HTTP/2, que permite a multiplexação de requisições.
9. O gRPC é agnóstico em relação à linguagem de programação utilizada, suportando diversas opções, como Java, C++, C#, Python, entre outras.
10. O gRPC é amplamente utilizado em ambientes de microsserviços, facilitando a comunicação entre diferentes componentes de um sistema distribuído.

2. Subtópico:
2. Protocol Buffers em gRPC
Assertivas:
1. Protocol Buffers é uma linguagem de descrição de dados desenvolvida pelo Google.
2. Protocol Buffers permite a serialização e desserialização eficiente de dados estruturados.
3. gRPC é um framework de comunicação de alto desempenho que utiliza Protocol Buffers.
4. gRPC é uma abreviação para Google Remote Procedure Call.
5. Em gRPC, os serviços são definidos em formato Protocol Buffers.
6. gRPC suporta diversos tipos de dados, incluindo inteiros, strings e enums.
7. Protocol Buffers oferece suporte a versionamento de dados estruturados.
8. gRPC utiliza o HTTP/2 como protocolo de transporte.
9. gRPC suporta chamadas de procedimento remoto síncronas e assíncronas.
10. Protocol Buffers e gRPC são muitas vezes utilizados para comunicação entre microsserviços em arquiteturas distribuídas.

3. Subtópico:
3. Arquitetura e funcionamento do gRPC
Assertivas:
1. O gRPC é um framework de comunicação de alto desempenho e interoperabilidade usado para construir aplicativos distribuídos.
2. O gRPC utiliza uma abordagem orientada a serviço para permitir a comunicação entre clientes e servidores em diferentes plataformas e linguagens de programação.
3. O gRPC é baseado no protocolo HTTP/2, o que faz com que seja mais eficiente em comparação com outros protocolos de comunicação.
4. O gRPC utiliza o formato de serialização binária para a troca de mensagens entre clientes e servidores, o que proporciona uma melhor eficiência e velocidade de comunicação.
5. O gRPC suporta diferentes estilos de comunicação, como chamada de procedimento remoto (RPC) unidirecional, bidirecional e streaming.
6. O gRPC oferece suporte a autenticação e criptografia, permitindo a comunicação segura entre clientes e servidores.
7. O gRPC possui suporte nativo para múltiplas linguagens de programação, incluindo C++, Java, Python, Ruby, entre outras.
8. O gRPC é uma tecnologia de código aberto mantida e desenvolvida principalmente pelo Google.
9. O gRPC possui um ecossistema próspero de ferramentas e bibliotecas complementares que auxiliam no desenvolvimento de aplicativos.
10. O gRPC é amplamente utilizado em sistemas distribuídos para agilizar a comunicação entre diferentes componentes de um sistema.

4. Subtópico:
4. Vantagens e desvantagens do uso de gRPC em sistemas web
Assertivas:
1. O gRPC é um framework de comunicação RPC (Remote Procedure Call) de alto desempenho, desenvolvido pelo Google.
2. Uma das vantagens do uso de gRPC é sua eficiência em termos de performance, pois utiliza o protocolo de transporte HTTP/2, que oferece multiplexação e compressão de dados.
3. O gRPC oferece suporte a vários tipos de serialização de dados, incluindo JSON, o que facilita a integração com diferentes sistemas.
4. Com o gRPC, é possível usar diversos tipos de autenticação, como tokens JWT (JSON Web Tokens) e certificados TLS (Transport Layer Security).
5. O uso do gRPC permite a geração automática de código cliente e servidor a partir do arquivo de definição de serviço proto, o que facilita o desenvolvimento e a manutenção do código.
6. Uma desvantagem do gRPC é que sua curva de aprendizado pode ser maior em comparação com outros frameworks de comunicação, devido à necessidade de entender os conceitos por trás do protocolo.
7. O gRPC é mais adequado para aplicações com alta demanda de throughput e baixa latência, pois sua comunicação assíncrona permite a troca eficiente de mensagens.
8. Ao usar o gRPC, é possível implementar streaming bidirecional de dados, o que pode ser útil em casos de uso como a transmissão contínua de eventos em tempo real.
9. Uma desvantagem do uso do gRPC é a restrição na interoperabilidade com outros sistemas, uma vez que é necessário que todas as partes envolvidas suportem esse protocolo.
10. O gRPC é uma boa opção para sistemas distribuídos que exigem uma comunicação eficiente e confiável, sendo amplamente utilizado por grandes empresas na construção de seus serviços web.

5. Subtópico:
5. Implementação de serviços com gRPC 
Assertivas:
1. O gRPC é um framework de comunicação de alto desempenho desenvolvido pelo Google.
2. A implementação de serviços com gRPC permite a comunicação eficiente entre diferentes plataformas e linguagens de programação.
3. O gRPC utiliza o protocolo HTTP/2 para a troca de mensagens entre cliente e servidor.
4. A implementação de serviços com gRPC utiliza a serialização de dados no formato binário, o que contribui para uma melhor performance.
5. Com o gRPC é possível definir e especificar de forma clara os contratos de comunicação entre cliente e servidor.
6. O gRPC suporta a criação de APIs baseadas em chamadas de procedimentos remotos (RPCs).
7. O gRPC utiliza o conceito de stream para permitir a transferência de grandes volumes de dados de forma assíncrona.
8. A implementação de serviços com gRPC suporta a autenticação e segurança na troca de mensagens.
9. O gRPC facilita a criação de serviços escaláveis e de alto desempenho, ideal para aplicações distribuídas.
10. O gRPC é amplamente utilizado por grandes empresas de tecnologia devido à sua eficiência e facilidades na implementação de serviços.

6. Subtópico:
6. Segurança na comunicação via gRPC: autenticação, autorização e criptografia 
Assertivas:
1. O gRPC é uma solução de comunicação que permite a implementação de autenticação, autorização e criptografia para garantir a segurança nas transmissões de dados.
2. A autenticação no gRPC pode ser realizada por meio de diversos mecanismos, como tokens, certificados digitais e chaves de autenticação.
3. A autorização no gRPC permite controlar quais recursos um usuário ou serviço têm permissão para acessar, garantindo uma comunicação segura e adequada.
4. O gRPC suporta diferentes tipos de criptografia para garantir a confidencialidade dos dados transmitidos, como TLS (Transport Layer Security) e SSL (Secure Sockets Layer).
5. A criptografia no gRPC garante que as informações transmitidas entre os serviços sejam protegidas contra acesso não autorizado, interceptação e alteração.
6. O gRPC utiliza certificados digitais para estabelecer a identidade dos serviços envolvidos na comunicação, o que contribui para aumentar a segurança do sistema.
7. A comunicação via gRPC é projetada para ser resiliente a ataques de negação de serviço (DDoS), garantindo a disponibilidade dos serviços mesmo diante de sobrecargas na rede.
8. O gRPC oferece mecanismos de controle e monitoramento para identificação de comportamentos suspeitos ou anômalos na comunicação, contribuindo para a detecção e prevenção de ataques.
9. A criptografia utilizada no gRPC é baseada em algoritmos seguros e amplamente reconhecidos, garantindo a integridade e confidencialidade das informações.
10. O gRPC possui uma arquitetura robusta e flexível, permitindo a customização das políticas de segurança de acordo com as necessidades específicas de cada aplicação.

7. Subtópico:
7. Comparação entre REST API e gRPC 
Assertivas:
1. O REST API e o gRPC são ambos protocolos de comunicação utilizados para a troca de dados entre sistemas distribuídos.
2. O REST API é baseado no protocolo HTTP, enquanto o gRPC é baseado no protocolo gRPC, que utiliza gRPC Remote Procedure Call (RPC) para a comunicação.
3. O REST API é mais amplamente adotado e utilizado em aplicações web, enquanto o gRPC é mais comumente usado em aplicações modernas baseadas em microsserviços.
4. O REST API utiliza formatos de dados como JSON ou XML para a serialização dos dados, enquanto o gRPC utiliza o formato de serialização binária Protocol Buffers (protobuf).
5. O REST API é considerado mais fácil de implementar e entender, enquanto o gRPC oferece maior eficiência e desempenho, especialmente em ambientes de alta carga.
6. O REST API utiliza métodos HTTP, como GET, POST, PUT e DELETE, para definir as operações disponíveis, enquanto o gRPC utiliza métodos chamados de "unários", "fluxo de servidor" e "fluxo de cliente" para definir as operações.
7. O REST API é mais adequado para cenários onde a comunicação é predominantemente assíncrona, enquanto o gRPC é mais adequado para cenários onde a comunicação é predominantemente síncrona.
8. O REST API permite a criação de APIs mais flexíveis e fácil integração com sistemas legados, enquanto o gRPC oferece uma abordagem mais moderna de desenvolvimento de APIs.
9. O REST API é mais adequado para expor recursos de um sistema, enquanto o gRPC é mais adequado para invocação de serviços e chamadas procedurais.
10. Tanto o REST API quanto o gRPC são amplamente suportados por diversas linguagens de programação e frameworks, o que permite a sua utilização em diferentes ambientes de desenvolvimento.

8. Subtópico:
8. Integração de sistemas utilizando o protocolo gRPC 
Assertivas:
1. O gRPC é um protocolo de comunicação que permite a interação entre sistemas de forma eficiente e confiável.
2. O gRPC utiliza o protocolo HTTP/2 como base para transferência de dados.
3. O gRPC é uma tecnologia de código aberto desenvolvida pelo Google.
4. O gRPC suporta a serialização de dados em formatos como JSON, Protocol Buffers e XML.
5. O gRPC oferece suporte para diferentes tipos de autenticação, incluindo tokens JWT e certificados SSL/TLS.
6. O gRPC permite a comunicação bidirecional entre cliente e servidor, permitindo a transmissão de dados em tempo real.
7. O gRPC utiliza o conceito de contratos de serviço (service contracts) para definir a estrutura e as operações disponíveis nas APIs.
8. O gRPC oferece suporte para streaming de dados, permitindo a transmissão contínua de informações entre cliente e servidor.
9. O gRPC pode ser utilizado em diferentes linguagens de programação, como Java, Python, C#, Go e Ruby.
10. O gRPC é amplamente utilizado em ambientes distribuídos e microserviços devido à sua eficiência e suporte para integração entre sistemas heterogêneos.

9. Subtópico:
9. Streaming de dados com o protocolo gRPC
Assertivas:
1. O gRPC é um protocolo de streaming de dados que permite a comunicação eficiente entre aplicações distribuídas.
2. O gRPC utiliza o protocolo HTTP/2 para transmitir dados de forma assíncrona e em tempo real.
3. Com o gRPC, é possível transmitir dados tanto em modo de stream unidirecional quanto bidirecional.
4. O protocolo gRPC é uma opção popular para integração de sistemas, especialmente em ambientes distribuídos e de microsserviços.
5. O gRPC é amplamente utilizado em aplicações desenvolvidas em linguagens de programação como Java, Python, C++ e Go.
6. A eficiência do gRPC se deve ao uso de serialização binária, que otimiza a transmissão de dados entre os sistemas.
7. A arquitetura cliente-servidor do gRPC permite que várias solicitações e respostas sejam tratadas simultaneamente.
8. O gRPC oferece suporte a autenticação e controle de acesso, tornando-o seguro para comunicações sensíveis.
9. O streaming de dados com o gRPC permite transmissões contínuas e de alta velocidade em tempo real.
10. Uma das principais vantagens do gRPC é sua interoperabilidade, possibilitando a comunicação entre diferentes sistemas independentemente das linguagens de programação utilizadas em cada um.

10. Subtópico:
10. Casos práticos de uso do protocolo gRPC em arquiteturas web modernas
Assertivas:
1. O protocolo gRPC é amplamente utilizado em arquiteturas web modernas devido à sua eficiência na comunicação entre serviços distribuídos.
2. O gRPC permite a integração de diferentes linguagens de programação, facilitando o desenvolvimento de sistemas heterogêneos.
3. Com o uso do gRPC, é possível realizar chamadas de procedimento remoto (RPC) de maneira eficiente e confiável em arquiteturas web.
4. O gRPC utiliza o protocolo HTTP/2 como base, o que proporciona uma comunicação mais eficiente e de melhor desempenho em relação ao HTTP/1.
5. Uma das vantagens do gRPC é a possibilidade de definir contratos de serviços usando o protocolo Buffer de protocolo do Google (protobuf), que é independente de linguagem.
6. O gRPC suporta diferentes tipos de serialização, como protobuf e JSON, permitindo a flexibilidade na troca de mensagens entre os serviços.
7. Com o gRPC, é possível realizar streaming bidirecional de dados, o que facilita a comunicação contínua e em tempo real entre serviços distribuídos.
8. O gRPC oferece suporte nativo a autenticação, autorização e criptografia de dados, garantindo a segurança das comunicações em arquiteturas web.
9. O protocolo gRPC é amplamente utilizado por grandes empresas de tecnologia, como Google, Netflix e Square, devido aos seus benefícios de desempenho e escalabilidade.
10. O uso do gRPC em arquiteturas web modernas favorece a criação de sistemas mais resilientes e escaláveis, proporcionando uma comunicação mais eficiente entre os serviços.


