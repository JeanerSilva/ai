Item do edital: 12.16 Java- entrada e saída de dados   
 
1. Subtópico:
1. Conceitos básicos de Java: entrada e saída de dados
Assertivas:
1. Em Java, a classe "Scanner" é utilizada para realizar a leitura de dados de entrada.
2. System.in é utilizado para realizar a entrada padrão de dados em Java.
3. O método "nextLine()" da classe "Scanner" é utilizado para ler uma linha de texto da entrada padrão.
4. O método "nextInt()" da classe "Scanner" é utilizado para ler um número inteiro da entrada padrão.
5. O método "nextDouble()" da classe "Scanner" é utilizado para ler um número decimal da entrada padrão.
6. O método "System.out.println()" é utilizado para realizar a saída de dados na tela.
7. O método "System.out.print()" é utilizado para realizar a saída de dados na tela sem quebra de linha.
8. O método "System.out.format()" é utilizado para formatar a saída de dados na tela.
9. O operador de concatenação (+) pode ser utilizado para juntar informações na saída de dados em Java.
10. O método "System.out.printf()" é utilizado para realizar a saída formatada de dados na tela.

2. Subtópico:
2. Uso da classe Scanner para entrada de dados em Java
Assertivas:
1. A classe Scanner é utilizada para realizar a entrada de dados em programas escritos em Java.
2. A classe Scanner faz parte da biblioteca padrão do Java.
3. A classe Scanner possui métodos para ler diferentes tipos de dados, como inteiros, ponto flutuante, caracteres, entre outros.
4. O objeto Scanner é criado a partir de uma instância da classe Scanner.
5. O método nextInt() da classe Scanner é utilizado para ler dados do tipo inteiro do usuário.
6. O método nextDouble() da classe Scanner é utilizado para ler dados do tipo ponto flutuante do usuário.
7. O método next() da classe Scanner é utilizado para ler uma sequência de caracteres do usuário.
8. O método nextLine() da classe Scanner é utilizado para ler uma linha de texto do usuário.
9. A classe Scanner permite a validação e manipulação dos dados inseridos pelo usuário.
10. O objeto Scanner precisa ser fechado após o seu uso, utilizando o método close().

3. Subtópico:
3. Uso da classe JOptionPane para entrada e saída de dados em Java
Assertivas:
1. A classe JOptionPane é utilizada para realizar operações de entrada e saída de dados em Java.
2. A classe JOptionPane permite a exibição de caixas de diálogo para interação com o usuário.
3. A classe JOptionPane é parte da biblioteca javax.swing, utilizada para desenvolvimento de interfaces gráficas em Java.
4. A classe JOptionPane oferece métodos para exibir mensagens informativas, solicitar valores numéricos e textuais, e realizar confirmações com o usuário.
5. Ao utilizar a classe JOptionPane para entrada de dados, é possível validar as informações inseridas pelo usuário antes de prosseguir com a execução do programa.
6. A classe JOptionPane oferece suporte a diferentes tipos de dados, como números inteiros, números de ponto flutuante e strings.
7. A classe JOptionPane possui métodos para a exibição de caixas de diálogo de alerta, permitindo a notificação de erros ou informações importantes ao usuário.
8. A classe JOptionPane permite a customização das caixas de diálogo exibidas, adicionando ícones, botões personalizados e outras opções de personalização.
9. A classe JOptionPane facilita a interação com o usuário em aplicações Java, proporcionando uma experiência mais amigável e intuitiva.
10. A utilização da classe JOptionPane é recomendada principalmente em aplicações de desktop, onde é necessária a interação direta com o usuário.

4. Subtópico:
4. Métodos para leitura e escrita de dados em arquivos usando Java
Assertivas:
1. O método `FileInputStream` em Java permite a leitura de dados de um arquivo.
2. O método `FileOutputStream` em Java permite a escrita de dados em um arquivo.
3. O método `BufferedReader` em Java realiza leitura de dados em um arquivo de forma otimizada.
4. O método `BufferedWriter` em Java realiza a escrita de dados em um arquivo de forma otimizada.
5. O método `Scanner` em Java permite a leitura de dados formatados de um arquivo.
6. O método `PrintWriter` em Java permite a escrita de dados em um arquivo usando um formato específico.
7. O método `DataInputStream` em Java permite a leitura de dados primitivos de um arquivo.
8. O método `DataOutputStream` em Java permite a escrita de dados primitivos em um arquivo.
9. O método `ObjectInputStream` em Java permite a leitura de objetos serializados de um arquivo.
10. O método `ObjectOutputStream` em Java permite a escrita de objetos serializados em um arquivo.

5. Subtópico:
5. Tratamento de exceções na entrada e saída de dados em Java
Assertivas:
1. O tratamento de exceções na entrada e saída de dados em Java é feito por meio do uso das classes e métodos disponíveis na biblioteca padrão.
2. Nas operações de entrada de dados em Java, como a leitura de um arquivo ou da entrada padrão, é importante utilizar o tratamento de exceções para lidar com erros inesperados.
3. O tratamento de exceções na entrada e saída de dados em Java é necessário para garantir a correta manipulação de erros como a ausência de permissões para acessar um arquivo.
4. A utilização dos blocos try-catch é uma forma de tratar exceções de entrada e saída de dados em Java, permitindo ao programador lidar de forma adequada com possíveis erros.
5. As exceções mais comuns que podem ocorrer na entrada e saída de dados em Java incluem FileNotFoundException, para tratar a ausência de um arquivo, e IOException, para tratar erros gerais de entrada e saída.
6. O uso de blocos finally é prática comum na manipulação de exceções de entrada e saída em Java, permitindo a execução de código que deve ser executado independentemente do resultado da operação.
7. Em Java, é recomendável utilizar a cláusula throws para propagar exceções de entrada e saída para o método chamador, permitindo um tratamento adequado em outro ponto do programa.
8. A classe Scanner em Java pode lançar exceções como InputMismatchException e NoSuchElementException durante a leitura de dados, exigindo o devido tratamento por parte do programador.
9. O tratamento de exceções na entrada e saída de dados em Java é uma prática fundamental para garantir a robustez e confiabilidade de um programa.
10. O uso de boas práticas, como o fechamento adequado de recursos após seu uso, como arquivos ou conexões de rede, é essencial para evitar exceções de entrada e saída em Java.

6. Subtópico:
6. Utilização do pacote java.io para manipulação de arquivos 
Assertivas:
1. O pacote java.io é amplamente utilizado para a manipulação de arquivos utilizando a linguagem de programação Java.
2. O pacote java.io fornece classes e interfaces para a leitura e gravação de dados em arquivos.
3. Uma das classes mais comuns do pacote java.io é a FileInputStream, utilizada para a leitura de dados em um arquivo.
4. A classe FileOutputStream, presente no pacote java.io, é utilizada para a gravação de dados em um arquivo.
5. O pacote java.io também oferece classes para leitura e gravação de dados em formato de texto, como a classe FileReader e FileWriter.
6. A classe File, pertencente ao pacote java.io, é utilizada para representar arquivos e diretórios no sistema de arquivos.
7. O pacote java.io também possui classes e métodos para a manipulação de diretórios, como a classe File e o método mkdirs() para a criação de diretórios.
8. A classe RandomAccessFile, presente no pacote java.io, permite a leitura e escrita em uma posição específica do arquivo, sem a necessidade de percorrer todo o conteúdo.
9. O tratamento de exceções é fundamental ao utilizar as classes do pacote java.io, pois diversas operações podem lançar exceções como FileNotFoundException e IOException.
10. A API do pacote java.io é muito vasta e oferece diversas funcionalidades para a manipulação de arquivos, atendendo a diferentes necessidades do programador.

7. Subtópico:
7. Fluxos (Streams) em Java: InputStream, OutputStream, Reader e Writer 
Assertivas:
1. O InputStream é uma classe abstrata em Java que representa um fluxo de entrada de bytes.
2. O OutputStream é uma classe abstrata em Java que representa um fluxo de saída de bytes.
3. O Reader é uma classe abstrata em Java que representa um fluxo de entrada de caracteres.
4. O Writer é uma classe abstrata em Java que representa um fluxo de saída de caracteres.
5. O InputStream e o OutputStream são usados para lidar com a entrada e a saída de bytes, enquanto o Reader e o Writer são usados para lidar com a entrada e a saída de caracteres.
6. O InputStream e o Reader possuem métodos para ler dados dos fluxos, enquanto o OutputStream e o Writer possuem métodos para escrever dados em fluxos.
7. O InputStream e o Reader possuem subclasses especializadas para lidar com diferentes tipos de origens de dados, como FileInputStream e StringReader.
8. O OutputStream e o Writer possuem subclasses especializadas para lidar com diferentes tipos de destinos de dados, como FileOutputStream e StringWriter.
9. Os fluxos InputStream e OutputStream são usados principalmente para lidar com dados em formato binário, como imagens e arquivos compactados.
10. Os fluxos Reader e Writer são usados principalmente para lidar com dados em formato de texto, como strings e arquivos de texto.

8. Subtópico:
8. Serialização e deserialização na entrada/saída de objetos em Java 
Assertivas:
1. A serialização em Java permite que objetos sejam convertidos em uma sequência de bytes, facilitando sua persistência em disco ou transferência através de uma rede.
2. A deserialização em Java é o processo inverso, onde uma sequência de bytes é convertida novamente em um objeto.
3. Para que um objeto seja serializável em Java, sua classe deve implementar a interface Serializable.
4. A serialização em Java preserva os valores dos atributos de um objeto, bem como sua estrutura hierárquica.
5. A serialização em Java não preserva informações sobre a implementação da classe, como métodos e construtores.
6. A serialização em Java é amplamente utilizada em tecnologias como bancos de dados, web services e comunicação entre sistemas distribuídos.
7. A deserialização em Java pode ser utilizada para recuperar objetos previamente serializados a partir de um arquivo, banco de dados ou fluxo de dados.
8. A serialização em Java pode ser útil para criar cópias profundas de objetos, permitindo que eles sejam clonados de maneira fácil e eficiente.
9. A serialização e deserialização em Java podem ser feitas de forma automática, utilizando a API de serialização da linguagem.
10. A serialização em Java pode aumentar a segurança de uma aplicação, uma vez que permite que objetos sejam criptografados antes de serem transmitidos ou armazenados.

9. Subtópico:
9. Buffering na leitura/escrita dos fluxos (streams
Assertivas:
1. O buffering na leitura/escrita dos fluxos (streams) é um mecanismo utilizado para melhorar o desempenho na transferência de dados.
2. O buffering permite que os dados sejam armazenados em memória antes de serem lidos ou escritos no fluxo, reduzindo a quantidade de operações de E/S.
3. Durante a leitura de um fluxo, o buffering é necessário para armazenar temporariamente os dados lidos e evitar operações frequentes de acesso ao dispositivo de armazenamento.
4. No caso da escrita de um fluxo, o buffering permite que os dados sejam armazenados temporariamente em memória antes de serem efetivamente gravados no dispositivo de armazenamento.
5. O buffering na leitura/escrita dos fluxos ajuda a minimizar possíveis gargalos de desempenho, especialmente em operações que envolvem grandes volumes de dados.
6. As operações de buffering podem ser configuradas para diferentes tamanhos, dependendo da quantidade de dados que será lida ou escrita de uma vez.
7. O buffering na leitura/escrita dos fluxos é amplamente utilizado em linguagens de programação, como Java e C++, para melhorar a eficiência e a velocidade de processamento.
8. Um benefício do buffering na leitura/escrita dos fluxos é a redução do número de chamadas ao sistema operacional, o que ajuda a otimizar o desempenho do programa.
9. O uso adequado do buffering na leitura/escrita dos fluxos depende do tipo de aplicação e dos requisitos de desempenho específicos de cada situação.


