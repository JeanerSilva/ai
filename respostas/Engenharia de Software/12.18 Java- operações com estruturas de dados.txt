Pergunta Original: 12.18 Java- operações com estruturas de dados   
 
1. Subtópico:
1. Conceitos básicos de estruturas de dados em Java
Assertivas:
1. Em Java, uma estrutura de dados é uma forma de armazenar e organizar dados de forma eficiente.
2. As estruturas de dados em Java podem ser implementadas por meio de classes e interfaces.
3. Java possui estruturas de dados prontas para uso, como List, Set e Map.
4. Uma List em Java é uma estrutura de dados ordenada que permite elementos duplicados.
5. Set, em Java, é uma estrutura de dados que armazena elementos únicos, sem uma ordem específica.
6. Map em Java é uma estrutura de dados que armazena pares chave-valor, permitindo a recuperação rápida dos valores por meio das chaves.
7. A implementação LinkedList em Java é uma estrutura de dados que permite a inserção e remoção eficiente de elementos em qualquer posição da lista.
8. A classe Stack em Java representa uma pilha, onde a inserção e remoção de elementos ocorre no topo da pilha.
9. A classe Queue em Java representa uma fila, onde a inserção ocorre no final e a remoção ocorre no início.
10. Em Java, é possível criar estruturas de dados personalizadas, implementando interfaces como List, Set ou Map, de acordo com as necessidades do desenvolvedor.

2. Subtópico:
2. Operações com Arrays e ArrayLists
Assertivas:
1. As operações com arrays e ArrayLists permitem armazenar e acessar múltiplos elementos de forma sequencial.
2. Em arrays, o tamanho é fixo e determinado na sua criação, enquanto em ArrayLists o tamanho pode ser dinamicamente ajustado.
3. A inclusão de elementos em um array requer o deslocamento dos elementos existentes para abrir espaço, enquanto em ArrayLists isso é feito automaticamente.
4. Em arrays, a remoção de elementos requer o deslocamento dos elementos restantes para preencher o espaço vago, mas em ArrayLists isso é feito automaticamente.
5. Arrays podem conter elementos de qualquer tipo, incluindo tipos primitivos e objetos. Já ArrayLists só podem conter objetos.
6. Em arrays, a indexação começa em zero, ou seja, o primeiro elemento está na posição 0.
7. A indexação em ArrayLists também começa em zero, assim como em arrays.
8. Para acessar um elemento específico em um array, é necessário usar sua posição/index.
9. Em ArrayLists, é possível acessar um elemento pela sua posição/index ou pelo uso de métodos de pesquisa.
10. Arrays e ArrayLists podem ser percorridos utilizando loops como o for, while ou foreach, facilitando o processamento de seus elementos.

3. Subtópico:
3. Manipulação de Linked Lists em Java
Assertivas:
1. A Linked List em Java é uma estrutura de dados flexível, que permite a inserção e remoção eficiente de elementos em qualquer posição.
2. Em Java, uma Linked List consiste em nós encadeados, onde cada nó guarda uma referência para o próximo elemento da lista.
3. A manipulação dos elementos em uma Linked List em Java é realizada através de métodos como add(), remove() e get().
4. Para adicionar um elemento no início de uma Linked List em Java, é comum utilizar o método addFirst().
5. Para adicionar um elemento no final de uma Linked List em Java, é comum utilizar o método addLast().
6. A remoção de um elemento de uma Linked List em Java pode ser feita utilizando-se métodos como removeFirst() e removeLast().
7. Para obter o tamanho da Linked List em Java, é possível utilizar o método size().
8. O acesso aos elementos de uma Linked List em Java é mais lento do que em um ArrayList, devido à necessidade de percorrer os nós encadeados.
9. É possível percorrer os elementos de uma Linked List em Java utilizando um laço for-each ou um iterador.
10. Uma Linked List em Java não é uma estrutura de dados eficiente para busca e ordenação, sendo mais adequada para operações de inserção e remoção em posições intermediárias.

4. Subtópico:
4. Uso e operações com Hashmaps e Treemaps
Assertivas:
1. O HashMap é uma estrutura de dados que armazena pares de chave-valor, permitindo acesso rápido aos valores através de uma chave.
2. O TreeMap é uma estrutura de dados que armazena pares de chave-valor, mantendo uma ordem ascendente das chaves.
3. Tanto o HashMap quanto o TreeMap implementam a interface Map no Java.
4. O HashMap utiliza uma função de hash para calcular a posição em que um valor será armazenado, proporcionando buscas eficientes.
5. O TreeMap mantém as chaves ordenadas por meio de uma árvore balanceada, o que garante uma complexidade logarítmica para muitas operações.
6. A operação de inserção em um HashMap tem tempo médio de complexidade O(1), enquanto no TreeMap é O(log n).
7. Buscas e remoções em HashMap têm complexidade O(1) em tempo médio, considerando uma boa função de hash.
8. Já no TreeMap, essas operações têm tempo médio de complexidade O(log n).
9. O HashMap utiliza a função equals() para verificar se duas chaves são iguais, enquanto o TreeMap utiliza o método compareTo() para compará-las.
10. Ambas estruturas são amplamente utilizadas para o armazenamento eficiente de dados e consultas rápidas, sendo adequadas para diferentes cenários de uso.

5. Subtópico:
5. Implementação e manipulação de Stacks (Pilhas) e Queues (Filas)
Assertivas:
1. A estrutura de dados Stack (pilha) segue o princípio LIFO, ou seja, o último elemento inserido é o primeiro a ser removido.
2. A estrutura de dados Queue (fila) segue o princípio FIFO, ou seja, o primeiro elemento inserido é o primeiro a ser removido.
3. Tanto Stacks quanto Queues são estruturas de dados lineares, onde os elementos são organizados em uma sequência ordenada.
4. Em uma Stack, a operação de inserção é chamada de push, enquanto a operação de remoção é chamada de pop.
5. Em uma Queue, a operação de inserção é chamada de enqueue, enquanto a operação de remoção é chamada de dequeue.
6. Stacks são utilizadas em situações em que é necessário rastrear uma série de chamadas de funções ou operações.
7. Queues são utilizadas em situações em que é necessário armazenar e processar elementos em ordem de chegada.
8. Tanto as Stacks quanto as Queues podem ser implementadas em várias linguagens de programação, como C++, Java e Python.
9. É possível criar Stacks e Queues utilizando tanto arrays (vetores) quanto listas encadeadas como estrutura de armazenamento dos elementos.
10. A complexidade de tempo das operações de inserção, remoção e busca em Stacks e Queues depende da implementação utilizada, podendo variar entre O(1) e O(n).

6. Subtópico:
6. Trabalhando com Sets em Java: HashSet, TreeSet, LinkedHashSet 
Assertivas:
1. O HashSet em Java é uma implementação da interface Set que armazena os elementos em uma tabela hash.
2. O TreeSet em Java é uma implementação da interface SortedSet que armazena os elementos em uma estrutura de árvore balanceada.
3. O LinkedHashSet em Java é uma implementação da interface Set que mantém a ordem de inserção dos elementos.
4. O HashSet em Java não permite a inserção de elementos duplicados.
5. O TreeSet em Java mantém os elementos em ordem crescente ou decrescente, dependendo do comparador utilizado.
6. O LinkedHashSet em Java é indicado quando é importante manter a ordem de inserção dos elementos.
7. O HashSet em Java possui uma complexidade de tempo constante O(1) para operações de adição, remoção e busca.
8. O TreeSet em Java possui uma complexidade de tempo O(log n) para operações de adição, remoção e busca.
9. O LinkedHashSet em Java possui uma complexidade de tempo constante O(1) para operações de adição, remoção e busca.
10. O HashSet em Java não garante a ordem dos elementos durante a iteração, pois depende da função de dispersão dos elementos.

7. Subtópico:
7. Estruturas de dados avançadas: Graphs (Grafos) e Trees (Árvores)
Assertivas:
1. Os grafos são estruturas de dados compostas por vértices (ou nós) e arestas (ou arcos) que representam conexões entre os vértices.
2. As árvores são estruturas de dados do tipo grafo acíclico, onde cada nó possui um único pai, exceto o nó raiz que não possui pai.
3. Em um grafo direcionado, as arestas possuem uma direção específica, enquanto em um grafo não direcionado, não existe uma direção predefinida para as arestas.
4. Grafos podem ser representados de diversas formas, sendo as mais comuns a matriz de adjacência, a lista de adjacência e a matriz de incidência.
5. Em uma árvore binária, cada nó pode ter no máximo dois filhos – um esquerdo e um direito – e cada filho só pode ter um pai.
6. Grafos podem ser classificados em diversos tipos, como grafo simples, grafo completo, grafo bipartido, entre outros, de acordo com suas características e propriedades.
7. As árvores binárias de busca são estruturas de dados que possuem a propriedade de que todos os elementos à esquerda de um nó são menores que o próprio nó, e todos os elementos à direita são maiores.
8. Grafos podem ser usados para modelar uma variedade de problemas do mundo real, como redes de computadores, sistemas de transporte, redes sociais, entre outros.
9. O percurso em profundidade (DFS) é um algoritmo utilizado para percorrer e explorar os vértices de um grafo, visitando-os em profundidade antes de prosseguir para os vértices vizinhos.
10. As árvores AVL são árvores de busca binárias balanceadas, onde a altura das subárvores esquerda e direita de cada nó difere no máximo em 1.

8. Subtópico:
8. Algoritmos de ordenação e busca em estruturas de dados 
Assertivas:
1. Os algoritmos de ordenação são utilizados para reorganizar elementos em uma estrutura de dados de forma ascendente ou descendente.
2. A ordenação por inserção é um algoritmo de ordenação estável, ou seja, mantém a ordem relativa de registros com chaves iguais.
3. O algoritmo de ordenação por seleção possui complexidade de tempo de execução O(n^2), onde n é o número de elementos na estrutura de dados.
4. O algoritmo de ordenação por bolha é um dos algoritmos mais simples, porém menos eficientes para ordenação de grandes conjuntos de dados.
5. A busca binária é um algoritmo eficiente para encontrar um elemento em uma estrutura de dados ordenada, reduzindo o número de comparações necessárias.
6. O algoritmo de busca sequencial é utilizado para encontrar um elemento em uma estrutura de dados não ordenada, porém possui uma complexidade de tempo de execução maior.
7. O algoritmo de busca em árvore binária é útil para realizar buscas em estruturas de dados ordenadas, como árvores binárias de pesquisa.
8. O algoritmo de busca em largura é utilizado para percorrer e pesquisar em estruturas de dados como grafos, explorando todos os vértices de um mesmo nível antes de avançar para o próximo nível.
9. O algoritmo de busca em profundidade é utilizado para explorar todos os vértices de um grafo, percorrendo as arestas até que não haja mais nenhum vértice não visitado.
10. Os algoritmos de ordenação e busca são fundamentais na implementação e manipulação eficiente de estruturas de dados, como listas, filas, pilhas, árvores e grafos.

9. Subtópico:
9. Performance das operações nas diferentes estruturas de dados 
Assertivas:
1. A performance das operações pode variar significativamente entre diferentes estruturas de dados.
2. A escolha da estrutura de dados adequada pode impactar diretamente na eficiência das operações.
3. Estruturas de dados como vetores e arrays possuem acesso direto aos elementos, resultando em operações de busca mais eficientes.
4. Listas encadeadas podem ter uma performance inferior em relação a estruturas como vetores, especialmente em operações de busca.
5. A árvore binária de busca é uma estrutura de dados eficiente para operações de busca, com complexidade O(log n).
6. Heap é uma estrutura de dados particularmente útil em operações de ordenação, com complexidade O(n log n).
7. Tabelas de hash podem oferecer uma performance ótima para operações de busca, inserção e remoção, com complexidade média O(1).
8. A escolha da estrutura de dados correta pode otimizar a utilização de recursos computacionais.
9. Estruturas de dados como pilhas e filas são adequadas para operações de inserção e remoção em extremidades específicas.
10. É importante considerar as características das operações a serem executadas para escolher a estrutura de dados mais eficiente.

10. Subtópico:
10.
Assertivas:
1. Uma das principais funções do Sistema Nervoso Central é processar informações sensoriais e coordenar respostas motoras.
2. A Constituição Federal estabelece a liberdade de expressão como direito fundamental a todos os cidadãos brasileiros.
3. A Revolução Industrial, iniciada no século XVIII na Inglaterra, teve impacto significativo no desenvolvimento socioeconômico mundial.
4. A integração regional é um processo que busca a cooperação entre países e pode envolver a formação de blocos econômicos e políticos.
5. A Primeira Guerra Mundial teve início em 1914 e envolveu diversas nações em disputas territoriais e ideológicas.
6. A Teoria da Evolução, proposta por Charles Darwin, é amplamente aceita pelos cientistas como explicação para a diversidade de espécies.
7. A água é uma substância composta por duas moléculas de hidrogênio e uma molécula de oxigênio.
8. O desenvolvimento sustentável busca conciliar crescimento econômico com preservação do meio ambiente e justiça social.
9. A gravidade é uma força natural de atração que mantém os corpos astronômicos em órbita e determina o peso dos objetos na Terra.
10. Os direitos humanos são universais, inalienáveis e indivisíveis, garantindo igualdade, liberdade e dignidade a todas as pessoas.


