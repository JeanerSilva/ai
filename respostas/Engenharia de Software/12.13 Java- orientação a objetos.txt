Item do edital: 12.13 Java- orientação a objetos   
 
1. Subtópico:
1. Conceitos básicos de Orientação a Objetos em Java
Assertivas:
1. O encapsulamento é um dos princípios fundamentais da programação orientada a objetos em Java.
2. O polimorfismo permite que um objeto de uma classe seja tratado como um objeto de uma classe superior.
3. A herança em Java permite que uma classe herde características (métodos e atributos) de outra classe.
4. A classe Object é a classe base de todas as classes em Java.
5. O mecanismo de exceções em Java permite lidar com situações inesperadas durante a execução do programa.
6. O conceito de construtor em Java permite a criação de objetos de uma classe.
7. A palavra-chave "this" é usada em Java para se referir ao objeto atual dentro de uma classe.
8. A interface em Java define um conjunto de métodos que podem ser implementados por diferentes classes.
9. A palavra-chave "extends" é usada em Java para permitir a herança de uma classe em relação a outra.
10. O método "equals" é usado em Java para comparar se dois objetos são iguais.

2. Subtópico:
2. Classes e Objetos em Java
Assertivas:
1. Em Java, uma classe é uma estrutura que define um conjunto de atributos e métodos que podem ser utilizados para criar objetos.
2. Em Java, um objeto é uma instância de uma classe, ou seja, uma variável que contém os atributos e pode executar os métodos definidos pela classe.
3. Em Java, as classes permitem a criação de objetos que compartilham características e comportamentos semelhantes.
4. Em Java, a classe é considerada como um tipo de dado, permitindo a declaração de variáveis que são instâncias dessa classe.
5. Em Java, é possível definir construtores nas classes, que são métodos especiais responsáveis por criar e inicializar objetos.
6. Em Java, a palavra-chave 'this' se refere à própria instância da classe em que está sendo utilizada, permitindo acesso aos atributos e métodos da classe.
7. Em Java, é possível criar uma hierarquia de classes através da herança, permitindo reutilizar código e estabelecer relações entre as classes.
8. Em Java, a palavra-chave 'super' é utilizada para acessar os membros da classe pai, quando uma classe filha herda da classe pai.
9. Em Java, é possível definir métodos estáticos, que podem ser chamados sem a necessidade de criar uma instância da classe.
10. Em Java, é possível utilizar modificadores de acesso nas classes e membros, como public, private e protected, para controlar a visibilidade e acesso aos atributos e métodos.

3. Subtópico:
3. Herança e Polimorfismo em Java
Assertivas:
1. O polimorfismo em Java permite que um objeto de uma classe específica seja tratado como um objeto de uma classe mais genérica.
2. A herança em Java permite que uma classe adquira os recursos (atributos e métodos) de outra classe.
3. Uma classe filha em Java pode herdar os atributos e métodos da classe pai.
4. Em Java, é possível implementar múltiplas interfaces para alcançar polimorfismo.
5. O polimorfismo em Java é uma técnica que permite que um método seja definido em várias formas pela classe filha.
6. O encapsulamento em Java é uma técnica usada para proteger os dados de uma classe e ocultá-los de acesso direto.
7. Uma classe abstrata em Java não pode ser instanciada, mas pode ser usada como classe pai para outras classes.
8. A superclass (classe pai) é a classe da qual outra classe herda atributos e métodos em Java.
9. O polimorfismo estático em Java permite que um método seja definido em várias formas pela classe pai.
10. A palavra-chave "extends" é usada para estabelecer uma relação de herança entre duas classes em Java.

4. Subtópico:
4. Encapsulamento e Modificadores de Acesso em Java
Assertivas:
1. O encapsulamento em Java é uma técnica que permite controlar o acesso aos membros de uma classe.
2. A palavra-chave "private" é um modificador de acesso em Java que restringe o acesso aos membros de uma classe apenas a ela própria.
3. A palavra-chave "public" é um modificador de acesso em Java que permite o acesso aos membros de uma classe por qualquer outra classe.
4. A palavra-chave "protected" é um modificador de acesso em Java que permite o acesso aos membros de uma classe por ela própria, suas subclasses e classes do mesmo pacote.
5. Sem especificar um modificador de acesso, o nível de acesso padrão em Java é o pacote, permitindo acesso aos membros da classe apenas pelas classes do mesmo pacote.
6. O encapsulamento em Java ajuda a garantir a integridade dos dados, pois impede que os membros de uma classe sejam modificados ou acessados de maneira inapropriada.
7. Em Java, é possível definir métodos getters e setters para permitir o acesso controlado aos atributos privados de uma classe.
8. O uso adequado do encapsulamento em Java contribui para tornar as classes mais flexíveis, facilitando possíveis alterações futuras em sua implementação.
9. O encapsulamento em Java também ajuda a manter a abstração, ou seja, esconder os detalhes da implementação dos membros de uma classe.
10. É recomendado seguir o princípio da menor visibilidade ao definir os modificadores de acesso em Java, ou seja, usar o modificador mais restrito possível para garantir a segurança e o bom funcionamento das classes.

5. Subtópico:
5. Interfaces e Abstração em Java
Assertivas:
1. A interface em Java é um tipo de classe abstrata que contém apenas métodos abstratos.
2. A abstração em Java permite criar classes genéricas e reutilizáveis ​​que podem ser estendidas por classes mais específicas.
3. Uma classe abstrata em Java pode conter métodos concretos e/ou métodos abstratos.
4. Uma classe abstrata não pode ser instanciada diretamente, ela serve apenas como uma classe base para outras classes.
5. Interfaces podem ser implementadas por várias classes, permitindo a implementação de múltiplas heranças em Java.
6. A interface em Java define um contrato que as classes implementadoras devem seguir.
7. Uma classe abstrata pode implementar uma ou várias interfaces em Java.
8. A abstração em Java ajuda a esconder os detalhes internos de uma classe, fornecendo apenas uma interface externa para os usuários da classe.
9. Através da abstração e das interfaces em Java, é possível criar programas mais flexíveis e modularizados.
10. As interfaces em Java são utilizadas frequentemente em projetos que seguem uma arquitetura orientada a interfaces.

6. Subtópico:
6. Manipulação de Exceções (Try, Catch, Finally) 
Assertivas:
1. A manipulação de exceções é um recurso essencial na programação, pois permite tratar erros e exceções durante a execução do código.
2. O bloco try é utilizado para envolver o código que pode gerar uma exceção.
3. O bloco catch é utilizado para capturar e tratar as exceções geradas no bloco try.
4. É possível ter vários blocos catch para tratar diferentes tipos de exceções.
5. É possível utilizar o bloco finally para executar um código independentemente de ter ocorrido ou não uma exceção.
6. Caso uma exceção seja lançada em um bloco try, o programa vai diretamente para o bloco catch correspondente.
7. O bloco finally é executado sempre, independentemente de ter ocorrido uma exceção ou não.
8. É possível lançar uma exceção manualmente utilizando a instrução throw.
9. É recomendado tratar exceções específicas em blocos catch separados, para facilitar a identificação e o tratamento adequado dos erros.
10. A manipulação adequada de exceções contribui para a robustez e segurança do programa.

7. Subtópico:
7. Coleções em Java (List, Set, Map)
Assertivas:
1. A interface List é uma coleção em Java que permite armazenar elementos em ordem sequencial e permite elementos duplicados.
2. A interface Set é uma coleção em Java que não permite elementos duplicados e não garante uma ordem específica dos elementos.
3. A interface Map é uma coleção em Java que armazena elementos em pares chave-valor, onde cada chave é única e mapeada a um valor.
4. A classe ArrayList é uma implementação da interface List em Java que é baseada em um array e permite acesso rápido aos elementos pela sua posição.
5. A classe HashSet é uma implementação da interface Set em Java que não garante a ordem dos elementos e utiliza uma tabela hash internamente para armazenar os elementos.
6. A classe HashMap é uma implementação da interface Map em Java que armazena os elementos em um formato de tabela hash, permitindo o acesso eficiente pela chave.
7. As coleções em Java oferecem diversos métodos para adicionar, remover, pesquisar e percorrer os elementos contidos nelas.
8. As interfaces List, Set e Map são parte da framework Collections em Java, que oferece uma variedade de estruturas de dados e algoritmos para manipular coleções.
9. A interface List permite acessar os elementos por meio de índices, enquanto a interface Set não oferece um método para tal.
10. A interface Map permite associar chaves a valores e tem métodos para recuperar um valor a partir de uma chave, bem como adicionar, remover e pesquisar essas associações.

8. Subtópico:
8. Threads e Concorrência em Java 
Assertivas:
1. Em Java, a criação de threads permite a execução simultânea de diversas tarefas dentro de um mesmo programa.
2. As threads em Java são consideradas leves devido ao seu baixo custo de criação e manutenção.
3. Em Java, a concorrência ocorre quando duas ou mais threads acessam recursos compartilhados de forma simultânea.
4. Para garantir a consistência dos dados em um ambiente de concorrência, é necessário utilizar mecanismos de sincronização em Java.
5. O uso adequado de locks ou monitores em Java é essencial para evitar problemas de concorrência, como as condições de corrida.
6. O conceito de exclusão mútua em Java garante que apenas uma thread por vez possa acessar um recurso compartilhado.
7. O método synchronized em Java é uma das formas de garantir a exclusão mútua entre threads.
8. O uso dos modificadores volatile e atomic em Java é indicado quando se deseja evitar problemas de inconsistência em variáveis compartilhadas entre threads.
9. O deadlock é um problema de concorrência que pode ocorrer quando duas ou mais threads ficam bloqueadas, aguardando uma pela outra para liberar recursos.
10. A classe java.util.concurrent oferece diversas ferramentas para facilitar o desenvolvimento de aplicações concorrentes em Java.

9. Subtópico:
9. Entrada/Saída (I/O) e Serialização de objetos 
Assertivas:
1. A entrada/saída (I/O) refere-se ao processo de obtenção e envio de dados entre um programa e dispositivos externos.
2. A serialização de objetos é o processo de converter um objeto em uma sequência de bytes para armazenamento ou transmissão.
3. A entrada/saída serial é uma forma de comunicação em que os dados são transmitidos bit a bit, um após o outro, por meio de um único canal de comunicação.
4. A entrada/saída paralela é uma forma de comunicação em que os dados são transmitidos simultaneamente em várias linhas de comunicação.
5. A serialização de objetos permite que os dados de um objeto sejam armazenados em um arquivo ou transmitidos através de uma rede.
6. A desserialização é o processo inverso da serialização, convertendo uma sequência de bytes de volta em um objeto.
7. A entrada/saída de um programa pode ocorrer em diferentes formatos, como texto, binário, XML ou JSON.
8. A serialização de objetos facilita o compartilhamento de dados entre diferentes plataformas e sistemas.
9. A entrada/saída de dados em um programa é uma operação essencial para interação com o usuário ou troca de informações com outros sistemas.
10. A serialização de objetos pode ser utilizada para implementar mecanismos de persistência de dados, permitindo que um objeto seja armazenado e recuperado posteriormente.

10. Subtópico:
10. Uso do pacote java.lang (System, String, Wrapper Classes).
Assertivas:
1. O pacote java.lang é automaticamente importado em todos os programas Java.
2. A classe System é uma classe do pacote java.lang e fornece métodos para interagir com o sistema operacional e o ambiente de execução.
3. A classe String é uma classe do pacote java.lang e representa uma sequência imutável de caracteres.
4. As classes Wrapper (como Integer, Double, Boolean) do pacote java.lang servem para encapsular tipos primitivos em objetos.
5. A classe String possui o método length(), que retorna o número de caracteres na string.
6. A classe System possui o método currentTimeMillis(), que retorna o tempo atual em milissegundos.
7. As classes Wrapper do pacote java.lang permitem a conversão entre tipos primitivos e objetos correspondentes.
8. A classe System possui o método exit(int status), que termina a execução do programa com o status especificado.
9. As classes Wrapper possuem métodos que permitem a conversão de objetos em valores primitivos e vice-versa.
10. A classe String possui o método substring(int beginIndex, int endIndex), que retorna uma nova string que é uma substring da string original.


