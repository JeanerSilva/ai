Item do edital: 12.15 Java- tratamento de exceções   
 
1. Subtópico:
1. Conceito e importância do tratamento de exceções em Java.
Assertivas:
1. O tratamento de exceções em Java é um mecanismo que permite lidar com erros e exceções durante a execução de um programa.
2. O tratamento de exceções em Java é realizado utilizando as palavras-chave try, catch e finally.
3. A utilização adequada do tratamento de exceções em Java aumenta a robustez e a confiabilidade de um programa.
4. O tratamento de exceções em Java ajuda a evitar a interrupção abrupta do programa em caso de erros.
5. O uso do tratamento de exceções em Java facilita a identificação e o diagnóstico de erros e falhas durante a execução de um programa.
6. O tratamento de exceções em Java permite que o programa realize ações específicas para lidar com diferentes tipos de erros ou exceções.
7. O tratamento de exceções em Java é fundamental para garantir um código legível, organizado e de fácil manutenção.
8. O tratamento de exceções em Java contribui para uma melhor experiência do usuário, pois permite que o programa forneça mensagens e feedback adequados em caso de erros.
9. O tratamento de exceções em Java auxilia na identificação de pontos de falha em um programa, possibilitando sua correção e melhoria contínua.
10. O tratamento de exceções em Java é uma prática recomendada para o desenvolvimento de software de qualidade e confiabilidade.

2. Subtópico:
2. Diferença entre erros e exceções em Java.
Assertivas:
1. Erros em Java são problemas graves que ocorrem durante a execução do programa e geralmente não podem ser tratados pelo código.
2. Exceções em Java são problemas que podem ocorrer durante a execução do programa e podem ser tratados pelo código.
3. Erros em Java interrompem a execução normal do programa, exigindo uma ação corretiva.
4. Exceções em Java permitem que o programa execute ações alternativas quando ocorrem problemas específicos.
5. Erros em Java são, geralmente, de natureza irrecuperável e indicam falhas sérias, como falta de memória.
6. Exceções em Java podem ser esperadas e tratadas no código, permitindo que o programa se recupere da situação e continue a execução.
7. Erros em Java são normalmente lançados pelos componentes do ambiente de execução, como o JVM (Java Virtual Machine).
8. Exceções em Java podem ser lançadas pelo programa para indicar situações excepcionais, como entradas inválidas do usuário.
9. Erros em Java não são verificadas em tempo de compilação.
10. Exceções em Java são verificadas em tempo de compilação, ou seja, o compilador obriga o desenvolvedor a tratá-las ou declarar que podem ser lançadas.

3. Subtópico:
3. Hierarquia de classes de exceção em Java.
Assertivas:
1. A hierarquia de classes de exceção em Java é representada pela class Throwable.
2. A class Throwable possui duas subclasses diretas: Error e Exception.
3. A subclass Error representa erros graves e inesperados, não sendo recomendado capturá-los.
4. A subclass Exception representa exceções que podem ser tratadas de forma adequada.
5. A subclass Exception possui diversas subclasses diretas, como RuntimeException, IOException e ClassNotFoundException.
6. A classe RuntimeException é utilizada para exceções que ocorrem durante a execução do programa e não são verificadas em tempo de compilação.
7. A classe IOException é utilizada para exceções relacionadas a operações de entrada e saída.
8. A classe ClassNotFoundException é utilizada para exceções relacionadas a erros na resolução de classes pelo ClassLoader.
9. A classe Throwable possui métodos como getMessage() e printStackTrace() que permitem obter informações detalhadas sobre a exceção.
10. É possível criar classes personalizadas de exceção em Java estendendo as subclasses da classe Exception.

4. Subtópico:
4. Uso das palavras-chave try, catch e finally no tratamento de exceções.
Assertivas:
1. O bloco try é utilizado para envolver um trecho de código que pode gerar uma exceção.
2. A palavra-chave catch é utilizada para capturar uma exceção específica e tratar o erro.
3. É possível ter vários blocos catch em sequência, cada um tratando um tipo diferente de exceção.
4. Um bloco catch só será executado se o tipo de exceção lançado for compatível com o tipo especificado no catch.
5. O bloco finally é utilizado para definir um trecho de código que será executado independentemente de ter ocorrido ou não uma exceção.
6. O bloco catch não é obrigatório se houver a presença de um bloco finally.
7. É possível utilizar apenas o bloco try, sem catch nem finally, quando não se deseja tratar a exceção explicitamente.
8. O bloco finally é frequentemente utilizado para liberação de recursos, como fechar uma conexão com o banco de dados.
9. Em um bloco try, a execução será interrompida assim que uma exceção for lançada e o programa irá para o bloco catch correspondente.
10. O bloco finally será sempre executado, mesmo se um bloco catch disparar um novo erro.

5. Subtópico:
5. Tratamento de múltiplas exceções: uso da cláusula catch múltipla.
Assertivas:
1. O uso da cláusula catch múltipla em tratamento de múltiplas exceções permite capturar diferentes tipos de exceção em um único bloco de código.
2. A cláusula catch múltipla permite reduzir a quantidade de código duplicado ao lidar com exceções.
3. Ao utilizar a cláusula catch múltipla, é possível tratar exceções específicas em bloco separado, para um tratamento mais adequado.
4. O uso adequado da cláusula catch múltipla requer a ordem correta na hierarquia das exceções, do mais específico ao mais geral.
5. Utilizar a cláusula catch múltipla pode aumentar a legibilidade e a clareza do código, facilitando a manutenção.
6. A cláusula catch múltipla permite ao programador ter um maior controle sobre o tratamento de exceções.
7. É possível utilizar mais de uma cláusula catch múltipla em um único bloco try-catch, para tratar diferentes grupos de exceções.
8. A cláusula catch múltipla pode ser utilizada para tratar exceções relacionadas a diferentes partes do código, em um único local.
9. O uso da cláusula catch múltipla possibilita a implementação de estratégias de tratamento de exceções mais robustas e flexíveis.
10. A cláusula catch múltipla pode ajudar a identificar e registrar exceções de forma mais precisa, facilitando a depuração do código.

6. Subtópico:
6. Exceções verificadas versus não verificadas: diferenças e aplicações práticas.
Assertivas:
1. As exceções verificadas podem ser previstas e tratadas no código, enquanto as exceções não verificadas não necessitam de tratamento explícito.
2. As exceções verificadas são obrigatórias de se lidar através de blocos try-catch, já as exceções não verificadas podem ser tratadas ou não.
3. Exceções verificadas são necessárias quando o tratamento adequado do erro é vital para o funcionamento correto do programa.
4. Exceções não verificadas são úteis para indicar erros inesperados que não podem ser tratados de maneira eficaz, como falhas de programação.
5. A falta de tratamento de exceções verificadas pode resultar em compilação de erro, enquanto exceções não verificadas não geram erros de compilação.
6. Exceções verificadas são normalmente lançadas por métodos em bibliotecas, enquanto exceções não verificadas são geralmente geradas por erros de programação.
7. O tratamento de exceções verificadas permite um controle preciso do fluxo de execução do programa em caso de erro.
8. As exceções não verificadas geralmente são subclasses de RuntimeException e Error, enquanto exceções verificadas são subclasses de Exception.
9. A decisão de usar exceções verificadas ou não verificadas depende do contexto e da gravidade do erro que está sendo tratado.
10. Em sistemas de alta disponibilidade, é comum lançar exceções verificadas para que sejam tratadas adequadamente e o programa possa continuar em funcionamento.

7. Subtópico:
7. Criação e uso de exceções personalizadas em Java.
Assertivas:
1. As exceções personalizadas em Java são criadas através da criação de novas classes que herdam da classe Exception ou de suas subclasses.
2. O uso de exceções personalizadas em Java permite aos desenvolvedores definir erros específicos para suas aplicações.
3. As exceções personalizadas em Java são úteis para indicar situações excepcionais e que fogem do fluxo normal de execução de um programa.
4. É possível criar hierarquias de exceções personalizadas em Java, utilizando herança entre as classes.
5. As exceções personalizadas podem ser lançadas em um método e, quando necessário, tratadas em outro ponto do programa.
6. As exceções personalizadas devem ser declaradas na assinatura do método que as lança.
7. Para criar uma exceção personalizada em Java, é necessário implementar o construtor da classe, que pode ter ou não parâmetros.
8. É possível definir mensagens de erro personalizadas para as exceções criadas em Java, possibilitando uma melhor compreensão do problema ocorrido.
9. A utilização de exceções personalizadas em Java ajuda a melhorar a legibilidade e manutenibilidade do código.
10. Ao lidar com exceções personalizadas em Java, é possível utilizar as cláusulas try-catch-finally para capturar e tratar erros específicos.

8. Subtópico:
8. Propagação de Exceções: conceito, funcionamento e aplicação prática.
Assertivas:
1. A propagação de exceções é um conceito fundamental na programação, que permite lidar com erros e condições excepcionais durante a execução de um programa.
2. Na propagação de exceções, quando ocorre um erro em um trecho de código, a exceção é lançada e propagada automaticamente para a pilha de chamadas de métodos.
3. A propagação de exceções facilita a identificação e tratamento de erros, permitindo que o controle do programa seja transferido para um bloco de código específico responsável por tratar a exceção.
4. Ao propagar uma exceção, é possível incluir informações extras sobre o erro, como mensagens de erro específicas ou dados relacionados ao contexto em que a exceção ocorreu.
5. A propagação de exceções pode ser aplicada em diferentes linguagens de programação, como Java, C#, Python, entre outras.
6. A propagação de exceções permite a separação do código de tratamento de erros do código principal, tornando o programa mais organizado e legível.
7. Ao propagar uma exceção, é possível criar uma cadeia de exceções, na qual uma exceção é encapsulada dentro de outra exceção, fornecendo mais informações sobre o erro original.
8. A propagação de exceções também possibilita o uso de blocos catch/finally, nos quais é possível especificar ações a serem executadas após o lançamento da exceção.
9. É importante tratar as exceções adequadamente, para evitar a interrupção inesperada da execução do programa e garantir uma melhor experiência para o usuário.
10. A propagação de exceções é uma prática essencial na programação orientada a objetos, auxiliando no desenvolvimento de código mais robusto e resiliente.


