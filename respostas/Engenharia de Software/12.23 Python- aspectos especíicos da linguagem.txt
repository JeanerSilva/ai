Item do edital: 12.23 Python- aspectos especíicos da linguagem   
 
1. Subtópico:
1. Sintaxe Básica de Python: Definição e estrutura.
Assertivas:
1. A sintaxe básica de Python é definida como a forma correta de escrever instruções e expressões na linguagem de programação Python.
2. A estrutura básica de um programa em Python consiste em um conjunto de instruções, definidas por linhas de código, que podem ser executadas sequencialmente.
3. Em Python, o início e o fim dos blocos de código são definidos pela indentação das linhas de código, utilizando espaços ou tabulações.
4. A indentação adequada é vital para a correta execução do programa em Python. Falhas na indentação podem resultar em erros de sintaxe.
5. Os comentários em Python são indicados pelo uso do caractere "#" e são usados para fornecer informações sobre o código e sua funcionalidade.
6. Python diferencia letras maiúsculas de minúsculas, portanto, é necessário escrever as palavras reservadas corretamente, seguindo essa diferenciação.
7. A sintaxe básica inclui a declaração de variáveis, que pode ser feita diretamente, sem necesidade de especificar o tipo da variável.
8. Para a atribuição de valores às variáveis, o sinal de igual ("=") é utilizado.
9. Python possui uma série de operadores aritméticos (como +, -, *, /) que podem ser utilizados para realizar operações matemáticas básicas.
10. A sintaxe básica também abrange a utilização de estruturas condicionais (como if/else) e de estruturas de repetição (como for/while) para controlar o fluxo de programação.

2. Subtópico:
2. Tipos de Dados em Python: Strings, Números, Listas, Tuplas, Dicionários.
Assertivas:
1. Em Python, Strings são utilizadas para armazenar sequências de caracteres.
2. Números em Python podem ser de diferentes tipos, como inteiros (int) e números de ponto flutuante (float).
3. Listas em Python são estruturas de dados que armazenam múltiplos valores em uma única variável, separados por vírgulas e delimitados por colchetes.
4. Tuplas em Python são semelhantes a listas, porém são imutáveis, ou seja, seus elementos não podem ser modificados após sua criação.
5. Dicionários em Python são estruturas de dados compostas por pares chave-valor, onde cada valor é associado a uma chave.
6. Strings em Python podem ser manipuladas utilizando diversos métodos, como "upper()" para converter a string em letras maiúsculas.
7. Para realizar operações matemáticas em Python, é possível utilizar os operadores aritméticos básicos, como adição (+), subtração (-), multiplicação (*) e divisão (/).
8. Listas em Python permitem a adição de elementos utilizando o método "append()", que insere o elemento no final da lista.
9. Tuplas podem ser utilizadas em Python para retornar múltiplos valores de uma função.
10. Dicionários em Python podem ser iterados utilizando o laço de repetição "for", percorrendo todas as chaves ou valores do dicionário.

3. Subtópico:
3. Operadores em Python: Aritméticos, Comparação, Atribuição.
Assertivas:
1. Os operadores aritméticos em Python permitem realizar operações matemáticas como adição, subtração, multiplicação e divisão.
2. O operador de comparação "==" é utilizado em Python para verificar se dois valores são iguais.
3. O operador de atribuição "=" é utilizado em Python para atribuir um valor a uma variável.
4. O operador aritmético "//" em Python realiza a divisão inteira entre dois números.
5. O operador de comparação ">=" em Python verifica se um valor é maior ou igual a outro valor.
6. O operador de atribuição composta "+=" em Python adiciona um valor à variável existente.
7. O operador aritmético "*" em Python realiza a multiplicação entre dois números.
8. O operador de comparação "<=" em Python verifica se um valor é menor ou igual a outro valor.
9. O operador de atribuição composta "-=" em Python subtrai um valor da variável existente.
10. O operador aritmético "%" em Python retorna o resto da divisão entre dois números.

4. Subtópico:
4. Controle de Fluxo em Python: Instruções if-elif-else e loops for e while.
Assertivas:
1. No Python, a estrutura de controle de fluxo if-elif-else é utilizada para tomar decisões com base em condições específicas.

2. A instrução if permite executar um bloco de código apenas se uma condição for verdadeira.

3. O elif é utilizado quando se deseja verificar múltiplas condições antes de tomar uma decisão.

4. O else é opcional e é utilizado para executar um bloco de código caso nenhuma das condições anteriores seja verdadeira.

5. O loop for em Python permite iterar sobre uma sequência de itens, como uma lista ou uma string.

6. Diferentemente de outras linguagens, em Python, o loop for é construído em torno de uma variável que assume cada valor sequencialmente.

7. O loop while em Python permite repetir um bloco de código enquanto determinada condição for verdadeira.

8. É importante ter cuidado ao utilizar loops while, pois é necessário garantir que a condição de parada seja atingida em algum momento.

9. O comando break pode ser utilizado tanto em loops for quanto em loops while para interromper a execução do loop antes que a condição de parada seja alcançada.

10. O comando continue pode ser usado para pular a iteração atual do loop e continuar com a próxima iteração.

5. Subtópico:
5. Funções em Python: Definição, parâmetros e retorno de funções.
Assertivas:
1. A definição de uma função em Python ocorre através da palavra-chave "def" seguida do nome da função e parênteses vazios.
2. Uma função em Python pode receber parâmetros, que são valores fornecidos durante a chamada da função e utilizados dentro do seu bloco de código.
3. Ao definir uma função em Python, é possível especificar o tipo dos parâmetros através de anotações de tipo, porém essas anotações não são obrigatórias.
4. Uma função em Python pode retornar um valor utilizando a palavra-chave "return", seguida do valor desejado, que pode ser de qualquer tipo.
5. Caso uma função em Python não possua um "return" explicitamente, ela retornará "None" por padrão.
6. Em Python, uma função pode ter múltiplos parâmetros, separados por vírgulas, e todos eles devem ser fornecidos durante a chamada da função.
7. É possível definir valores padrão para os parâmetros de uma função em Python, fazendo com que sejam utilizados caso nenhum valor seja fornecido durante a chamada.
8. Ao chamar uma função em Python, os argumentos devem ser passados de acordo com a ordem dos parâmetros definidos na função.
9. Em Python, é possível chamar uma função passando os argumentos explicitamente, indicando o nome do parâmetro e o valor a ele correspondente.
10. Uma função em Python pode ser atribuída a uma variável, permitindo que ela seja tratada como qualquer outra variável e possa ser passada como argumento para outras funções.

6. Subtópico:
6. Manipulação de Arquivos em Python: Leitura e escrita de arquivos.
Assertivas:
1. A manipulação de arquivos em Python é uma tarefa fundamental para o desenvolvimento de programas que requerem armazenamento persistente de informações. (C)
2. Para ler o conteúdo de um arquivo em Python, é necessário abrir o arquivo no modo de leitura utilizando a função "open". (C)
3. Quando um arquivo é aberto no modo de leitura em Python, é possível realizar operações como ler linhas do arquivo ou utilizar a função "read" para ler todo o conteúdo de uma vez. (C)
4. O modo de escrita é utilizado para criar um arquivo em Python ou para sobrescrever o conteúdo de um arquivo existente. (C)
5. Ao abrir um arquivo no modo de escrita em Python, se o arquivo não existir, ele será criado automaticamente. (C)
6. Para escrever conteúdo em um arquivo em Python, utiliza-se a função "write", que permite escrever strings ou qualquer outro dado serializável no arquivo. (C)
7. Ao utilizar a função "write" em um arquivo aberto no modo de escrita, o conteúdo anterior do arquivo será apagado e substituído pelo novo conteúdo. (C)
8. É possível criar um arquivo em Python com múltiplas linhas utilizando a função "writelines", que recebe uma lista de strings onde cada elemento representa uma linha no arquivo. (C)
9. O fechamento de um arquivo em Python é importante para liberar os recursos do sistema operacional e garantir que todas as alterações sejam salvas corretamente. (C)
10. Em Python, a utilização do bloco "with open" garante que o fechamento do arquivo seja realizado automaticamente, mesmo em caso de exceções. (C)

7. Subtópico:
7. Tratamento de Exceções em Python: Try-except-finally blocks and raising exceptions.
Assertivas:
1. O tratamento de exceções em Python é realizado por meio dos blocos try-except-finally.
2. O bloco try é utilizado para conter o código onde uma exceção pode ocorrer.
3. O bloco except é utilizado para tratar a exceção e fornecer uma ação apropriada.
4. É possível utilizar múltiplos blocos except para tratar diferentes tipos de exceções.
5. O bloco finally é utilizado para executar o código independentemente da ocorrência de exceções.
6. Ao utilizar o bloco finally, o código contido nele sempre será executado, mesmo que ocorra uma exceção.
7. É possível omitir o bloco finally ao utilizar somente o bloco try-except.
8. Caso uma exceção não seja tratada dentro de um bloco except, a exceção será propagada para blocos superiores.
9. É possível utilizar a palavra-chave raise para gerar manualmente uma exceção em Python.
10. Ao utilizar raise, é possível especificar a exceção a ser levantada, bem como sua mensagem associada.

8. Subtópico:
8
Assertivas:
1. A soma de dois números pares sempre resultará em um número par.
2. A fusão de um sólido e um líquido resulta em uma mistura homogênea.
3. A capital do Brasil é a cidade de Brasília.
4. O Oceano Pacífico é o maior oceano do mundo em extensão.
5. A língua portuguesa é derivada do latim.
6. O número de lados de um triângulo é três.
7. A energia potencial de um objeto em queda livre diminui à medida que sua altura diminui.
8. A fórmula de Bhaskara é utilizada para encontrar as raízes de uma equação quadrática.


