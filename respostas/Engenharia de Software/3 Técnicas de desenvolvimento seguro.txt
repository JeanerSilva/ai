Item do edital: 3 Técnicas de desenvolvimento seguro.    
 
1. Subtópico:
1. Definição e importância do desenvolvimento seguro de software.
Assertivas:
1. O desenvolvimento seguro de software é um conjunto de práticas que visa minimizar as vulnerabilidades e ameaças presentes em sistemas e aplicações.
2. A importância do desenvolvimento seguro de software está diretamente relacionada à proteção de dados sensíveis e à manutenção da integridade de sistemas e redes.
3. O desenvolvimento seguro de software é fundamental para prevenir ataques cibernéticos e reduzir o impacto de eventuais incidentes de segurança.
4. Uma abordagem segura no desenvolvimento de software inclui a identificação e correção de falhas, bem como a implementação de práticas de codificação segura.
5. A inclusão de testes de segurança durante o processo de desenvolvimento é uma das etapas cruciais para garantir a segurança do software.
6. A adoção de boas práticas de desenvolvimento seguro contribui para a conformidade com regulamentações e normas de segurança estabelecidas.
7. A falta de atenção ao desenvolvimento seguro de software pode resultar em vazamentos de informações confidenciais e prejuízos financeiros às organizações.
8. O desenvolvimento seguro de software promove a confiabilidade de sistemas e aplicativos, aumentando a confiança dos usuários e clientes.
9. O desenvolvimento seguro de software engloba a integração de medidas de segurança desde a concepção até a fase de manutenção do produto.
10. As empresas que investem em desenvolvimento seguro de software estão mais preparadas para enfrentar ameaças cibernéticas e minimizar os riscos associados à segurança da informação.

2. Subtópico:
2. Princípios fundamentais do desenvolvimento seguro.
Assertivas:
1. O princípio da mínima exposição preconiza que apenas as informações necessárias e relevantes devem ser disponibilizadas aos usuários, reduzindo o risco de divulgação indevida dos dados.
2. O princípio da separação de privilégios determina que diferentes funções e responsabilidades devem ser atribuídas a diferentes usuários, evitando assim a concentração de poder e minimizando o risco de abusos.
3. O princípio do controle de acesso refere-se à necessidade de estabelecer regras e mecanismos para garantir que apenas usuários autorizados possam acessar informações e recursos.
4. O princípio da autenticação e autorização exige que os sistemas de desenvolvimento seguro possuam mecanismos robustos para verificar a identidade e conceder privilégios apenas aos usuários autorizados.
5. O princípio da integridade implica em assegurar que as informações e os recursos não sejam alterados indevidamente durante o processo de desenvolvimento e garantir que sejam confiáveis ​​e precisos.
6. O princípio da consistência exige que os sistemas de desenvolvimento seguro forneçam resultados coerentes e confiáveis ​​em todas as suas operações.
7. O princípio da auditoria envolve a implementação de mecanismos que permitam rastrear e registrar todas as atividades realizadas no sistema, auxiliando assim na identificação de possíveis violações e facilitando a investigação forense.
8. O princípio da confidencialidade demanda a implementação de mecanismos que garantam que as informações confidenciais sejam protegidas contra acesso não autorizado ou divulgação indevida.
9. O princípio da disponibilidade exige que os sistemas de desenvolvimento seguro estejam sempre disponíveis para atender às demandas dos usuários, evitando a interrupção dos serviços e garantindo a continuidade das operações.
10. O princípio da responsabilidade demanda que os desenvolvedores e administradores de sistemas sejam responsáveis ​​pelas ações e operações realizadas em seus sistemas, estando sujeitos a penalidades em caso de violações ou falhas.

3. Subtópico:
3. Técnica de Revisão de Código: conceito, aplicação e benefícios.
Assertivas:
1. A técnica de revisão de código consiste em uma análise sistemática e detalhada do código fonte de um programa de computador.
2. A revisão de código é uma prática essencial para identificar e corrigir erros antes da implementação final do software.
3. Essa técnica pode ser aplicada em qualquer etapa do desenvolvimento de software, desde a fase inicial de codificação até as atualizações futuras.
4. A revisão de código permite a identificação de problemas de lógica, ineficiências, vulnerabilidades de segurança e potenciais melhorias no código fonte.
5. Ao utilizar a técnica de revisão de código, há uma maior eficiência na detecção de erros, o que resulta em redução de retrabalho e melhoria da qualidade do software.
6. A revisão de código promove a padronização e uniformidade do código, facilitando a manutenção futura e o trabalho em equipe.
7. A aplicação da revisão de código contribui para a disseminação do conhecimento entre os membros da equipe de desenvolvimento, favorecendo a troca de experiências e aprendizado contínuo.
8. A revisão de código é uma prática aplicável em diferentes linguagens de programação, independentemente da complexidade do sistema.
9. Ao realizar uma revisão de código, é recomendado utilizar ferramentas específicas que facilitem a identificação de problemas e a documentação das alterações realizadas.
10. A revisão de código é um processo colaborativo, no qual diferentes membros da equipe participam ativamente, contribuindo para a melhoria da qualidade do código e do software como um todo.

4. Subtópico:
4. Técnica de Teste de Penetração (Penetration Testing): conceito, aplicação e benefícios.
Assertivas:
1. A técnica de Teste de Penetração (Penetration Testing) consiste em simular um ataque cibernético para identificar vulnerabilidades em sistemas, redes ou aplicações.
2. O Teste de Penetração é uma forma proativa de avaliar a segurança de um ambiente, permitindo que medidas corretivas sejam tomadas antes que ocorram ataques reais.
3. O objetivo do Teste de Penetração é identificar falhas de segurança que possam ser exploradas por invasores, buscando avaliar a eficácia das medidas de segurança adotadas.
4. Por meio do Teste de Penetração, é possível identificar vulnerabilidades como falhas de autenticação, configurações indevidas, vulnerabilidades de software, entre outros.
5. O Teste de Penetração pode ser realizado tanto internamente, simulando ataques executados por usuários com acesso legítimo à rede, quanto externamente, simulando ataques vindos de fontes externas.
6. Uma das principais vantagens do Teste de Penetração é aumentar a conscientização dos responsáveis pela segurança sobre possíveis falhas e riscos existentes nos sistemas.
7. O Teste de Penetração permite que as organizações compreendam o impacto potencial de um ataque e quais informações ou recursos críticos estão vulneráveis.
8. O Teste de Penetração pode ser usado para auxiliar na tomada de decisões estratégicas relacionadas à segurança da informação e definir prioridades para investimentos em proteção e correção de falhas.
9. O Teste de Penetração exige conhecimentos técnicos avançados em segurança da informação, incluindo o uso de ferramentas específicas para identificar e explorar vulnerabilidades.
10. Apesar de ser uma técnica eficiente para avaliar a segurança de sistemas, é importante ressaltar que o Teste de Penetração deve ser realizado de forma ética, com autorização prévia e seguindo as diretrizes legais.

5. Subtópico:
5. Técnica de Modelagem da Ameaça (Threat Modeling): conceito, aplicação e benefícios.
Assertivas:
1. O Threat Modeling é uma técnica utilizada para identificar e mitigar possíveis ameaças em um sistema de informação.
2. A aplicação do Threat Modeling auxilia a identificar vulnerabilidades e pontos fracos em um sistema, permitindo a adoção de medidas de segurança eficientes.
3. O Threat Modeling envolve a análise detalhada do sistema, identificando os ativos, as possíveis ameaças e as possíveis consequências da exploração dessas ameaças.
4. Com o Threat Modeling, é possível priorizar as ameaças com base em sua probabilidade de ocorrência e impacto, permitindo uma melhor alocação de recursos de segurança.
5. Ao utilizar o Threat Modeling no início do ciclo de desenvolvimento de um sistema, é possível reduzir custos e tempo no tratamento de ameaças, uma vez que as melhorias podem ser realizadas desde o início.
6. O Threat Modeling promove um maior entendimento dos riscos e ameaças associadas a um sistema, permitindo uma tomada de decisão mais embasada no que se refere às medidas de segurança a serem adotadas.
7. A utilização do Threat Modeling contribui para a proteção dos dados sensíveis e para a preservação da privacidade dos usuários de um sistema.
8. O Threat Modeling é uma prática recomendada em diversos padrões e frameworks de segurança, como o OWASP (Open Web Application Security Project).
9. O Threat Modeling é uma técnica flexível, que pode ser aplicada a diferentes tipos de sistemas de informação, como aplicações web, redes e infraestrutura de TI.
10. A adoção do Threat Modeling como parte dos processos de segurança de uma organização contribui para a construção de sistemas mais resilientes e menos suscetíveis a ataques.

6. Subtópico:
6. Implementação das técnicas no ciclo de vida do desenvolvimento do software (SDLC).
Assertivas:
1. A implementação de técnicas no ciclo de vida do desenvolvimento do software (SDLC) é parte fundamental para garantir a qualidade e eficiência do produto final.
2. A implementação das técnicas no SDLC envolve a transformação dos requisitos funcionais e não funcionais em código executável.
3. A implementação das técnicas no SDLC normalmente é realizada por uma equipe de desenvolvedores especializados.
4. Durante a implementação, é importante seguir boas práticas de programação para garantir a legibilidade, manutenibilidade e escalabilidade do código.
5. A implementação das técnicas no SDLC requer o uso de linguagens de programação adequadas para atender às necessidades do projeto.
6. A implementação das técnicas no SDLC envolve a integração de todos os módulos do software de forma a garantir o funcionamento integrado do sistema.
7. Durante a implementação no SDLC, é importante realizar testes unitários para garantir a correção e funcionamento adequado de cada parte do código.
8. A implementação das técnicas no SDLC deve seguir as diretrizes definidas na fase de planejamento do projeto.
9. A implementação no SDLC envolve a documentação de todo o processo para permitir a compreensão e manutenção futura do software.
10. A implementação das técnicas no SDLC deve seguir um cronograma definido, visando a entrega dentro do prazo estabelecido no projeto.

7. Subtópico:
7. Ferramentas utilizadas para o desenvolvimento seguro: análise estática e dinâm
Assertivas:
1. A análise estática e dinâmica são ferramentas utilizadas no desenvolvimento seguro de sistemas.
2. A análise estática consiste em examinar o código fonte de um programa em busca de vulnerabilidades e erros de programação.
3. A análise dinâmica é realizada através da execução do programa, visando identificar falhas de segurança em tempo real.
4. Ambas as técnicas de análise auxiliam no cumprimento de requisitos de segurança durante o desenvolvimento de software.
5. A análise estática e dinâmica fornecem informações que permitem a correção de problemas existentes em um sistema.
6. Essas ferramentas contribuem para a identificação de vulnerabilidades que podem ser exploradas por atacantes.
7. A análise estática e dinâmica são importantes aliadas no processo de mitigação de riscos de segurança em aplicações.
8. A utilização dessas técnicas auxilia na detecção precoce de vulnerabilidades, reduzindo custos e esforços para corrigi-las posteriormente.
9. Empresas e desenvolvedores utilizam essas ferramentas como parte integrante de suas estratégias de segurança de software.
10. A análise estática e dinâmica são consideradas boas práticas de desenvolvimento seguro e são recomendadas por órgãos reguladores de segurança da informação.


