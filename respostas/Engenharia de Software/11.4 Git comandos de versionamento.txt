Item do edital: 11.4 Git comandos de versionamento   
 
1. Subtópico:
1. Conceitos básicos de Git e versionamento.
Assertivas:
1. O Git é um sistema de controle de versionamento amplamente utilizado no desenvolvimento de software.
2. O Git possui um repositório central onde são armazenadas todas as versões do código-fonte.
3. O versionamento no Git é baseado em snapshots, ou seja, ele armazena o estado completo do projeto a cada alteração.
4. O Git permite que diferentes ramificações (branches) sejam criadas para o desenvolvimento paralelo de funcionalidades.
5. No Git, é possível mesclar as alterações de diferentes branches por meio de um processo chamado de merge.
6. O Git possui uma ferramenta de gerenciamento de conflitos que ajuda a resolver alterações incompatíveis entre diferentes branches.
7. É possível desfazer alterações indesejadas no Git por meio de comandos específicos, como o git revert ou git reset.
8. O Git permite que o histórico de alterações seja consultado por meio do comando git log.
9. O Git possui uma área de preparação (staging area) onde são selecionados os arquivos que serão adicionados ao commit.
10. O Git oferece a possibilidade de colaboração em projetos, permitindo que diferentes desenvolvedores trabalhem simultaneamente no mesmo código-fonte.

2. Subtópico:
2. Comando 'git init': Criação de um novo repositório Git.
Assertivas:
1. O comando 'git init' é utilizado para iniciar um novo repositório Git vazio.
2. A execução do 'git init' cria uma nova pasta oculta chamada ".git" no diretório atual.
3. Após a criação do repositório com o 'git init', é possível adicionar e versionar arquivos utilizando o Git.
4. O 'git init' é o primeiro passo para iniciar o controle de versão de um projeto com o Git.
5. O comando 'git init' não faz a clonagem de um repositório existente, ele cria um novo repositório vazio.
6. O 'git init' é uma ação necessária antes de realizar o primeiro commit em um projeto Git.
7. A execução do comando 'git init' não requer conexão com um repositório remoto.
8. Iniciar um repositório Git com o 'git init' permite o rastreamento de mudanças nos arquivos ao longo do tempo.
9. O 'git init' configura o ambiente para o uso do Git, permitindo a realização de commits, branches e merges.
10. O 'git init' pode ser utilizado novamente para iniciar um novo repositório em um diretório já existente, substituindo o repositório anterior.

3. Subtópico:
3. Comando 'git clone': Clonagem de um repositório existente.
Assertivas:
1. O comando 'git clone' é utilizado para fazer uma clonagem de um repositório existente.
2. A clonagem realizada pelo comando 'git clone' permite criar uma cópia local do repositório.
3. O comando 'git clone' é utilizado para clonar tanto repositórios locais quanto repositórios remotos.
4. O comando 'git clone' pode ser utilizado para clonar repositórios hospedados em servidores como o GitHub, GitLab ou Bitbucket.
5. Ao executar o comando 'git clone', é necessário especificar a URL do repositório que será clonado.
6. A clonagem realizada pelo comando 'git clone' inclui todas as ramificações e histórico de commits do repositório original.
7. A clonagem de um repositório existente por meio do comando 'git clone' cria automaticamente um diretório local com o nome do repositório.
8. A clonagem de um repositório com o comando 'git clone' possibilita a colaboração e contribuição para o projeto de forma descentralizada.
9. A clonagem precisa de uma conexão com a internet para baixar os arquivos do repositório.
10. Após clonar um repositório com o comando 'git clone', o repositório local estará pronto para ser utilizado e manipulado através dos comandos Git.

4. Subtópico:
4. Comando 'git add': Adição de arquivos ao índice do Git.
Assertivas:
1. O comando 'git add' é utilizado para adicionar arquivos ao índice do Git.
2. O 'git add' é o primeiro passo para preparar os arquivos que serão commitados.
3. Com o 'git add', os arquivos selecionados passam a ser monitorados pelo Git.
4. O 'git add' permite ao Git rastrear mudanças nos arquivos adicionados.
5. O 'git add' pode ser utilizado para adicionar arquivos individuais ou um conjunto de arquivos.
6. Ao usar o 'git add' em um diretório, todos os arquivos presentes serão adicionados ao índice.
7. É necessário utilizar o comando 'git add' antes de efetuar o commit das alterações.
8. O 'git add' é utilizado para preparar as alterações antes de criar um novo snapshot no histórico do Git.
9. O 'git add' possibilita a organização e a seleção dos arquivos antes de commitá-los.
10. O 'git add' é uma etapa fundamental no fluxo de trabalho com o Git para rastrear mudanças de arquivos.

5. Subtópico:
5. Comando 'git commit': Registro das alterações no repositório.
Assertivas:
1. O comando 'git commit' é utilizado para registrar as alterações realizadas em um repositório Git.
2. O 'git commit' permite adicionar uma mensagem relacionada às alterações realizadas no código fonte.
3. O comando 'git commit' cria um snapshot do estado do repositório no momento em que as alterações são registradas.
4. Ao utilizar o 'git commit', apenas as alterações adicionadas previamente ao índice do Git são registradas.
5. O 'git commit' não envia as alterações para um repositório remoto, sendo necessária a utilização do comando 'git push' para isso.
6. O 'git commit' permite desfazer alterações específicas, através do uso de opções como '--amend' ou '--revert'.
7. Com o 'git commit', é possível visualizar o histórico de alterações no repositório, utilizando o comando 'git log'.
8. Ao utilizar o 'git commit', é possível especificar um autor para a alteração realizada, através do parâmetro '--author'.
9. Utilizando o 'git commit', é possível realizar alterações em vários arquivos simultaneamente, desde que estejam incluídos no índice do Git.
10. Após executar o comando 'git commit', é possível desfazer a alteração realizada, utilizando o comando 'git reset' com a opção '--soft'.

6. Subtópico:
6. Comando 'git status': Verificação do estado dos arquivos no repositório.
Assertivas:
1. O comando 'git status' é utilizado para verificar o estado dos arquivos em um repositório git.
2. O 'git status' exibe informações sobre arquivos modificados, arquivos adicionados e arquivos removidos no repositório.
3. O 'git status' também indica se há arquivos não acompanhados pelo Git no repositório.
4. O resultado do 'git status' fornece informações sobre as modificações realizadas em arquivos e a sua localização no repositório.
5. O 'git status' exibe as alterações realizadas e ainda não confirmadas (não adicionadas ao commit) nos arquivos do repositório.
6. Além das informações sobre os arquivos, o 'git status' pode fornecer informações sobre ramos (branches) e sobre o estado do repositório no geral.
7. O comando 'git status' é útil para verificar se todas as modificações relevantes foram adicionadas ao commit antes de realizar um push em um repositório remoto.
8. O 'git status' é uma ferramenta essencial para usuários do Git, pois permite uma visão geral rápida e atualizada do estado do repositório.
9. Com o 'git status', é possível identificar quais arquivos precisam ser adicionados ao repositório para que as alterações sejam rastreadas pelo Git.
10. O 'git status' é uma forma eficiente de verificar se o repositório está alinhado corretamente com o último commit realizado.

7. Subtópico:
7. Comando 'git pull' e 'git push': Atualização do repositório local a partir do remoto e vice-versa.
Assertivas:
1. O comando 'git pull' é utilizado para atualizar o repositório local a partir do remoto.
2. O comando 'git pull' combina as alterações feitas no repositório remoto com as alterações feitas no repositório local.
3. O comando 'git pull' realiza o download das alterações do branch remoto especificado para o branch local correspondente.
4. O comando 'git push' é utilizado para enviar as alterações do repositório local para o repositório remoto.
5. Ao usar o comando 'git push', as alterações feitas no branch local são enviadas para o branch remoto correspondente.
6. O comando 'git push' atualiza o repositório remoto com as alterações feitas no repositório local.
7. O comando 'git push' transfere os commits do branch local para o branch remoto especificado.
8. Tanto o comando 'git pull' quanto o comando 'git push' ajudam a manter os repositórios local e remoto sincronizados.
9. Com o comando 'git pull', é possível atualizar o repositório local com as últimas alterações feitas por outros membros da equipe no repositório remoto.
10. O comando 'git push' permite que outros membros da equipe acessem as alterações feitas no repositório local, atualizando o repositório remoto correspondente.

8. Subtópico:
8. Uso do comando 'git branch' para ger
Assertivas:
8. Uso do comando 'git branch' para gerenciar branches no Git:

1. O comando 'git branch' é utilizado para listar todas as branches existentes no repositório.
2. O comando 'git branch <nome_branch>' cria uma nova branch no repositório.
3. Para trocar de branch, utiliza-se o comando 'git checkout <nome_branch>'.
4. O comando 'git branch -d <nome_branch>' exclui uma branch no repositório.
5. O comando 'git branch -m <nome_antigo> <nome_novo>' renomeia uma branch existente.
6. Ao utilizar o comando 'git branch' sem nenhum parâmetro, é exibida uma lista das branches no repositório, indicando a branch atual com um asterisco.
7. A criação de uma nova branch através do comando 'git branch' não realiza a cópia dos arquivos do diretório de trabalho, apenas cria uma nova referência.
8. A branch padrão criada pelo Git é chamada de 'master', porém é possível renomeá-la para outro nome.
9. O comando 'git branch -D <nome_branch>' exclui uma branch mesmo que não tenha sido unificada com a branch atual.
10. O comando 'git branch -r' lista as branches remotas presentes no repositório.


