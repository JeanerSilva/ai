Pergunta Original: 1 Arquitetura de sistemas web-    
 
1. Subtópico:
1. Conceitos básicos de arquitetura de sistemas web
Assertivas:
1. A arquitetura de sistemas web envolve a estrutura e organização dos componentes de software utilizados para criar aplicações e serviços na internet.
2. A arquitetura de sistemas web busca maximizar a escalabilidade, a disponibilidade e o desempenho das aplicações distribuídas na web.
3. A arquitetura cliente-servidor é um dos modelos mais comuns na arquitetura de sistemas web, em que o cliente solicita informações ou recursos ao servidor.
4. A arquitetura em camadas é uma abordagem comum na arquitetura de sistemas web, em que as diferentes funcionalidades são separadas em camadas para facilitar a manutenibilidade e escalabilidade.
5. A arquitetura baseada em microsserviços é uma tendência crescente na arquitetura de sistemas web, em que as aplicações são divididas em pequenos serviços independentes que se comunicam entre si.
6. A arquitetura REST (Representational State Transfer) é muito utilizada na construção de APIs (Application Programming Interfaces) em sistemas web, permitindo a comunicação entre diferentes sistemas de forma simples e eficiente.
7. A arquitetura orientada a eventos é um paradigma em que as ações e reações do sistema são baseadas em eventos, que podem ser gerados internamente ou por estímulos externos.
8. A arquitetura orientada a serviços (SOA) é uma abordagem na qual as funcionalidades do sistema são expostas como serviços independentes, permitindo a reutilização e integração entre diferentes sistemas.
9. A arquitetura em nuvem (cloud computing) é uma tendência na arquitetura de sistemas web, em que as aplicações são hospedadas e executadas em servidores remotos, facilitando a escalabilidade e a disponibilidade.
10. A arquitetura de sistemas web está em constante evolução, com o surgimento de novas tecnologias e práticas que visam melhorar a segurança, a performance, a escalabilidade e a experiência do usuário.

2. Subtópico:
2. Protocolos HTTP e HTTPS
Assertivas:
1. O protocolo HTTP (Hypertext Transfer Protocol) é utilizado para transmitir informações na World Wide Web.
2. O protocolo HTTPS (Hypertext Transfer Protocol Secure) é uma versão segura do HTTP que utiliza criptografia para proteger a integridade e confidencialidade dos dados transmitidos.
3. O protocolo HTTP funciona na camada de aplicação do modelo de referência OSI.
4. O protocolo HTTPS utiliza criptografia SSL/TLS (Secure Sockets Layer/Transport Layer Security) para estabelecer uma conexão segura entre o cliente e o servidor.
5. O protocolo HTTP utiliza a porta padrão 80.
6. O protocolo HTTPS utiliza a porta padrão 443.
7. O protocolo HTTP não fornece garantia de que a conexão seja segura contra interceptação ou alteração dos dados transmitidos.
8. O protocolo HTTPS utiliza certificados digitais para autenticar a identidade dos servidores.
9. O protocolo HTTPS é amplamente utilizado em transações online, como compras em sites de comércio eletrônico e acesso a serviços bancários.
10. O protocolo HTTP é menos seguro do que o HTTPS, pois não oferece criptografia dos dados transmitidos.

3. Subtópico:
3. Arquitetura cliente-servidor e suas características
Assertivas:
1) Na arquitetura cliente-servidor, o cliente e o servidor são componentes independentes que se comunicam através de uma rede.
2) O cliente é responsável por solicitar serviços ao servidor, enquanto o servidor é responsável por processar e responder a essas solicitações.
3) A arquitetura cliente-servidor permite uma distribuição hierárquica de tarefas, onde o servidor concentra os recursos e serviços compartilhados.
4) O cliente na arquitetura cliente-servidor pode ser um dispositivo como um computador, smartphone ou tablet.
5) A comunicação entre o cliente e o servidor na arquitetura cliente-servidor geralmente é baseada no protocolo HTTP.
6) A arquitetura cliente-servidor permite a escalabilidade, facilitando a adição de novos clientes e servidores conforme necessário.
7) A arquitetura cliente-servidor é amplamente utilizada na internet, onde diversos sites e aplicativos seguem esse modelo para atender a grandes volumes de solicitações.
8) A arquitetura cliente-servidor possibilita a separação das camadas de aplicação, permitindo a reutilização de componentes e a flexibilidade na implementação de mudanças.
9) Na arquitetura cliente-servidor, os servidores são projetados para serem confiáveis e disponíveis, garantindo mínima interrupção de serviços.
10) A arquitetura cliente-servidor oferece um sistema seguro, permitindo a autenticação e autorização dos usuários antes do acesso aos recursos do servidor.

4. Subtópico:
4. Tecnologias front-end e back-end em sistemas web
Assertivas:
1. As tecnologias front-end referem-se às ferramentas e linguagens utilizadas para desenvolver a interface visual de um sistema web.
2. O back-end de um sistema web engloba as tecnologias responsáveis pelo processamento e armazenamento dos dados, bem como pela lógica de funcionamento do sistema.
3. As tecnologias front-end mais comumente utilizadas incluem HTML, CSS e JavaScript.
4. O HTML é responsável por estruturar o conteúdo de uma página web, enquanto o CSS é utilizado para estilizar e formatar o layout.
5. O JavaScript é uma linguagem de programação utilizada para adicionar interatividade e funcionalidades dinâmicas a um sistema web.
6. Entre as tecnologias back-end mais populares estão PHP, Python, Java e C#.
7. O PHP é uma linguagem de programação amplamente utilizada para desenvolver sistemas web e é conhecido por ser fácil de aprender e ter uma comunidade extensa.
8. Python é uma linguagem versátil e poderosa que tem uma série de frameworks e bibliotecas específicas para desenvolvimento web, como Flask e Django.
9. Java é uma linguagem de programação amplamente utilizada para desenvolvimento web, sendo reconhecida pela sua segurança e escalabilidade.
10. C# é uma linguagem de programação da Microsoft que, juntamente com o framework .NET, é bastante utilizada para o desenvolvimento de sistemas web robustos e escaláveis.

5. Subtópico:
5. Segurança em sistemas web: criptografia, autenticação e autorização 
Assertivas:
1. A criptografia em sistemas web é utilizada para garantir a confidencialidade das informações, impedindo que sejam lidas por terceiros não autorizados.
2. A autenticação em sistemas web é o processo de verificação da identidade de um usuário ou sistema, geralmente por meio de login e senha.
3. A autorização em sistemas web envolve definir quais recursos ou funcionalidades um usuário tem permissão de acessar, com base nas suas credenciais.
4. Os métodos de criptografia assimétrica garantem a segurança das informações durante a transmissão, utilizando um par de chaves: pública e privada.
5. A autenticação por fatores múltiplos (MFA) é uma prática recomendada para aumentar a segurança em sistemas web, exigindo mais de uma forma de autenticação.
6. A implementação de um protocolo seguro como HTTPS em sistemas web garante uma camada adicional de proteção, criptografando a comunicação entre o cliente e o servidor.
7. O certificado SSL/TLS é uma componente essencial para garantir a autenticidade e integridade dos dados transmitidos em sistemas web.
8. A autenticação de dois fatores (2FA) é um método que combina algo que o usuário sabe (senha) com algo que o usuário possui (como um token físico ou código enviado via SMS).
9. A criptografia de dados em repouso é importante para garantir a segurança das informações armazenadas em sistemas web, protegendo-as contra acesso não autorizado.
10. A utilização de políticas de senhas fortes e ações de senhas periódicas é uma medida de segurança fundamental em sistemas web, pois previne o acesso não autorizado a contas de usuários.

6. Subtópico:
6. Servidores Web: Apache, Nginx, IIS 
Assertivas:
1. O Apache é um servidor web de código aberto amplamente utilizado em ambientes Linux e Unix.
2. O Nginx, também conhecido como "engine x", é um servidor web de alto desempenho conhecido por sua capacidade de lidar com altas cargas de tráfego.
3. O IIS (Internet Information Services) é um servidor web desenvolvido pela Microsoft para o sistema operacional Windows.
4. O Apache oferece suporte nativo a linguagens de programação como PHP, Perl e Python.
5. O Nginx tem uma arquitetura assíncrona que permite lidar com várias solicitações simultaneamente de forma eficiente.
6. O IIS oferece integração nativa com outras tecnologias Microsoft, como o .NET Framework.
7. O Apache tem uma configuração baseada em arquivos de texto, facilitando a modificação e o gerenciamento.
8. O Nginx é frequentemente usado como um proxy reverso para equilibrar a carga entre vários servidores de aplicativos.
9. O IIS oferece recursos avançados de autorização e autenticação, incluindo integração com o Active Directory.
10. O Apache, o Nginx e o IIS são os três servidores web mais populares atualmente utilizados na Internet.

7. Subtópico:
7. Modelos de arquitetura: MVC (Model-View-Controller), MVVM (Model-View-ViewModel)
Assertivas:
1. O padrão de arquitetura MVC (Model-View-Controller) é amplamente utilizado no desenvolvimento de sistemas de software.
2. O Modelo (Model) em MVC representa a lógica de negócio e o armazenamento dos dados do sistema.
3. A Visão (View) em MVC é responsável pela apresentação da interface gráfica aos usuários.
4. O Controlador (Controller) em MVC faz a mediação entre o Modelo e a Visão, controlando o fluxo de dados e eventos.
5. O padrão de arquitetura MVVM (Model-View-ViewModel) é uma variação do MVC, bastante utilizado em aplicações de interface gráfica.
6. O Modelo (Model) em MVVM representa a lógica de negócio e o armazenamento dos dados do sistema, assim como no MVC.
7. A Visão (View) em MVVM é responsável pela apresentação da interface gráfica aos usuários, da mesma forma que no MVC.
8. O ViewModel (ViewModel) em MVVM é responsável por manter o estado da View e fornecer os dados necessários para sua correta apresentação.
9. O padrão MVVM foi introduzido originalmente pela Microsoft para o desenvolvimento de aplicações no framework WPF (Windows Presentation Foundation).
10. Tanto o MVC quanto o MVVM visam a separação de responsabilidades e a modularização do código, facilitando a manutenção e evolução de sistemas.

8. Subtópico:
8. Web Services: SOAP e RESTful APIs 
Assertivas:
1. Web Services são soluções de comunicação entre sistemas que utilizam a internet como meio de troca de informações.
2. O protocolo SOAP (Simple Object Access Protocol) é um dos principais padrões de comunicação utilizados em Web Services.
3. O protocolo SOAP é baseado em XML (eXtensible Markup Language) para estruturação das mensagens enviadas e recebidas pelos serviços.
4. Uma vantagem do protocolo SOAP é que ele suporta diversos protocolos de transporte, como HTTP, SMTP e TCP.
5. As APIs RESTful (Representational State Transfer) são uma alternativa aos serviços SOAP, sendo baseadas em princípios de arquitetura web.
6. Uma das principais características de uma API RESTful é que ela utiliza os métodos HTTP (GET, POST, PUT, DELETE) para interação com os recursos disponibilizados.
7. Uma API RESTful utiliza representações de dados, como JSON (JavaScript Object Notation) ou XML, para troca de informações entre o cliente e o servidor.
8. Uma API RESTful utiliza URLs amigáveis para identificar os recursos, tornando-as mais intuitivas e fáceis de utilizar.
9. Uma vantagem das APIs RESTful é que elas são mais leves e possuem menor overhead em relação aos serviços SOAP.
10. Tanto o protocolo SOAP quanto as APIs RESTful são amplamente utilizados na integração de sistemas e na construção de aplicações distribuídas.

9. Subtópico:
9. Bancos de dados para sistemas web: SQL vs NoSQL 
Assertivas:
1. Os sistemas web frequentemente utilizam bancos de dados para armazenar e gerenciar informações.
2. SQL e NoSQL são duas abordagens diferentes em bancos de dados para sistemas web.
3. SQL é uma linguagem de consulta estruturada, utilizada em bancos de dados relacionais.
4. NoSQL é uma abordagem que geralmente não utiliza SQL e é amplamente utilizada em bancos de dados não relacionais.
5. Bancos de dados SQL são baseados em um esquema fixo, o que significa que a estrutura das tabelas deve ser definida antecipadamente.
6. Bancos de dados NoSQL podem ser baseados em esquemas flexíveis e adaptáveis, permitindo uma maior agilidade na evolução do sistema.
7. Bancos de dados SQL são adequados para aplicações com necessidades de transações complexas e relacionamentos bem definidos entre entidades.
8. Bancos de dados NoSQL são adequados para aplicações com alta escalabilidade, flexibilidade de estrutura e necessidade de processamento de grandes volumes de dados.
9. Bancos de dados SQL são amplamente utilizados em aplicações que exigem consistência de dados.
10. Bancos de dados NoSQL são frequentemente escolhidos para aplicações que priorizam a escalabilidade horizontal e o armazenamento e recuperação de grande quantidade de dados não estruturados.

10. Subtópico:
10. Desenvolvimento responsivo para diferentes dispositivos (
Assertivas:
1. O desenvolvimento responsivo para diferentes dispositivos consiste na criação de interfaces que se adaptam automaticamente às diferentes resoluções e tamanhos de tela.
2. O desenvolvimento responsivo permite que um site ou aplicativo seja visualizado de forma otimizada em diferentes dispositivos, como smartphones, tablets e computadores.
3. O desenvolvimento responsivo utiliza técnicas como media queries e grids para ajustar o layout e a disposição dos elementos conforme o dispositivo utilizado.
4. A vantagem do desenvolvimento responsivo é que não é necessário criar versões separadas de um site ou aplicativo para cada tipo de dispositivo, o que facilita a manutenção e reduz os custos de desenvolvimento.
5. O desenvolvimento responsivo, quando bem aplicado, melhora a experiência do usuário ao proporcionar uma navegação fluída e sem necessidade de redimensionar componentes manualmente.
6. Uma das principais premissas do desenvolvimento responsivo é a utilização de imagens e vídeos fluidos, que se adaptam ao tamanho da tela do dispositivo.
7. O desenvolvimento responsivo exige o uso de técnicas de codificação modernas, como HTML5 e CSS3, que permitem a criação de layouts flexíveis.
8. A otimização de um site para dispositivos móveis é um fator importante para melhorar o posicionamento nos resultados de buscas do Google, o que torna o desenvolvimento responsivo uma prática relevante para o SEO.
9. O desenvolvimento responsivo está em consonância com as tendências de mercado, uma vez que o uso de dispositivos móveis tem crescido significativamente nos últimos anos.
10. O desenvolvimento responsivo é uma habilidade valorizada no mercado de trabalho, uma vez que muitas empresas buscam profissionais capazes de criar interfaces adaptáveis e eficientes para diferentes tipos de dispositivos.


