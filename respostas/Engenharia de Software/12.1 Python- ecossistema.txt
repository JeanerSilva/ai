Item do edital: 12.1 Python- ecossistema   
 
1. Subtópico:
1. Conceitos básicos e fundamentos de Python
Assertivas:
1. Em Python, a indentação correta é essencial para definir a estrutura de um bloco de código.
2. A linguagem Python é interpretada e de tipagem dinâmica.
3. Python possui uma sintaxe clara e legível, o que facilita o entendimento e a escrita de programas.
4. Em Python, é possível definir funções para reutilizar blocos de código em diferentes partes do programa.
5. O Python é uma linguagem de alto nível, o que significa que possui abstrações que facilitam a vida do programador, lidando com detalhes de baixo nível automaticamente.
6. Em Python, é possível utilizar listas, tuplas, dicionários e conjuntos para armazenar e manipular dados.
7. Python possui um sistema de gerenciamento de exceções que permite capturar e tratar erros durante a execução do programa.
8. É possível importar bibliotecas em Python para utilizar funcionalidades adicionais em seus programas.
9. Python possui um vasto ecossistema de bibliotecas e frameworks que facilitam o desenvolvimento de diferentes tipos de aplicações.
10. O Python é amplamente utilizado em áreas como web development, data science e automação de tarefas.

2. Subtópico:
2. Sintaxe e estrutura de programação em Python
Assertivas:
1. A sintaxe de Python é conhecida por sua simplicidade e legibilidade.
2. Python permite a declaração de funções com a palavra-chave "def", seguida do nome da função e de parênteses contendo os parâmetros.
3. Em Python, a declaração de variáveis não requer a especificação de um tipo, tornando a linguagem mais flexível e dinâmica.
4. Em Python, a indentação correta é fundamental para a correta execução do código, pois define a estrutura de blocos de instruções.
5. Python possui uma estrutura de controle de fluxo que inclui condicionais (if, elif, else) e laços de repetição (for, while).
6. Em Python, é possível criar estruturas de dados como listas, tuplas e dicionários para armazenar e manipular dados.
7. Em Python, é possível utilizar a estrutura de repetição "for" para percorrer elementos de uma lista ou sequência.
8. Python possui uma ampla biblioteca padrão que inclui módulos para realizar diversas tarefas, como manipulação de strings, acesso a banco de dados e comunicação de rede.
9. Python suporta a programação orientada a objetos, permitindo a criação de classes e objetos para modelar e organizar o código.
10. Em Python, é possível importar módulos externos para aproveitar funcionalidades adicionais, facilitando o desenvolvimento de programas complexos.

3. Subtópico:
3. Tipos de dados, variáveis e operadores em Python
Assertivas:
1. O Python é uma linguagem de programação que permite a criação de variáveis de diferentes tipos de dados, tais como: inteiro, flutuante, string e booleano.
2. Em Python, as variáveis são criadas dinamicamente, ou seja, não é necessário declarar explicitamente o tipo de dado que ela armazenará.
3. Os operadores aritméticos em Python permitem realizar cálculos matemáticos básicos, como soma, subtração, multiplicação e divisão.
4. Além dos operadores aritméticos, Python também possui operadores de comparação, que são utilizados para comparar valores e retornar um valor booleano.
5. Os operadores lógicos em Python permitem fazer operações lógicas, como negação, conjunção (AND) e disjunção (OR).
6. Python também oferece operadores de atribuição, que permitem atribuir um valor a uma variável de forma simples e direta.
7. É possível realizar operações matemáticas mais avançadas em Python utilizando bibliotecas específicas, como a biblioteca "math".
8. Python também disponibiliza operadores de incremento e decremento, que facilitam na manipulação de variáveis numéricas.
9. É possível realizar operações de concatenação de strings em Python, utilizando o operador de adição (+).
10. Além dos tipos de dados básicos, Python também permite a criação de estruturas de dados mais complexas, como listas, tuplas, dicionários e conjuntos, que possuem operações específicas para manipulação dos dados armazenados.

4. Subtópico:
4. Controle de fluxo: loops e condicionais em Python
Assertivas:
1. Em Python, é possível criar loops utilizando as estruturas de controle "for" e "while".
2. Uma estrutura de controle "if" em Python permite avaliar uma expressão e executar um bloco de código caso a condição seja verdadeira.
3. O operador "elif" em Python é utilizado para testar múltiplas condições dentro de uma estrutura "if".
4. A palavra-chave "else" em Python é utilizada para executar um bloco de código quando todas as condições em uma estrutura "if" forem falsas.
5. Em Python, o comando "break" é utilizado para interromper a execução de um loop prematuramente.
6. A instrução "continue" em Python é utilizada para pular o restante do código em um loop e iniciar a próxima iteração.
7. Em Python, é possível aninhar estruturas de controle, como loops e condicionais, para criar lógicas mais complexas.
8. A palavra-chave "pass" em Python é utilizada para criar blocos vazios dentro de estruturas de controle que serão preenchidos posteriormente.
9. Python permite o uso de operadores lógicos, como "and", "or" e "not", para combinar ou negar condições em estruturas de controle.
10. É possível utilizar os operadores de comparação em Python, tais como "==", ">", "<", ">=", "<=" e "!=", para avaliar condições em estruturas de controle.

5. Subtópico:
5. Funções, módulos e pacotes em Python
Assertivas:
1. Os módulos em Python possibilitam a criação de programas com maior organização e modularidade, permitindo a reutilização de código.
2. Um pacote em Python é um diretório que contém módulos relacionados e um arquivo especial chamado __init__.py.
3. Uma função em Python é um bloco de código reutilizável que realiza uma tarefa específica e pode receber parâmetros e retornar valores.
4. Funções em Python podem ser definidas com a palavra-chave "def", seguida pelo nome da função e parênteses contendo os parâmetros.
5. É possível retornar múltiplos valores em uma função Python usando a técnica de desempacotamento de tuplas.
6. Funções em Python podem ser chamadas recursivamente, ou seja, uma função pode chamar a si mesma durante a execução.
7. O comando "import" em Python é utilizado para importar módulos ou pacotes para uso no programa.
8. É possível renomear um módulo ou função ao importá-lo utilizando a palavra-chave "as" em Python.
9. O uso do comando "from" seguido do nome do módulo ou pacote permite importar especificamente funções ou atributos para uso direto no programa.
10. Em Python, é possível criar funções anônimas usando a palavra-chave "lambda", geralmente utilizadas como argumentos de outras funções.

6. Subtópico:
6. Manipulação de arquivos e exceções em Python 
Assertivas:
1. A manipulação de arquivos em Python possibilita a leitura, escrita e modificação de conteúdo em arquivos.
2. O tratamento de exceções em Python permite lidar com erros e falhas durante a execução de um programa.
3. O comando "open" em Python é utilizado para abrir um arquivo e retorna um objeto do tipo "file".
4. É possível ler o conteúdo de um arquivo em Python utilizando o método "read" do objeto "file".
5. O método "write" é utilizado para escrever conteúdo em um arquivo aberto em modo de escrita.
6. O método "close" é utilizado para fechar um arquivo aberto em Python e liberar recursos do sistema.
7. O tratamento de exceções em Python é feito utilizando as palavras-chave "try" e "except".
8. É possível tratar diferentes tipos de exceções em Python utilizando cláusulas "except" específicas.
9. O comando "finally" em Python é utilizado para executar um bloco de código independentemente de ocorrer exceção ou não.
10. A utilização correta e eficiente de manipulação de arquivos e exceções em Python é essencial para garantir a integridade e segurança dos dados.

7. Subtópico:
7. Programação orientada a objetos com Python 
Assertivas:
1) A programação orientada a objetos com Python é um paradigma que permite organizar e reutilizar código de forma modular.
2) Em Python, é possível criar classes que representam objetos com atributos e métodos próprios.
3) A encapsulação é um conceito fundamental na programação orientada a objetos, e Python permite definir métodos e atributos como públicos, protegidos ou privados.
4) A herança é um princípio importante na orientação a objetos, e Python suporta a criação de hierarquias de classes através do mecanismo de herança.
5) É possível usar o polimorfismo em Python, permitindo que objetos de classes diferentes possam ser tratados de forma genérica.
6) O encapsulamento em Python pode ser obtido através dos modificadores de acesso como o "public", "protected" e "private".
7) A delegação é uma técnica comum em Python para reutilizar código, permitindo que uma classe utilize métodos de outra classe.
8) Python suporta múltipla herança, possibilitando que uma classe herde características de várias superclasses.
9) O polimorfismo em Python permite que um método tenha várias formas, dependendo do objeto que o chama.
10) Em Python, é possível utilizar um construtor (\_\_init\_\_) para atribuir valores iniciais aos atributos de uma classe no momento da sua criação.

8. Subtópico:
8. Bibliotecas padrão do ecossistema Python (como NumPy, Pandas, Matplotlib)
Assertivas:
1. As bibliotecas NumPy, Pandas e Matplotlib são consideradas como parte das bibliotecas padrão do ecossistema Python.
2. A biblioteca NumPy é amplamente utilizada para cálculos numéricos e manipulação de arrays multidimensionais.
3. Pandas é uma biblioteca poderosa para manipulação e análise de dados em Python, oferecendo estruturas de dados como DataFrames.
4. A biblioteca Matplotlib é frequentemente utilizada para criar visualizações gráficas de dados em Python.
5. NumPy fornece funcionalidades para processamento de áudio e vídeo em Python.
6. Pandas permite a leitura de dados de uma variedade de fontes, como arquivos CSV, Excel ou bancos de dados SQL.
7. Matplotlib oferece suporte a uma ampla gama de tipos de gráficos, incluindo gráficos de linha, gráficos de barras e gráficos de dispersão.
8. NumPy é essencial para muitas bibliotecas científicas e de aprendizado de máquina em Python.
9. Pandas oferece ferramentas para análise exploratória de dados, como filtragem, agrupamento e ordenação.
10. Matplotlib permite a personalização detalhada das configurações de gráfico, como cores, títulos e rótulos de eixos.

9. Subtópico:
9. Desenvolvimento web com Django ou Flask no ecossistema Python 
Assertivas:
1. Django e Flask são frameworks populares utilizados para desenvolvimento web no ecossistema Python.
2. Tanto Django quanto Flask possuem uma curva de aprendizado relativamente baixa, facilitando o desenvolvimento de aplicações web.
3. O Django é mais robusto e possui mais recursos prontos para uso em comparação ao Flask, o que o torna uma escolha comum para projetos de médio a grande porte.
4. Flask é mais flexível e permite maior liberdade de configuração em relação ao Django, sendo uma opção preferida para projetos menores e mais simples.
5. Tanto Django quanto Flask são suportados pela comunidade Python e possuem vastas documentações e recursos disponíveis.
6. Ambos os frameworks seguem o padrão MVC (Model-View-Controller), permitindo a separação clara das responsabilidades entre o modelo de dados, a lógica de negócios e a interface do usuário.
7. Django e Flask possuem suporte nativo a bancos de dados, tornando a integração com sistemas de gerenciamento de banco de dados (RDBMS) simples e eficiente.
8. Ambos os frameworks possuem suporte a criação de APIs RESTful, permitindo o desenvolvimento de aplicações web com arquitetura de serviços.
9. Django e Flask oferecem recursos para autenticação, controle de acesso e proteção contra ataques de segurança comuns em aplicações web.
10. Tanto Django quanto Flask são utilizados por grandes empresas e organizações em suas aplicações web, demonstrando sua confiabilidade e robustez.

10. Subtópico:
10. Testes unitários e debugging no ambiente de desenvolvimento do python
Assertivas:
1. Testes unitários são utilizados no ambiente de desenvolvimento do Python para verificar o correto funcionamento de partes específicas do código.
2. Os testes unitários no Python são realizados por meio do uso de bibliotecas como o unittest e o pytest.
3. A prática de escrever testes unitários auxilia na detecção precoce de erros e facilita a manutenção do código.
4. Ao realizar testes unitários no ambiente de desenvolvimento do Python, é possível identificar e corrigir bugs antes da implantação do software.
5. O processo de debugging no ambiente de desenvolvimento do Python envolve a identificação e solução de erros no código, através de técnicas de depuração.
6. Ao utilizar recursos de debugging no Python, como breakpoints e inspeção de variáveis, desenvolvedores podem identificar a causa raiz de problemas no código.
7. Durante o processo de debugging no Python, é possível rastrear a execução do programa linha por linha para entender o fluxo e a lógica utilizada.
8. O uso de ferramentas externas, como o PDB (Python Debugger), auxilia no processo de debugging no ambiente de desenvolvimento do Python.
9. O uso de logging no Python é uma prática comum no processo de debugging, pois permite registrar mensagens de depuração em tempo de execução.
10. Tanto os testes unitários quanto o processo de debugging são essenciais para garantir a qualidade e robustez do software desenvolvido em Python.


