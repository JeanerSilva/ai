Item do edital: 4. Programação funcional.   
 
A programação funcional é um paradigma de programação que se baseia no conceito de funções matemáticas puras, ou seja, funções que não possuem efeitos colaterais e sempre produzem o mesmo resultado para a mesma entrada. Algumas características importantes da programação funcional incluem:

1. Imutabilidade: Os dados são tratados como imutáveis, ou seja, uma vez criados, não podem ser alterados. Em vez disso, novos dados são criados a partir dos dados existentes.

2. Funções de primeira classe: As funções são tratadas como cidadãos de primeira classe, o que significa que podem ser atribuídas a variáveis, passadas como argumentos para outras funções e retornadas como valores de outras funções.

3. Recursão: A recursão é amplamente utilizada na programação funcional para substituir loops. Funções recursivas chamam a si mesmas para resolver um problema de forma iterativa.

4. Funções de ordem superior: Funções de ordem superior são funções que podem receber outras funções como argumentos e/ou retornar funções como resultado. Isso permite a composição de funções de forma mais flexível.

5. Transparência referencial: A transparência referencial é a propriedade de que uma função sempre retornará o mesmo resultado para a mesma entrada, sem efeitos colaterais. Isso facilita a compreensão e o teste das funções.

6. Composição de funções: A composição de funções é uma técnica comum na programação funcional, onde várias funções são combinadas para formar uma nova função.

Alguns exemplos de linguagens de programação que suportam a programação funcional incluem Haskell, Clojure, Scala, F#, entre outras. A programação funcional é especialmente útil para lidar com problemas complexos de forma mais concisa e elegante, além de facilitar a paralelização e a execução em ambientes distribuídos.
 ===
