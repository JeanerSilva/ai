Item do edital: 2.3 Modelagens de dados- nosql.    
 
1. Subtópico:
1. Conceitos fundamentais de NoSQL e sua importância na modelagem de dados.
Assertivas:
1. NoSQL é um conceito que se refere a um conjunto de tecnologias de banco de dados não-relacionais.
2. Diferentemente dos bancos de dados relacionais, os bancos de dados NoSQL não utilizam esquemas rígidos de tabela.
3. A escalabilidade horizontal é uma das principais características dos bancos de dados NoSQL.
4. A modelagem de dados em bancos de dados NoSQL é baseada em estruturas de dados flexíveis, como documentos, grafos e chaves-valor.
5. Bancos de dados NoSQL são amplamente utilizados em aplicações que exigem alta disponibilidade e desempenho.
6. A flexibilidade dos bancos de dados NoSQL permite armazenar dados não estruturados e sem um formato fixo.
7. A adoção de bancos de dados NoSQL pode reduzir a complexidade da modelagem de dados em certos cenários.
8. Bancos de dados NoSQL são frequentemente usados em aplicações web e mobile que precisam lidar com grandes volumes de dados.
9. Os bancos de dados NoSQL são uma alternativa viável para superar as limitações dos bancos de dados relacionais em relação à escalabilidade.
10. A escolha entre usar bancos de dados NoSQL ou relacionais depende das características e requisitos específicos de cada projeto.

2. Subtópico:
2. Diferenças entre os bancos de dados SQL e NoSQL.
Assertivas:
1. Os bancos de dados SQL são baseados em estruturas de tabelas relacionais, enquanto os bancos de dados NoSQL utilizam modelos de dados não relacionais.
2. Os bancos de dados SQL possuem esquemas rígidos, onde é necessário definir previamente a estrutura da tabela e seus tipos de dados, já os bancos de dados NoSQL possuem esquemas flexíveis, permitindo que os dados sejam armazenados sem a necessidade de um esquema pré-definido.
3. Em bancos de dados SQL, a consulta é realizada principalmente por meio da linguagem SQL (Structured Query Language), enquanto nos bancos de dados NoSQL, as consultas variam de acordo com o tipo de banco de dados, podendo ser feitas através de APIs específicas ou utilizando uma linguagem de consulta própria.
4. Bancos de dados SQL são mais eficientes quando se trata de consultas complexas que envolvem junções de tabelas, enquanto bancos de dados NoSQL são mais adequados para situações em que é necessário lidar com grandes quantidades de dados não estruturados.
5. Devido ao seu esquema flexível, os bancos de dados NoSQL são mais adequados para aplicações web escaláveis, que precisam lidar com grandes volumes de dados e permitir atualizações contínuas do esquema.
6. Bancos de dados SQL são amplamente utilizados em sistemas de gestão de bancos de dados relacionais, como MySQL, Oracle e PostgreSQL, enquanto bancos de dados NoSQL são mais comumente encontrados em sistemas de bancos de dados orientados a documentos, como MongoDB e Couchbase.
7. Bancos de dados SQL são projetados para garantir a consistência dos dados, seguindo o ACID (Atomicidade, Consistência, Isolamento e Durabilidade), enquanto bancos de dados NoSQL geralmente priorizam a disponibilidade e a tolerância a falhas, seguindo o modelo BASE (Basically Available, Soft state, Eventually consistent).
8. Em termos de desempenho, bancos de dados NoSQL são frequentemente mais rápidos em operações de leitura e gravação em comparação com bancos de dados SQL, devido à sua estrutura de dados não relacionais.
9. Bancos de dados SQL são mais adequados para aplicações que exigem transações complexas, garantindo a integridade dos dados, enquanto bancos de dados NoSQL são mais adequados para aplicações orientadas a documentos ou que precisam lidar com dados não estruturados.
10. Em termos de escalabilidade horizontal, onde é necessário adicionar mais servidores para lidar com o crescimento da demanda, os bancos de dados NoSQL geralmente superam os bancos de dados SQL, devido à sua arquitetura distribuída e capacidade de expansão mais flexível.

3. Subtópico:
3. Tipos de bancos de dados NoSQL: chave-valor, documento, coluna e grafo.
Assertivas:
Vamos lá! Aqui estão 10 afirmativas diretas e verdadeiras sobre os tipos de bancos de dados NoSQL: chave-valor, documento, coluna e grafo:

1. O banco de dados NoSQL chave-valor é baseado em uma estrutura que armazena os dados como pares chave-valor, permitindo rápida recuperação dos valores com base nas chaves.
2. O banco de dados NoSQL documento é uma forma de armazenar dados semelhante a outros bancos de dados, como o modelo relacional, mas em vez de usar tabelas, utiliza documentos onde as informações estão em formato de chave-valor complexo.
3. O banco de dados NoSQL coluna armazena dados em formato de colunas, em oposição ao armazenamento tradicional em linhas como é comum em bancos de dados relacionais.
4. O banco de dados NoSQL grafo modela os dados como um conjunto de nós (entidades) interconectados por meio de relações, permitindo uma representação eficiente de relacionamentos complexos entre os dados.
5. Um exemplo conhecido de banco de dados NoSQL chave-valor é o Redis, que tem uma estrutura simples e de alta performance.
6. MongoDB é um exemplo popular de banco de dados NoSQL documento, sendo flexível o suficiente para armazenar dados com diferentes estruturas.
7. O Cassandra é um exemplo amplamente utilizado de banco de dados NoSQL coluna, famoso pela sua capacidade de escalabilidade horizontal e tolerância a falhas.
8. O Neo4j é um exemplo proeminente de banco de dados NoSQL grafo, permitindo consultas eficientes em estruturas de dados complexas com milhões de nós e relacionamentos.
9. Os bancos de dados NoSQL oferecem escalabilidade horizontal, o que significa que é possível aumentar a capacidade de armazenamento e processamento adicionando mais servidores ao sistema.
10. Os bancos de dados NoSQL são amplamente utilizados em aplicações que requerem alta performance, grande volume de dados e flexibilidade na estrutura, como redes sociais, sistemas de recomendação e análise de dados em tempo real.

4. Subtópico:
4. Princípios do teorema CAP (Consistência, Disponibilidade e Tolerância à Partição) em bancos de dados NoSQL.
Assertivas:
1. O teorema CAP é uma teoria fundamentada nos princípios de consistência, disponibilidade e tolerância à partição em bancos de dados NoSQL.
2. O princípio de consistência no teorema CAP significa que todos os nós de um banco de dados NoSQL possuem a mesma visão dos dados em todos os momentos.
3. O princípio de disponibilidade no teorema CAP garante que, mesmo em caso de falhas, um banco de dados NoSQL deve permanecer disponível para consultas e operações.
4. A tolerância à partição é o princípio do teorema CAP que permite que um banco de dados NoSQL continue a funcionar mesmo em caso de falhas de comunicação entre partes do sistema.
5. O teorema CAP afirma que, em um sistema distribuído, é impossível garantir simultaneamente consistência, disponibilidade e tolerância à partição.
6. Bancos de dados NoSQL, por sua natureza, priorizam a disponibilidade e tolerância à partição em detrimento da consistência.
7. A escolha entre consistência e disponibilidade em bancos de dados NoSQL é um trade-off dependente das necessidades e requisitos específicos de cada aplicação.
8. A consistência eventual é um modelo de consistência utilizado em bancos de dados NoSQL, em que as atualizações são propagadas para todos os nós em algum momento no futuro.
9. Bancos de dados NoSQL do tipo key-value, como o Cassandra, são exemplos de sistemas que seguem o teorema CAP, priorizando disponibilidade e tolerância à partição.
10. O teorema CAP é relevante para o projeto e implementação de bancos de dados NoSQL, pois auxilia na compreensão dos trade-offs envolvidos na escolha das características de um sistema distribuído.

5. Subtópico:
5. Estratégias para modelagem de dados em NoSQL: denormalização, agregação e indexação.
Assertivas:
1. A denormalização é uma estratégia utilizada na modelagem de dados em NoSQL que consiste em duplicar informações em diferentes documentos para otimizar consultas e aumentar a eficiência das operações.
2. A agregação é um processo de combinação de múltiplos documentos em um único resultado para fins de análise e consulta, sendo uma estratégia comum na modelagem de dados em NoSQL.
3. A indexação é uma técnica importante na modelagem de dados em NoSQL, pois permite o acesso rápido aos dados, garantindo consultas eficientes e evitando a busca exaustiva em toda a coleção.
4. A denormalização pode ser uma estratégia adequada em casos onde a performance e a velocidade de leitura são priorizadas sobre a economia de espaço de armazenamento.
5. A agregação em NoSQL pode ser útil em cenários onde as consultas precisam calcular valores agregados, como médias, mínimos, máximos, somas, entre outros.
6. A indexação em NoSQL é geralmente realizada por mecanismos internos dos bancos de dados NoSQL, sendo utilizada para acelerar a recuperação de dados em consultas.
7. A denormalização em NoSQL pode simplificar as consultas, evitando a necessidade de múltiplas operações de junção entre documentos.
8. A agregação em NoSQL é especialmente útil em sistemas que envolvem big data, onde é necessário processar grandes volumes de dados para análise.
9. A indexação em NoSQL pode ser configurada para otimizar consultas específicas, garantindo performance mesmo em bases de dados de alta escala.
10. A escolha entre as estratégias de denormalização, agregação e indexação em NoSQL depende das necessidades e características específicas de cada aplicação, sendo importante considerar os trade-offs envolvidos em cada abordagem.

6. Subtópico:
6. Vantagens e desvantagens da utilização dos bancos de dados NoSQL na modelagem de dados.
Assertivas:
1. Os bancos de dados NoSQL oferecem maior escalabilidade horizontal, o que permite lidar com grandes volumes de dados de maneira mais eficiente.
2. Uma das vantagens dos bancos de dados NoSQL é a capacidade de armazenar dados não estruturados ou sem uma estrutura fixa, como documentos JSON ou registros de log.
3. A utilização de bancos de dados NoSQL pode resultar em maior velocidade de leitura e gravação de dados se comparado aos bancos de dados relacionais tradicionais.
4. Uma das desvantagens dos bancos de dados NoSQL é a falta de suporte completo para transações ACID, o que pode dificultar o controle de integridade e consistência dos dados.
5. Os bancos de dados NoSQL são mais adequados para cenários de alta disponibilidade, em que é necessário garantir acesso contínuo aos dados, mesmo em caso de falhas.
6. A utilização de bancos de dados NoSQL pode ser mais complexa para consultas que envolvem operações de junção de dados, pois não possuem mecanismos avançados para esse tipo de operação.
7. Os bancos de dados NoSQL oferecem uma maior flexibilidade na modelagem de dados, o que permite adaptações mais rápidas em um ambiente em evolução constante.
8. Uma desvantagem dos bancos de dados NoSQL é a menor maturidade em relação aos bancos de dados relacionais, o que pode impactar a disponibilidade de ferramentas e recursos de suporte.
9. A utilização de bancos de dados NoSQL pode exigir uma revisão e adaptação das práticas de desenvolvimento de software e modelagem de dados existentes.
10. Os bancos de dados NoSQL podem oferecer maior escalabilidade vertical, permitindo que um único nó do banco de dados manipule grandes quantidades de dados e consultas complexas.

7. Subtópico:
7. Casos prát
Assertivas:
1. Casos práticos são amplamente utilizados em processos seletivos como forma de avaliar o conhecimento e a capacidade de aplicação dos candidatos.
2. Os casos práticos são situações reais ou fictícias que exigem do candidato a análise, tomada de decisões e resolução de problemas.
3. A resolução de casos práticos requer a aplicação de conhecimentos teóricos em situações concretas, considerando diversas variáveis e possíveis soluções.
4. Os casos práticos podem abordar diferentes áreas do conhecimento, como direito, administração, engenharia, entre outros.
5. Uma característica comum nos casos práticos é a contextualização, ou seja, eles são apresentados de forma a refletir situações cotidianas ou reais.
6. Nos casos práticos, é fundamental que o candidato apresente uma argumentação clara, coerente e fundamentada para justificar suas decisões.
7. Os casos práticos são utilizados como critério de eliminação, classificação ou avaliação do desempenho do candidato em concursos públicos e processos seletivos.
8. A resolução de casos práticos requer uma análise detalhada da situação apresentada, considerando todos os aspectos relevantes para a tomada de decisão.
9. Para resolver casos práticos com eficiência, é importante que o candidato possua conhecimentos específicos da área em questão, além de habilidades como raciocínio lógico e capacidade de síntese.
10. A resolução de casos práticos demanda do candidato a capacidade de lidar com pressão e de tomar decisões assertivas em um curto espaço de tempo.


