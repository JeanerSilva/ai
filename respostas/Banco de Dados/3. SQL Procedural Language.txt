Item do edital: 3. SQL Procedural Language    
 
1. Subtópico:
1. Conceitos básicos de SQL Procedural Language
Assertivas:
1. O SQL Procedural Language é uma linguagem de programação embutida no SQL, usada principalmente para escrever funções e procedimentos armazenados.
2. O SQL PL permite a criação de estruturas de controle, como loops e condicionais, para facilitar a lógica de programação dentro de consultas SQL.
3. O SQL PL fornece suporte para tratamento de exceções, permitindo que erros sejam capturados e tratados de forma adequada durante a execução de funções e procedimentos.
4. O SQL PL permite a definição de variáveis, que podem ser usadas para armazenar valores temporários durante a execução de consultas e procedimentos.
5. É possível usar o SQL PL para criar funções escalares, que retornam um único valor, e funções de tabela, que retornam um conjunto de valores.
6. O SQL PL suporta a criação de procedimentos armazenados, que são blocos de código SQL PL que podem ser chamados repetidamente.
7. É possível definir parâmetros de entrada e saída em funções e procedimentos SQL PL, permitindo a passagem de valores para os mesmos.
8. O SQL PL possui uma sintaxe semelhante a outras linguagens de programação, com palavras-chave, operadores e estruturas de controle.
9. O SQL PL é suportado por vários bancos de dados relacionais, como IBM DB2 e PostgreSQL.
10. O conhecimento do SQL PL é importante para desenvolvedores de bancos de dados que desejam criar consultas mais complexas e automatizar tarefas dentro do banco de dados.

2. Subtópico:
2. Sintaxe e estrutura da SQL Procedural Language
Assertivas:
1. A SQL Procedural Language é uma extensão da linguagem SQL que permite a criação de procedimentos e funções armazenadas.
2. Na SQL Procedural Language, é possível utilizar estruturas de controle, como loops e condicionais, para controlar o fluxo de execução dos procedimentos.
3. Ao utilizar a SQL Procedural Language, é possível criar procedimentos e funções reutilizáveis que podem ser invocados em diferentes partes de um banco de dados.
4. A SQL Procedural Language permite a definição de variáveis locais, facilitando o armazenamento temporário de valores durante a execução dos procedimentos.
5. Um dos principais usos da SQL Procedural Language é a criação de rotinas de processamento de dados complexas, que podem ser utilizadas para manipular e transformar informações armazenadas em um banco de dados.
6. Ao utilizar a SQL Procedural Language, é possível manipular registros em tabelas por meio de operações como seleção, inserção, atualização e exclusão.
7. A SQL Procedural Language possui suporte para o tratamento de exceções, permitindo lidar com erros e situações inesperadas durante a execução dos procedimentos.
8. É possível definir parâmetros de entrada e saída para os procedimentos criados com a SQL Procedural Language, permitindo a passagem de valores entre o procedimento e a chamada do mesmo.
9. A SQL Procedural Language permite a criação de gatilhos (triggers), que são procedimentos automáticos ativados em resposta a determinados eventos em um banco de dados.
10. A SQL Procedural Language é suportada por diversos sistemas de gerenciamento de bancos de dados, como Oracle, MySQL e PostgreSQL.

3. Subtópico:
3. Funções e procedimentos em SQL Procedural Language
Assertivas:
1. O SQL Procedural Language (PL/SQL) é uma extensão do SQL utilizada para criação de funções e procedimentos no Oracle Database.

2. Em PL/SQL, os procedimentos são blocos de código que podem ser chamados e executados em um momento determinado.

3. As funções em PL/SQL também são blocos de código, porém possuem um valor de retorno e podem ser utilizadas em expressões.

4. É possível utilizar estruturas de controle, como IF-THEN-ELSE e LOOP, em funções e procedimentos em PL/SQL.

5. Em PL/SQL, é possível utilizar exceções para tratamento de erros durante a execução de funções e procedimentos.

6. Os procedimentos em PL/SQL não possuem um valor de retorno, apenas executam um conjunto de instruções.

7. As funções em PL/SQL podem ser utilizadas em consultas SQL, permitindo a construção de consultas mais complexas e personalizadas.

8. Em PL/SQL, é possível utilizar variáveis para armazenar valores temporários e facilitar o processamento de dados.

9. PL/SQL suporta a criação de pacotes, que permitem organizar e encapsular funções, procedimentos e variáveis relacionados.

10. A linguagem PL/SQL é amplamente utilizada em bancos de dados Oracle e é considerada uma linguagem de programação procedural poderosa para manipulação e processamento de dados.

4. Subtópico:
4. Triggers em SQL Procedural Language
Assertivas:
1. Os triggers em SQL Procedural Language são recursos utilizados para a execução automática de comandos ou ações quando determinados eventos ocorrem em um banco de dados.
2. Os triggers podem ser disparados por eventos como inserção, atualização ou exclusão de registros.
3. Os triggers em SQL Procedural Language são definidos e associados a uma tabela específica.
4. Os triggers podem ser utilizados para garantir a integridade dos dados, realizando ações como a verificação de valores inseridos ou atualizados.
5. Os triggers podem ser criados para validar regras de negócio, como a restrição de determinadas ações em determinados momentos.
6. Os triggers em SQL Procedural Language são criados utilizando a estrutura CREATE TRIGGER.
7. Os triggers podem ser utilizados para realizar modificações nos dados, como a inserção de registros em outras tabelas, baseando-se nos dados inseridos ou modificados.
8. Os triggers podem ser utilizados em conjunto com comandos de controle de fluxo, como IF e CASE.
9. Os triggers podem ser definidos como BEFORE ou AFTER o evento que os dispara, dependendo do momento em que se deseja executar a ação.
10. Os triggers podem ser desativados ou excluídos a qualquer momento, caso não sejam mais necessários.

5. Subtópico:
5. Controle de transações na SQL Procedural Language
Assertivas:
1. O controle de transações na SQL Procedural Language pode ser realizado por meio do uso de comandos de início (BEGIN) e fim (END) de transação.
2. O comando COMMIT na SQL Procedural Language é utilizado para confirmar uma transação e tornar suas alterações permanentes no banco de dados.
3. O comando ROLLBACK na SQL Procedural Language é utilizado para desfazer todas as alterações realizadas em uma transação e restaurar o banco de dados ao estado anterior.
4. A cláusula SAVEPOINT na SQL Procedural Language permite criar pontos de salvamento dentro de uma transação, permitindo a realização de desfazimentos parciais.
5. A função @@TRANCOUNT na SQL Procedural Language retorna o número de transações aninhadas ativas no momento da execução.
6. É necessário utilizar o comando SET XACT_ABORT ON na SQL Procedural Language para que uma transação seja automaticamente desfeita caso ocorra algum erro grave durante sua execução.
7. No controle de transações na SQL Procedural Language, é possível utilizar bloqueios (locks) para garantir a consistência e integridade dos dados durante a execução de uma transação.
8. O comando SET TRANSACTION ISOLATION LEVEL na SQL Procedural Language permite definir o nível de isolamento de uma transação, determinando o grau de acesso concorrente aos dados.
9. Uma transação na SQL Procedural Language pode ser iniciada explicitamente através do comando BEGIN TRANSACTION ou implicitamente através da execução de uma instrução de modificação de dados.
10. O controle de transações na SQL Procedural Language é fundamental para garantir a atomicidade, consistência, isolamento e durabilidade das operações realizadas no banco de dados.

6. Subtópico:
6. Manipulação de erros em SQL Procedural Language 
Assertivas:
1. A manipulação de erros em SQL Procedural Language permite a captura e o tratamento de exceções durante a execução de um bloco de código.
2. É possível utilizar a cláusula TRY-CATCH para tratar erros específicos e realizar ações personalizadas em SQL Procedural Language.
3. Em SQL Procedural Language, a função SQLCODE pode ser utilizada para obter o código de erro associado a uma exceção.
4. A instrução RAISE em SQL Procedural Language permite lançar exceções manualmente durante a execução de um bloco de código.
5. O tratamento de erros em SQL Procedural Language é importante para controlar comportamentos inesperados e manter a integridade dos dados.
6. É possível utilizar blocos aninhados de TRY-CATCH em SQL Procedural Language para tratar exceções em diferentes níveis de execução.
7. O uso de variáveis locais em SQL Procedural Language permite armazenar informações relacionadas a erros para posterior análise.
8. Em SQL Procedural Language, é possível realizar ações condicionais específicas com base nos erros capturados, utilizando a cláusula WHEN em um bloco de tratamento de exceções.
9. É recomendado o registro de erros em um log ou tabela de auditoria em SQL Procedural Language para facilitar a identificação e resolução de problemas.
10. O tratamento adequado de erros em SQL Procedural Language contribui para a robustez e confiabilidade das aplicações de banco de dados.

7. Subtópico:
7. Variáveis, constantes e tipos de dados na SQL Procedural Language 
Assertivas:
1. Na SQL Procedural Language, uma variável pode ser utilizada para armazenar um valor temporário durante a execução de um bloco de código.
2. As variáveis na SQL PL podem ser declaradas utilizando a palavra reservada "DECLARE", seguida pelo nome da variável e seu tipo de dado.
3. Os tipos de dados disponíveis na SQL PL incluem INTEGER, CHAR, VARCHAR, DATE, BOOLEAN, entre outros. 
4. Uma constante na SQL PL é um valor fixo que não pode ser alterado durante a execução do código.
5. As constantes na SQL PL são declaradas utilizando a palavra reservada "CONSTANT", seguida pelo nome da constante e seu valor.
6. É possível atribuir um valor a uma variável utilizando o operador de atribuição ":=", seguido pelo valor desejado.
7. Na SQL PL, é possível utilizar os operadores aritméticos (+, -, *, /) para realizar operações matemáticas com variáveis e constantes.
8. Os tipos de dados utilizados na SQL PL devem ser compatíveis para que seja possível realizar operações com eles.
9. É possível realizar a conversão de tipos de dados na SQL PL utilizando funções específicas, como CAST e CONVERT.
10. As variáveis na SQL PL possuem escopo local, ou seja, só podem ser acessadas dentro do bloco de código onde são declaradas.

8. Subtópico:
8. Operadores e expressões na SQL Procedural Language 
Assertivas:
1. Os operadores de comparação na SQL Procedural Language são utilizados para comparar valores e fazer testes lógicos.
2. Os operadores aritméticos na SQL Procedural Language são utilizados para realizar operações matemáticas, como adição, subtração, multiplicação e divisão.
3. A expressão CASE WHEN é utilizada para realizar condições múltiplas na SQL Procedural Language.
4. O operador LIKE é utilizado para comparar strings na SQL Procedural Language.
5. O operador BETWEEN é utilizado para verificar se um valor está entre dois outros valores na SQL Procedural Language.
6. A expressão IN é utilizada para verificar se um valor está presente em uma lista de valores na SQL Procedural Language.
7. Os operadores lógicos na SQL Procedural Language são utilizados para combinar resultados lógicos, como AND, OR e NOT.
8. O operador IS NULL é utilizado para verificar se um valor é nulo na SQL Procedural Language.
9. A expressão CONCAT é utilizada para concatenar strings na SQL Procedural Language.
10. O operador DISTINCT é utilizado para retornar apenas valores distintos em uma consulta na SQL Procedural Language.

9. Subtópico:
9. Criação e gestão de cursores na SQL Procedural Language 
Assertivas:
1. O cursor é utilizado na SQL Procedural Language para percorrer e manipular resultados de consultas em um banco de dados.
2. O cursor é uma estrutura de controle que permite navegar por um conjunto de registros retornados uma consulta.
3. Os cursores são especialmente úteis quando se deseja manipular um grande volume de registros de forma individual.
4. Uma das principais funções da criação de cursores é a possibilidade de realizar operações de manipulação de registros, como atualização, exclusão ou inserção.
5. A criação de um cursor na SQL Procedural Language envolve as etapas de declaração, abertura, recuperação e fechamento.
6. Com um cursor aberto, é possível percorrer os registros retornados pela consulta e realizar operações específicas em cada um deles.
7. A gestão de cursores envolve a verificação de condições e o controle do posicionamento dentro do conjunto de registros retornados.
8. A declaração do cursor na SQL Procedural Language é feita utilizando a palavra-chave DECLARE CURSOR, seguida pelo nome do cursor e suas características.
9. É possível utilizar cursores implícitos na SQL Procedural Language, onde não há necessidade de declaração explícita, pois o próprio sistema cria e gerencia o cursor.
10. A utilização correta de cursores na SQL Procedural Language requer atenção para evitar vazamentos de memória e melhorar a performance das consultas.

10. Subtópico:
10. Segurança e privilégios no uso da SQL Procedural Language
Assertivas:
1. A SQL Procedural Language permite a criação e execução de procedimentos e funções no banco de dados.
2. O uso da SQL Procedural Language possibilita o gerenciamento de segurança a nível de código.
3. A SQL Procedural Language permite o controle de privilégios de acesso a objetos no banco de dados.
4. A utilização da SQL Procedural Language facilita a implementação de regras de negócio complexas diretamente no banco de dados.
5. A SQL Procedural Language permite a definição de transações para garantir a consistência dos dados.
6. A SQL Procedural Language oferece recursos para tratar exceções e erros de forma eficiente.
7. É possível utilizar a SQL Procedural Language para criar consultas dinâmicas adaptáveis a diferentes condições.
8. O uso da SQL Procedural Language facilita a implementação de lógicas de manipulação e transformação de dados.
9. A SQL Procedural Language possibilita a criação de gatilhos que são ativados automaticamente em eventos específicos do banco de dados.
10. A utilização da SQL Procedural Language permite o controle de concorrência no acesso aos dados.


