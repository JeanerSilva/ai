Item do edital: 3.1 SQL Structured Query Language    
 
1. Subtópico:
1. Conceitos básicos de SQL e sua importância na gestão de bancos de dados.
Assertivas:
1. SQL é uma linguagem de programação usada para gerenciar e manipular bancos de dados relacionais.
2. O SQL permite a criação, a modificação e a exclusão de tabelas em um banco de dados.
3. Uma das principais vantagens do SQL é sua capacidade de consultas complexas e rápidas em grandes conjuntos de dados.
4. O SQL suporta a definição de restrições de integridade para garantir a precisão e a consistência dos dados.
5. Com o uso do SQL, é possível realizar operações como inserção, atualização e exclusão de dados em uma tabela.
6. A linguagem SQL possui comandos específicos para a recuperação de informações de um banco de dados (SELECT).
7. É com o SQL que as consultas são feitas para extrair informações específicas de um banco de dados, como filtragem, ordenação e agrupamento dos resultados.
8. Através do SQL, é possível criar visões, que são representações virtuais dos dados armazenados em um banco de dados.
9. O SQL também permite a criação de procedimentos armazenados, que são sequências de comandos executados em bloco.
10. A habilidade de utilizar a linguagem SQL é considerada essencial para profissionais que trabalham com gerenciamento de bancos de dados e análise de dados.

2. Subtópico:
2. Comandos SQL: SELECT, INSERT, UPDATE e DELETE.
Assertivas:
1. O comando SELECT é utilizado para consultar dados em um banco de dados.
2. O comando INSERT é usado para inserir novos registros em uma tabela.
3. O comando UPDATE é usado para atualizar registros existentes em uma tabela.
4. O comando DELETE é utilizado para excluir registros de uma tabela.
5. O comando SELECT permite a utilização de cláusulas como WHERE e ORDER BY.
6. O comando INSERT requer a especificação das colunas e dos valores a serem inseridos.
7. O comando UPDATE permite a atualização de múltiplos registros simultaneamente.
8. O comando DELETE excluirá todos os registros da tabela se a cláusula WHERE não for especificada.
9. O comando SELECT permite a utilização de funções agregadas, como COUNT, SUM e AVG.
10. Os comandos SQL permitem a manipulação e recuperação de dados armazenados em bancos de dados relacionais.

3. Subtópico:
3. Funções agregadas em SQL: COUNT, SUM, AVG, MAX e MIN.
Assertivas:
1. A função COUNT é utilizada para contar o número de registros em uma coluna específica de uma tabela no banco de dados.
2. A função SUM é usada para calcular a soma total dos valores de uma coluna numérica em uma tabela.
3. AVG é uma função que retorna a média dos valores de uma coluna numérica em uma tabela.
4. MAX é uma função que retorna o maior valor em uma coluna específica de uma tabela.
5. MIN é uma função que retorna o menor valor em uma coluna específica de uma tabela.
6. Todas as funções agregadas em SQL (COUNT, SUM, AVG, MAX e MIN) podem ser aplicadas em consultas de seleção de dados.
7. O uso da função COUNT com a cláusula DISTINCT permite contar o número de valores únicos em uma coluna.
8. A função SUM pode ser usada com a cláusula WHERE para calcular a soma dos valores que atendem a uma condição específica.
9. AVG retorna um valor decimal, representando a média dos valores da coluna.
10. MAX e MIN podem ser aplicadas em colunas que contêm valores alfanuméricos, retornando o maior e o menor valor, respectivamente.

4. Subtópico:
4. Cláusulas WHERE, GROUP BY e ORDER BY em consultas SQL.
Assertivas:
1. A cláusula WHERE é utilizada para filtrar os dados em uma consulta SQL, permitindo a seleção de registros que atendam a determinadas condições.
2. A cláusula WHERE pode conter operadores como "=", "<>", "<", ">", "<=", ">=", entre outros, para realizar comparações nos campos da tabela.
3. A cláusula GROUP BY é utilizada para agrupar os registros de uma consulta SQL com base em uma ou mais colunas especificadas.
4. A cláusula GROUP BY é frequentemente utilizada em combinação com funções de agregação, como COUNT(), MAX(), MIN(), AVG() e SUM(), para realizar cálculos sobre os grupos de registros.
5. A cláusula ORDER BY é utilizada para ordenar os registros retornados por uma consulta SQL de acordo com um critério específico, como uma coluna ou conjunto de colunas.
6. A cláusula ORDER BY permite ordenar os registros de forma ascendente (ASC) ou descendente (DESC), sendo ASC o padrão utilizado quando a direção não é especificada.
7. É possível utilizar a cláusula ORDER BY em conjunto com a cláusula GROUP BY para ordenar os grupos de registros de acordo com critérios específicos.
8. A cláusula ORDER BY pode ser utilizada em conjunto com as cláusulas ASC e DESC para ordenar os registros de forma crescente ou decrescente, respectivamente.
9. Se uma consulta SQL possui as cláusulas WHERE, GROUP BY e ORDER BY simultaneamente, a ordem correta de aplicação é WHERE, GROUP BY e, por fim, ORDER BY.
10. As cláusulas WHERE, GROUP BY e ORDER BY, embora sejam frequentemente utilizadas em conjunto, são independentes entre si e podem ser utilizadas separadamente em consultas SQL.

5. Subtópico:
5. Subconsultas (Subqueries) em SQL.
Assertivas:
1. As subconsultas em SQL são úteis para realizar consultas aninhadas dentro de outras consultas.
2. As subconsultas podem ser utilizadas em cláusulas SELECT, FROM, WHERE, HAVING e JOIN em SQL.
3. Uma subconsulta pode retornar um único valor, uma lista de valores ou até mesmo uma tabela temporária.
4. As subconsultas são executadas internamente primeiro, antes da consulta principal.
5. As subconsultas podem ajudar a simplificar consultas complexas, tornando-as mais legíveis e fáceis de entender.
6. As subconsultas podem ser usadas para filtrar dados com base em uma condição específica.
7. Em SQL, as subconsultas podem ser correlacionadas ou não correlacionadas.
8. Subconsultas correlacionadas são aquelas que dependem dos resultados da consulta externa para retornar resultados corretos.
9. Subconsultas não correlacionadas são aquelas que podem ser executadas independentemente da consulta externa.
10. Embora úteis, as subconsultas em SQL podem ter impacto negativo no desempenho da consulta, especialmente se forem utilizadas de forma excessiva ou ineficiente.

6. Subtópico:
6. Junções (Joins) em SQL: INNER JOIN, LEFT JOIN, RIGHT JOIN e FULL JOIN.
Assertivas:
1. A junção INNER JOIN em SQL é utilizada para retornar apenas os registros que possuem correspondência em ambas as tabelas sendo relacionadas.
2. A junção LEFT JOIN em SQL retorna todos os registros da tabela da esquerda, e os registros correspondentes da tabela da direita, ou seja, retorna todos os registros da tabela da esquerda mesmo que não haja correspondência na tabela da direita.
3. A junção RIGHT JOIN em SQL retorna todos os registros da tabela da direita, e os registros correspondentes da tabela da esquerda, ou seja, retorna todos os registros da tabela da direita mesmo que não haja correspondência na tabela da esquerda.
4. A junção FULL JOIN em SQL retorna todos os registros de ambas as tabelas sendo relacionadas, ou seja, retorna todos os registros da tabela da esquerda e da tabela da direita, independentemente de haver correspondência ou não.
5. O INNER JOIN, o LEFT JOIN, o RIGHT JOIN e o FULL JOIN são comandos em SQL utilizados para realizar junções entre tabelas.
6. As junções INNER JOIN, LEFT JOIN, RIGHT JOIN e FULL JOIN são utilizadas para combinar dados de duas ou mais tabelas em um único resultado.
7. As junções INNER JOIN, LEFT JOIN, RIGHT JOIN e FULL JOIN são fundamentais para consultas avançadas e complexas em SQL.
8. A utilização das junções INNER JOIN, LEFT JOIN, RIGHT JOIN e FULL JOIN permite a obtenção de dados mais específicos e completos em consultas SQL que envolvem relacionamentos entre tabelas.
9. A escolha correta entre as diferentes junções em SQL (INNER JOIN, LEFT JOIN, RIGHT JOIN e FULL JOIN) depende do objetivo da consulta e da disponibilidade de informações nas tabelas envolvidas.
10. É possível combinar diferentes tipos de junções (INNER JOIN, LEFT JOIN, RIGHT JOIN e FULL JOIN) em uma única consulta SQL para obter resultados mais refinados e detalhados.

7. Subtópico:
7. Criação de tabelas e manipulação da estrutura das tabelas usando comandos DDL (Data Definition Language).
Assertivas:
1. Os comandos DDL são usados para criar, alterar e excluir estruturas de tabelas em um banco de dados.
2. O comando CREATE TABLE é utilizado para criar uma nova tabela em um banco de dados.
3. O comando ALTER TABLE permite adicionar, modificar ou excluir colunas em uma tabela existente.
4. O comando DROP TABLE é utilizado para excluir uma tabela de um banco de dados.
5. O comando RENAME TABLE permite renomear uma tabela existente em um banco de dados.
6. O comando TRUNCATE TABLE é usado para excluir todos os registros de uma tabela, mantendo sua estrutura.
7. O comando CREATE INDEX é utilizado para criar um índice em uma ou mais colunas de uma tabela.
8. O comando DROP INDEX é usado para excluir um índice existente em uma tabela.
9. O comando ALTER TABLE permite adicionar restrições, como chaves primárias e estrangeiras, a uma tabela.
10. O comando COMMENT ON TABLE é utilizado para adicionar comentários descritivos a uma tabela em um banco de dados.

8. Subtópico:
8. Controle de transações em SQL: COMMIT, ROLL
Assertivas:
1. O comando COMMIT é utilizado para confirmar todas as alterações feitas em uma transação no SQL.
2. O comando ROLLBACK é utilizado para desfazer todas as alterações feitas em uma transação no SQL.
3. A função do comando COMMIT é tornar as alterações permanentes no banco de dados.
4. O comando ROLLBACK desfaz as alterações feitas na transação e retorna o banco de dados ao seu estado anterior.
5. O comando COMMIT é geralmente executado após um conjunto de instruções SQL ser executado com sucesso.
6. O comando ROLLBACK é utilizado em situações de erro ou falha durante a execução de instruções SQL.
7. O uso adequado do comando COMMIT garante a consistência dos dados no banco de dados.
8. O comando ROLLBACK é uma forma de garantir a integridade dos dados, permitindo que quaisquer alterações errôneas sejam desfeitas.
9. O comando COMMIT é uma das maneiras de garantir a atomicidade das transações em SQL.
10. O comando ROLLBACK é uma forma de garantir a consistência e a confiabilidade dos dados em uma transação no SQL.


