Pergunta Original: 1.3 NOSQL.    
 
1. Subtópico:
1. Conceito e características do NoSQL
Assertivas:
1. NoSQL é um termo que se refere a uma categoria de bancos de dados não relacionais.
2. Os bancos de dados NoSQL são especialmente projetados para lidar com grandes volumes de dados distribuídos e escaláveis.
3. Os bancos de dados NoSQL não utilizam o modelo de dados tabular utilizado pelos bancos de dados relacionais.
4. Uma característica comum dos bancos de dados NoSQL é a flexibilidade na estrutura dos dados armazenados.
5. Os bancos de dados NoSQL utilizam diferentes modelos de dados, como documentos, grafos, colunas ou chave-valor.
6. As tecnologias NoSQL surgiram como alternativas aos bancos de dados relacionais, buscando solucionar desafios específicos, como escalabilidade horizontal.
7. Os bancos de dados NoSQL oferecem melhor desempenho em cenários de leitura e escrita simultâneas em grande escala.
8. Os bancos de dados NoSQL são frequentemente utilizados em aplicações web e mobile, assim como em sistemas de análise de big data.
9. NoSQL não é sinônimo de ausência de SQL, pois muitos bancos de dados NoSQL fornecem suas próprias linguagens de consulta.
10. Bancos de dados NoSQL, como MongoDB, Cassandra e Redis, são exemplos populares de tecnologias utilizadas atualmente.

2. Subtópico:
2. Tipos de bancos de dados NoSQL: chave-valor, coluna, documento e grafo
Assertivas:
1. O tipo de banco de dados NoSQL conhecido como chave-valor permite o armazenamento e consulta de dados usando uma estrutura de chave única e valor associado.
2. O banco de dados NoSQL do tipo coluna armazena dados em colunas, em vez de linhas como nos bancos de dados relacionais.
3. O banco de dados NoSQL do tipo documento armazena dados semelhantes a documentos JSON ou XML, permitindo uma estrutura flexível e aninhada.
4. O banco de dados NoSQL do tipo grafo é adequado para modelar relações complexas entre entidades, como redes sociais ou sistemas de recomendação.
5. O banco de dados NoSQL chave-valor pode ser utilizado em aplicações que requerem alta escalabilidade e desempenho.
6. O modelo de dados utilizado pelo banco de dados NoSQL coluna permite uma alta compressão dos dados, resultando em um melhor desempenho em consultas analíticas.
7. O banco de dados NoSQL documento é especialmente útil em casos em que a estrutura de dados é variável e precisa ser alterada com frequência.
8. A busca em um banco de dados NoSQL grafo é eficiente para consultas complexas que envolvem a análise de relacionamentos.
9. O banco de dados NoSQL do tipo chave-valor é amplamente utilizado para cache de dados, por sua rapidez no acesso aos dados armazenados.
10. O banco de dados NoSQL do tipo coluna é bem adaptado para cenários de big data, pois permite a adição de novas colunas sem afetar a integridade do banco de dados.

3. Subtópico:
3. Vantagens e desvantagens do uso de NoSQL
Assertivas:
1. O uso de bancos de dados NoSQL oferece flexibilidade na manipulação de dados não estruturados.
2. O modelo distribuído dos bancos de dados NoSQL permite escalabilidade horizontal, facilitando o aumento de capacidade conforme a demanda.
3. A ausência de esquema fixo nos bancos de dados NoSQL torna mais ágeis as mudanças de estrutura e a inclusão de novos dados.
4. Bancos de dados NoSQL são eficientes no armazenamento de grandes volumes de dados.
5. A replicação de dados em bancos de dados NoSQL assegura alta disponibilidade e tolerância a falhas.
6. A falta de suporte ACID (Atomicidade, Consistência, Isolamento e Durabilidade) em operações nos bancos de dados NoSQL pode impactar a integridade dos dados.
7. Bancos de dados NoSQL se adaptam melhor a casos de uso que exigem velocidade e escalabilidade, como análise de dados em tempo real.
8. A falta de uma linguagem de consulta padronizada nos bancos de dados NoSQL pode dificultar a migração de sistemas legados.
9. Bancos de dados NoSQL podem apresentar um aprendizado inicial mais complexo em comparação aos bancos de dados relacionais.
10. A consistência eventual nos bancos de dados NoSQL pode resultar em situações de divergência entre réplicas de dados em diferentes nós de um cluster.

4. Subtópico:
4. Comparação entre SQL e NoSQL: quando usar cada um?
Assertivas:
1. A linguagem SQL é mais adequada para aplicações que exigem rigoroso controle de integridade dos dados.
2. NoSQL é recomendado em cenários onde a escalabilidade horizontal e a disponibilidade são fundamentais.
3. SQL é geralmente usado em aplicações que trabalham com estruturas de dados bem definidas e relacionamentos complexos.
4. NoSQL é indicado em situações onde a flexibilidade no armazenamento e a possibilidade de adaptação rápida a mudanças de requisitos são essenciais.
5. SQL é mais eficiente para consultas complexas que envolvem junções entre várias tabelas e agregação de dados.
6. NoSQL é preferível quando a carga de leitura é significativamente maior do que a carga de gravação.
7. SQL é amplamente adotado em sistemas de gerenciamento de banco de dados relacional, como MySQL, Oracle e SQL Server.
8. NoSQL é mais utilizado em aplicativos web e mobile que requerem alta performance, como redes sociais e big data.
9. SQL é altamente recomendado quando uma organização tem requisitos rígidos de consistência dos dados.
10. NoSQL é ideal para casos onde a estrutura dos dados pode variar ao longo do tempo, como em projetos de desenvolvimento ágil que passam por iterações frequentes.

5. Subtópico:
5. Escalabilidade horizontal em bancos de dados NoSQL
Assertivas:
1. A escalabilidade horizontal em bancos de dados NoSQL permite adicionar mais servidores para aumentar a capacidade de armazenamento e processamento de dados.
2. A escalabilidade horizontal em bancos de dados NoSQL é baseada na distribuição dos dados em vários servidores.
3. A escalabilidade horizontal em bancos de dados NoSQL é preferível em ambientes onde a demanda por armazenamento e processamento de dados é alta e precisa ser facilmente escalável.
4. A escalabilidade horizontal em bancos de dados NoSQL permite adicionar mais servidores de forma incremental para lidar com o aumento do volume de dados e das requisições.
5. A escalabilidade horizontal em bancos de dados NoSQL proporciona um desempenho melhor quando comparada à escalabilidade vertical, especialmente em cenários com grandes quantidades de dados.

6. Subtópico:
6. Consistência eventual em sistemas NoSQL
Assertivas:
1. A consistência eventual em sistemas NoSQL se refere à falta de garantia imediata de que todas as réplicas de dados estarão sincronizadas.
2. A consistência eventual permite alta disponibilidade e escalabilidade em sistemas NoSQL, uma vez que as réplicas podem realizar operações de forma assíncrona.
3. Em sistemas NoSQL com consistência eventual, algumas réplicas podem retornar resultados desatualizados durante períodos transitórios de falta de sincronização.
4. A consistência eventual em sistemas NoSQL é uma abordagem que favorece o desempenho e a tolerância a falhas em detrimento da consistência imediata dos dados.
5. A consistência eventual é uma característica comum em bancos de dados distribuídos e é especialmente aplicada em sistemas NoSQL que lidam com grande volume de dados.
6. Apesar da falta de garantia imediata de consistência, sistemas NoSQL com consistência eventual possuem mecanismos de resolução de conflitos que buscam minimizar inconsistências e manter a integridade dos dados.
7. A consistência eventual em sistemas NoSQL pode ser alcançada através do uso de algoritmos de detecção e reconciliação de conflitos durante a sincronização de réplicas.
8. A adoção da consistência eventual em sistemas NoSQL requer uma análise cuidadosa dos requisitos do sistema e do nível de consistência necessária para as aplicações.
9. A consistência eventual em sistemas NoSQL é uma estratégia escolhida quando as transações de leitura e escrita podem tolerar um curto período de possível inconsistência de dados.
10. A consistência eventual em sistemas NoSQL é uma alternativa que atende a necessidades específicas de cenários em que a sincronização real-time de dados é menos importante do que a disponibilidade e a escalabilidade do sistema.

7. Subtópico:
7. Implementações populares do NoSQL: MongoDB, Cassandra, Redis etc.
Assertivas:
1. O MongoDB é um banco de dados NoSQL amplamente utilizado para armazenamento e recuperação escaláveis de dados.
2. O Cassandra é uma implementação de banco de dados NoSQL distribuída com foco em alta disponibilidade e alta escalabilidade.
3. O Redis é uma solução de armazenamento de dados em memória de código aberto, conhecida por sua velocidade e flexibilidade.
4. A implementação do NoSQL MongoDB utiliza um modelo de dados baseado em documentos.
5. O Cassandra foi desenvolvido pelo Facebook inicialmente e posteriormente aberto à comunidade como um projeto de código aberto.
6. O Redis é amplamente utilizado para caching de dados em tempo real, gerenciamento de sessões e otimização de consultas.
7. A implementação do NoSQL MongoDB permite consultas flexíveis usando JavaScript como linguagem de consulta.
8. O Cassandra utiliza um modelo de dados baseado em colunas, que permite flexibilidade na adição ou remoção de colunas sem a necessidade de alterar a estrutura das tabelas.
9. O Redis oferece suporte a diferentes estruturas de dados, como strings, hashes, listas, conjuntos e sorted sets, proporcionando versatilidade no armazenamento de informações.
10. Tanto o MongoDB, o Cassandra quanto o Redis são soluções de banco de dados NoSQL populares e amplamente aceitas na indústria de tecnologia atualmente.

8. Subtópico:
8. Modelagem de dados em bancos de dados NoSQL 
Assertivas:
1. NoSQL é uma abordagem de banco de dados que difere dos bancos de dados relacionais tradicionais, incluindo a modelagem de dados.
2. A modelagem de dados em bancos de dados NoSQL é mais flexível e permite acomodar diversos tipos de dados, como documentos, grafos, chave-valor e colunas.
3. A modelagem de dados em bancos de dados NoSQL é orientada a aplicação, onde a estrutura do banco de dados é projetada de acordo com as necessidades específicas da aplicação.
4. Em bancos de dados NoSQL, a denormalização dos dados é comumente empregada para otimizar o desempenho das consultas, eliminando a necessidade de joins.
5. Modelagem de dados em bancos de dados NoSQL geralmente não requer um esquema pré-definido, permitindo a inserção de dados sem uma estrutura formalizada.
6. Bancos de dados NoSQL são altamente escaláveis, permitindo a adição de nós para lidar com aumentos na demanda por dados.
7. A modelagem de dados em bancos de dados NoSQL pode ser mais desafiadora do que em bancos de dados relacionais, devido à falta de estrutura rígida.
8. Em bancos de dados NoSQL, é comum utilizar técnicas de agregação para realizar consultas complexas e obter informações resumidas.
9. Bancos de dados NoSQL são amplamente utilizados em cenários de Big Data, devido à sua capacidade de lidar com volumes massivos de dados.
10. Modelagem de dados em bancos de dados NoSQL leva em consideração a escalabilidade horizontal e distribuída, permitindo que os dados sejam distribuídos em diversos nós para atender às demandas de rendimento e disponibilidade.

9. Subtópico:
9. Segurança em bancos de dados NoSQL 
Assertivas:
1. Bancos de dados NoSQL oferecem recursos de segurança para proteger os dados armazenados.
2. A autenticação de usuário é uma medida de segurança implementada em bancos de dados NoSQL para garantir que apenas usuários autorizados tenham acesso aos dados.
3. As permissões de acesso são configuráveis em bancos de dados NoSQL, permitindo que os administradores controlem quais usuários ou grupos podem visualizar, editar ou excluir dados específicos.
4. A criptografia de dados pode ser aplicada em bancos de dados NoSQL para garantir que as informações armazenadas sejam confidenciais.
5. Mecanismos de controle de acesso baseados em regras podem ser implementados em bancos de dados NoSQL para garantir que os usuários tenham apenas as permissões necessárias para executar suas atividades.
6. Bancos de dados NoSQL fornecem funcionalidades de auditoria que permitem o rastreamento de atividades realizadas nos dados, facilitando a identificação de possíveis violações de segurança.
7. Técnicas de proteção contra ataques de injeção de código podem ser aplicadas em bancos de dados NoSQL para evitar a exploração de vulnerabilidades.
8. Backups regulares e redundância de dados são recursos disponíveis em bancos de dados NoSQL para garantir a recuperação de dados em caso de falhas ou perdas de informações.
9. Mecanismos de detecção de intrusões podem ser utilizados em bancos de dados NoSQL para monitorar atividades suspeitas e identificar possíveis tentativas de acesso não autorizado.

10. Subtópico:
10. Casos práticos da aplicação do banco de dados NOSQL no
Assertivas:
desenvolvimento de sistemas:

1. O banco de dados NoSQL é uma alternativa ao modelo relacional tradicional, permitindo armazenamento e manipulação de dados não estruturados.
2. A utilização do NoSQL pode trazer melhor desempenho em aplicações que necessitam lidar com grandes volumes de dados.
3. O NoSQL é amplamente adotado em sistemas distribuídos e escaláveis, permitindo o crescimento da base de dados de forma horizontal.
4. Com o uso do NoSQL, é possível implementar esquemas de dados flexíveis, sem a necessidade de definição de estruturas de tabelas rígidas.
5. As bases NoSQL são altamente escaláveis, possibilitando o aumento do número de usuários e o processamento de uma grande quantidade de transações simultâneas.
6. O NoSQL se destaca em cenários onde há necessidade de alta velocidade no acesso aos dados, como aplicações web e de IoT.
7. Bancos de dados NoSQL como MongoDB e Cassandra são exemplos de soluções populares amplamente utilizadas na indústria.
8. A utilização do NoSQL requer um planejamento adequado para a modelagem dos dados, uma vez que não há um esquema fixo pré-definido.
9. O NoSQL é uma opção interessante para aplicações que precisam garantir alta disponibilidade e tolerância a falhas.
10. A aplicação correta do banco de dados NoSQL pode contribuir para a redução de custos em infraestrutura de armazenamento de dados.


