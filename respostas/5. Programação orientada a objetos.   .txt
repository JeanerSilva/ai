Item do edital: 5. Programação orientada a objetos.   
 
A programação orientada a objetos (POO) é um paradigma de programação que se baseia na ideia de "objetos", que são entidades que possuem características (atributos) e comportamentos (métodos). A POO permite organizar o código de forma mais modular, reutilizável e fácil de dar manutenção.

Principais conceitos da programação orientada a objetos:

1. Classe: Uma classe é um modelo ou blueprint para criar objetos. Ela define os atributos e métodos que os objetos de determinado tipo terão.

2. Objeto: Um objeto é uma instância de uma classe. Ele possui atributos que representam seu estado e métodos que definem seu comportamento.

3. Atributos: Os atributos são as características dos objetos, que representam seu estado. Eles são representados por variáveis dentro da classe.

4. Métodos: Os métodos são as ações que um objeto pode realizar. Eles representam o comportamento do objeto e são definidos dentro da classe.

5. Encapsulamento: É o conceito de esconder a implementação interna de um objeto e expor apenas uma interface para interagir com ele. Isso é feito através do uso de modificadores de acesso como public, private e protected.

6. Herança: É a capacidade de criar uma nova classe baseada em uma classe existente, herdando seus atributos e métodos. Isso promove a reutilização de código e a hierarquia de classes.

7. Polimorfismo: É a capacidade de um objeto se comportar de diferentes formas, dependendo do contexto. Isso é alcançado através de métodos com o mesmo nome, mas com implementações diferentes em classes diferentes.

8. Abstração: É o conceito de simplificar a complexidade do sistema, focando nos aspectos mais relevantes e ignorando os detalhes desnecessários. As classes abstratas e interfaces são ferramentas para implementar a abstração.

Em resumo, a programação orientada a objetos é uma abordagem de programação que se baseia na criação de objetos que interagem entre si para realizar determinadas tarefas. Ela promove a reutilização de código, a modularidade e a organização do sistema de software. É um dos paradigmas mais utilizados na indústria de desenvolvimento de software devido aos seus benefícios em termos de manutenção e escalabilidade.
 ===
