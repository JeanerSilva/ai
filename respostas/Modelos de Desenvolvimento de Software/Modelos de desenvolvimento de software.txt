Pergunta Original: Modelos de desenvolvimento de software    
 
1. Subtópico:
1. Metodologias Ágeis de Desenvolvimento de Software
Assertivas:
1. As metodologias ágeis de desenvolvimento de software priorizam a entrega de software funcional em curtos intervalos de tempo.

2. Nas metodologias ágeis, o trabalho em equipe e a colaboração são valorizados em detrimento da hierarquia.

3. O manifesto ágil, criado em 2001, define os quatro valores fundamentais das metodologias ágeis: indivíduos e interações acima de processos e ferramentas, software funcionando acima de documentação abrangente, colaboração com o cliente acima de negociação contratual, e responder a mudanças acima de seguir um plano.

4. A metodologia Scrum é uma das mais conhecidas e utilizadas metodologias ágeis de desenvolvimento de software.

5. A metodologia Kanban é um sistema visual que facilita a visualização e controle do fluxo de trabalho em projetos ágeis.

6. As metodologias ágeis de desenvolvimento de software são conhecidas por possuírem ciclos de trabalho curtos, chamados de iterações ou sprints.

7. O papel do Scrum Master em um projeto ágil é garantir que a equipe esteja aderindo aos princípios e práticas do Scrum.

8. O Burndown Chart é uma ferramenta utilizada em metodologias ágeis para acompanhar e monitorar o progresso de um projeto ao longo do tempo.

9. A técnica de User Stories é frequentemente utilizada em metodologias ágeis para descrever os requisitos do sistema a partir da perspectiva do usuário.

10. As metodologias ágeis de desenvolvimento de software surgiram como uma alternativa às metodologias tradicionais, visando maior flexibilidade, adaptabilidade e velocidade no desenvolvimento de software.

2. Subtópico:
2. Modelo Cascata de Desenvolvimento de Software
Assertivas:
1. No modelo cascata de desenvolvimento de software, as fases são sequenciais e não há retrocessos entre elas.
2. O modelo cascata é baseado em um planejamento detalhado antes do início do desenvolvimento do software.
3. No modelo cascata, cada fase do desenvolvimento é completamente finalizada antes de se iniciar a próxima.
4. O modelo cascata é amplamente utilizado em projetos de software com requisitos bem definidos e estáveis.
5. No modelo cascata, as alterações nos requisitos durante a fase de implementação podem gerar problemas e atrasos no desenvolvimento.
6. O modelo cascata é conhecido por ser mais rígido e menos flexível em comparação a outros modelos de desenvolvimento de software.
7. No modelo cascata, a equipe de desenvolvimento só inicia a codificação após a análise dos requisitos e o design detalhado do sistema.
8. O modelo cascata é útil quando o cliente possui todos os requisitos bem estabelecidos desde o início do projeto.
9. No modelo cascata, os testes ocorrem em uma fase específica após a implementação do software.
10. O modelo cascata é considerado menos adequado para projetos que exigem flexibilidade e adaptação a mudanças constantes nos requisitos.

3. Subtópico:
3. Modelo Espiral de Desenvolvimento de Software
Assertivas:
1. O Modelo Espiral de Desenvolvimento de Software foi proposto por Barry Boehm em 1988.
2. O Modelo Espiral é um modelo de processo de software iterativo e incremental.
3. No Modelo Espiral, o processo de desenvolvimento ocorre em ciclos repetidos, chamados de "voltas".
4. Cada "volta" do Modelo Espiral envolve quatro fases principais: determinação de objetivos, análise de risco, desenvolvimento e avaliação.
5. O Modelo Espiral prioriza a identificação e redução de riscos antes de prosseguir para a próxima fase.
6. O Modelo Espiral é indicado para projetos complexos e de longa duração.
7. O Modelo Espiral permite maior flexibilidade e adaptação às mudanças do que outros modelos de desenvolvimento de software.
8. O Modelo Espiral é baseado na abordagem de Cíclo de Vida em Espiral, que combina elementos do modelo em cascata com técnicas de prototipação.
9. O Modelo Espiral é amplamente utilizado em projetos de desenvolvimento de software críticos, como os sistemas de segurança de altas tecnologias.
10. O Modelo Espiral é uma valiosa opção para projetos onde os requisitos são pouco claros ou sujeitos a alterações frequentes.

4. Subtópico:
4. Modelo Iterativo e Incremental de Desenvolvimento 
Assertivas:
1. O Modelo Iterativo e Incremental de Desenvolvimento é baseado na divisão do projeto em múltiplas iterações ou ciclos de desenvolvimento.
2. Cada iteração do Modelo Iterativo e Incremental de Desenvolvimento resulta em uma versão parcialmente funcional do produto.
3. O Modelo Iterativo e Incremental de Desenvolvimento permite a entrega de valor ao cliente em etapas contínuas ao longo do processo de desenvolvimento.
4. O Modelo Iterativo e Incremental de Desenvolvimento permite que mudanças de requisitos sejam incorporadas ao produto de forma gradual e controlada.
5. O Modelo Iterativo e Incremental de Desenvolvimento é especialmente adequado para projetos complexos e de grande duração.
6. O Modelo Iterativo e Incremental de Desenvolvimento favorece a colaboração constante entre a equipe de desenvolvimento e o cliente.
7. O Modelo Iterativo e Incremental de Desenvolvimento permite que o cliente acompanhe de perto o progresso do projeto e ofereça feedback contínuo.
8. O Modelo Iterativo e Incremental de Desenvolvimento permite uma maior flexibilidade e adaptabilidade durante o processo de desenvolvimento.
9. O Modelo Iterativo e Incremental de Desenvolvimento ajuda a reduzir o risco, pois as falhas podem ser identificadas e corrigidas rapidamente.
10. O Modelo Iterativo e Incremental de Desenvolvimento promove uma maior satisfação do cliente, pois este pode validar e utilizar partes funcionais do produto antes de sua conclusão.

5. Subtópico:
5. Modelos RAD (Rapid Application Development)
Assertivas:
1. O modelo RAD (Rapid Application Development) foi criado como uma abordagem para o desenvolvimento rápido de software.
2. O RAD é baseado na ideia de iterar várias vezes em um ciclo de vida curto para acelerar o desenvolvimento.
3. O RAD se concentra em entregar versões funcionais do software em um curto período de tempo.
4. Os projetos desenvolvidos com o modelo RAD geralmente envolvem uma equipe multifuncional de desenvolvedores, testadores e usuários finais.
5. O RAD promove a participação ativa do cliente/usuário final durante todo o processo de desenvolvimento.
6. O RAD utiliza componentes reutilizáveis e frameworks pré-existentes para acelerar o desenvolvimento.
7. Com o RAD, é possível criar protótipos funcionais rapidamente para apresentar ao cliente e obter feedback.
8. O modelo RAD utiliza técnicas de programação orientada a objetos para criar sistemas modulares e de fácil manutenção.
9. O RAD é especialmente adequado para projetos em que os requisitos estão sujeitos a mudanças frequentes.
10. O RAD é um modelo de desenvolvimento ágil que enfatiza a colaboração e a entrega rápida do software finalizado.

6. Subtópico:
6. Princípios do Scrum no desenvolvimento ágil
Assertivas:
1. O Scrum é um framework ágil utilizado no desenvolvimento de produtos complexos.
2. Um dos princípios do Scrum é a transparência, que se caracteriza por compartilhar informações relevantes entre os membros da equipe.
3. O Scrum estabelece a inspeção contínua das entregas, visando a melhoria constante do produto.
4. A adaptação é um princípio fundamental do Scrum, permitindo realizar ajustes e mudanças de acordo com as necessidades do projeto.
5. A colaboração ativa entre todos os membros da equipe é incentivada no Scrum como princípio de sucesso.
6. O Scrum adota o conceito de time-boxing, estabelecendo prazos fixos e curtos para a entrega de incrementos do produto.
7. O uso frequente de reuniões rápidas e diárias, conhecidas como daily scrum, é uma prática comum no Scrum.
8. O Scrum preza pela entrega de valor ao cliente de forma iterativa e incremental, permitindo ajustes e feedbacks constantes.
9. A autogerenciamento é um princípio do Scrum que reforça a responsabilidade individual e coletiva dos membros da equipe.
10. O Scrum aborda a complexidade do desenvolvimento de produtos valorizando a simplicidade, buscando soluções simples e eficazes.

7. Subtópico:
7. Práticas do Extreme Programming (XP)
Assertivas:
1. XP é uma metodologia ágil de desenvolvimento de software que enfatiza a colaboração e a comunicação constante entre os membros da equipe.
2. No XP, os desenvolvedores trabalham em pequenos incrementos de funcionalidades, com entregas frequentes ao cliente.
3. O cliente desempenha um papel ativo na definição das prioridades e requisitos do projeto em XP.
4. Constantes testes automatizados são uma prática-chave em XP, visando garantir a qualidade do software em todas as etapas do projeto.
5. O trabalho em pares é incentivado em XP, promovendo a revisão constante de código e o compartilhamento de conhecimento entre os desenvolvedores.
6. A simplicidade é valorizada em XP, com a constante busca por soluções diretas e de fácil manutenção.
7. A relação custo-benefício é um aspecto fundamental em XP, com a priorização das funcionalidades que mais agregam valor ao cliente em cada etapa do projeto.
8. XP promove a melhoria contínua, através de retrospectivas regulares para identificar oportunidades de aprimoramento e ajustes de práticas.
9. O desenvolvimento orientado a testes (TDD) é amplamente utilizado em XP, com a escrita dos testes antes da implementação do código.
10. A comunicação face a face é preferida em XP, priorizando o diálogo direto entre as pessoas envolvidas no projeto, evitando a burocratização e a perda de informações.

8. Subtópico:
8. Lean Software Development e suas práticas
Assertivas:
1. O Lean Software Development é uma abordagem baseada nos princípios do Lean Manufacturing, visando a eliminação de desperdícios e o aumento da eficiência no desenvolvimento de software.
2. Uma das práticas do Lean Software Development é o "canal de controle visual", que consiste em utilizar um quadro físico para visualizar o fluxo de trabalho e identificar gargalos ou atrasos.
3. Outra prática do Lean Software Development é a "entrega contínua", em que os incrementos de software são entregues com frequência, possibilitando a obtenção de feedback rápido e a adaptação às mudanças de requisitos.
4. O "desenvolvimento puxado" é uma prática do Lean Software Development que consiste em iniciar o trabalho apenas quando há uma demanda real, evitando a superprodução e minimizando os estoques de tarefas a fazer.
5. O "gemba walk" é uma prática do Lean Software Development que envolve a observação e o diálogo com as equipes de desenvolvimento no local de trabalho para entender melhor os processos e identificar oportunidades de melhoria.
6. O "kaizen" é uma prática do Lean Software Development que envolve a busca constante por melhorias contínuas nos processos de desenvolvimento de software.
7. O Lean Software Development utiliza a técnica do "mapeamento de fluxo de valor" para identificar todos os processos e atividades envolvidos no desenvolvimento de software, visando a eliminação de etapas desnecessárias.
8. Uma prática do Lean Software Development é o "trabalho em equipe" colaborativo, onde os membros da equipe são incentivados a colaborar, compartilhar conhecimentos e trabalhar juntos para atingir os objetivos do projeto.
9. O Lean Software Development valoriza a "transparência", incentivando a comunicação aberta e o compartilhamento de informações entre os membros da equipe.
10. O Lean Software Development busca a redução de defeitos e a melhoria da qualidade do software, por meio do conceito de "jidoka", que defende a detecção precoce de problemas e a correção imediata.

9. Subtópico:
9. DevOps: conceitos e práticas fundamentais 
Assertivas:
1. DevOps é uma abordagem que visa a integração entre as equipes de desenvolvimento e operações de TI.

2. O objetivo do DevOps é promover uma cultura de colaboração e comunicação entre os times de desenvolvimento e operações.

3. Uma prática fundamental do DevOps é a automação de processos de desenvolvimento, teste e implantação de software.

4. A adoção de práticas DevOps pode aumentar a velocidade de entrega de software, permitindo lançamentos mais frequentes e ágeis.

5. O monitoramento contínuo de sistemas e aplicações é uma prática essencial do DevOps para identificar problemas e agir de forma proativa.

6. A infraestrutura como código é um conceito-chave no DevOps, permitindo a automação e replicabilidade de ambientes de desenvolvimento e produção.

7. A colaboração entre times de desenvolvimento e operações é incentivada no DevOps para garantir a qualidade e estabilidade das aplicações.

8. A padronização de processos e ferramentas é uma prática importante do DevOps para facilitar a integração e colaboração entre equipes.

9. O uso de ferramentas de controle de versão, como o Git, é comumente utilizado no DevOps para gerenciar o código fonte de forma colaborativa.

10. O ciclo de feedback contínuo é uma prática fundamental do DevOps, permitindo a melhoria contínua de processos e entrega de valor aos usuários finais.

10. Subtópico:
10. Testes em desenvolvimento: TDD (Test Driven Development) e BDD (Behavior Driven Development).
Assertivas:
1. O TDD (Test Driven Development) é uma prática de desenvolvimento de software em que os testes são escritos antes da implementação do código.
2. O TDD segue o ciclo de desenvolvimento conhecido como "Red, Green, Refactor" (vermelho, verde, refatorar).
3. O TDD ajuda a garantir que o código seja testável, facilitando a identificação de erros e promovendo a qualidade do software.
4. O BDD (Behavior Driven Development) é uma abordagem de desenvolvimento de software que enfatiza a colaboração entre desenvolvedores, analistas de negócio e outras partes interessadas.
5. O BDD utiliza uma linguagem ubíqua para descrever o comportamento esperado do software em termos de cenários e casos de uso.
6. O BDD incentiva a escrita de especificações executáveis que podem ser automatizadas, permitindo uma melhor compreensão dos requisitos.
7. O TDD e o BDD são técnicas complementares e podem ser utilizados em conjunto para melhorar a qualidade e a compreensão do software.
8. Tanto o TDD quanto o BDD promovem a melhoria contínua do software, permitindo que os desenvolvedores se concentrem em funcionalidades específicas de forma iterativa.
9. O TDD e o BDD ajudam a reduzir o tempo de depuração de software, uma vez que os testes são executados automaticamente e falhas são detectadas precocemente.
10. Tanto o TDD quanto o BDD incentivam uma abordagem mais orientada ao teste, que contribui para a manutenibilidade e a evolução do software.


