Item do edital: Python - operações com estruturas de dados.
 
1. Tópicos:1. Listas   - Criação de listas   - Acesso aos elementos de uma lista   - Adição e remoção de elementos em uma lista   - Ordenação de uma lista   - Percorrendo uma lista2. Tuplas   - Criação de tuplas   - Acesso aos elementos de uma tupla   - Imutabilidade das tuplas   - Operações com tuplas3. Dicionários   - Criação de dicionários   - Acesso aos elementos de um dicionário   - Adição e remoção de elementos em um dicionário   - Percorrendo um dicionário4. Conjuntos   - Criação de conjuntos   - Operações com conjuntos (união, interseção, diferença)   - Verificação de pertinência em um conjunto   - Percorrendo um conjunto5. Pilhas   - Conceito de pilha   - Operações básicas de uma pilha (push, pop)   - Verificação de pilha vazia   - Implementação de uma pilha em Python6. Filas   - Conceito de fila   - Operações básicas de uma fila (enqueue, dequeue)   - Verificação de fila vazia   - Implementação de uma fila em Python7. Operações com strings   - Concatenação de strings   - Acesso aos caracteres de uma string   - Verificação de substring em uma string   - Manipulação de strings (maiusculas, minusculas, inversão)8. Operações com matrizes   - Criação de matrizes   - Acesso aos elementos de uma matriz   - Operações matriciais (soma, multiplicação)   - Transposição de uma matriz
Como especialista no assunto, posso te ajudar com operações com estruturas de dados em Python. Existem várias estruturas de dados disponíveis em Python, como listas, tuplas, dicionários e conjuntos. Cada estrutura de dados tem suas próprias características e métodos, permitindo operações específicas.

1. Listas:
   - Adicionar elementos: utilizamos o método `append()` para adicionar elementos no final da lista.
   - Acessar elementos: utilizamos o índice do elemento para acessá-lo. Por exemplo, `lista[0]` retorna o primeiro elemento da lista.
   - Remover elementos: utilizamos o método `remove()` para remover um elemento específico. Também podemos utilizar a palavra-chave `del` para remover um elemento pelo índice.
   - Ordenar: utilizamos o método `sort()` para ordenar a lista em ordem crescente. Para ordenar em ordem decrescente, podemos passar o argumento `reverse=True` para o método `sort()`.

2. Tuplas:
   - Acessar elementos: assim como nas listas, utilizamos o índice do elemento para acessá-lo. Por exemplo, `tupla[0]` retorna o primeiro elemento da tupla.
   - Concatenar tuplas: podemos utilizar o operador `+` para concatenar duas ou mais tuplas.
   - Desempacotar tuplas: podemos atribuir os elementos de uma tupla a diferentes variáveis em uma única instrução, o que é conhecido como desempacotamento de tupla.

3. Dicionários:
   - Adicionar elementos: utilizamos a sintaxe `dicionario[chave] = valor` para adicionar um novo par chave-valor ao dicionário.
   - Acessar elementos: utilizamos a chave para acessar o valor correspondente. Por exemplo, `dicionario['chave']` retorna o valor associado à chave.
   - Remover elementos: utilizamos a palavra-chave `del` seguida da chave para remover um par chave-valor do dicionário.
   - Obter chaves e valores: podemos utilizar os métodos `keys()` e `values()` para obter uma lista de todas as chaves e valores do dicionário, respectivamente.

4. Conjuntos:
   - Adicionar elementos: utilizamos o método `add()` para adicionar elementos ao conjunto.
   - Remover elementos: utilizamos o método `remove()` para remover um elemento específico do conjunto.
   - União de conjuntos: podemos utilizar o operador `|` para obter a união de dois conjuntos.
   - Interseção de conjuntos: podemos utilizar o operador `&` para obter a interseção de dois conjuntos.

Essas são apenas algumas das operações que podem ser feitas com estruturas de dados em Python. Existem muitas outras funcionalidades e métodos disponíveis, e é sempre importante consultar a documentação oficial do Python para obter mais informações.

