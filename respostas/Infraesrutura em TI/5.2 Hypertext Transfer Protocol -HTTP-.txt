Pergunta Original: 5.2 Hypertext Transfer Protocol -HTTP-    
 
1. Subtópico:
1. Definição e Funções do Hypertext Transfer Protocol (HTTP)
Assertivas:
1. O HTTP é um protocolo da camada de aplicação que permite a comunicação entre clientes e servidores na web.
2. O HTTP utiliza o modelo de arquitetura cliente-servidor, onde o cliente solicita recursos ao servidor e o servidor responde com esses recursos.
3. O HTTP utiliza o método de requisição GET para solicitar recursos específicos de um servidor.
4. O HTTP também suporta outros métodos de requisição, como POST, PUT e DELETE, que permitem a criação, atualização e exclusão de recursos no servidor, respectivamente.
5. O HTTP utiliza o modelo de comunicação estadoless, ou seja, cada requisição é tratada de forma independente, sem necessidade de manter o estado da comunicação.
6. O HTTP utiliza URIs (Uniform Resource Identifiers) para identificar os recursos solicitados pelos clientes.
7. O HTTP usa cabeçalhos para transmitir informações adicionais relacionadas à requisição e à resposta, como tipo de conteúdo, tamanho do arquivo, entre outros.
8. O HTTP utiliza códigos de status para indicar o resultado da requisição, como 200 OK para sucesso, 404 Not Found para recurso não encontrado, entre outros.
9. O HTTP é baseado no TCP (Transmission Control Protocol), que garante a confiabilidade e a integridade das informações transmitidas.
10. O HTTP é amplamente utilizado na internet para a transmissão de páginas web, documentos, imagens e outros recursos.

2. Subtópico:
2. Diferença entre HTTP e HTTPS
Assertivas:
1. O protocolo HTTP é utilizado para a comunicação entre um cliente (navegador) e um servidor, enquanto o protocolo HTTPS é uma versão segura do HTTP.
2. O HTTPS é baseado no protocolo SSL/TLS, que criptografa as informações transmitidas entre o cliente e o servidor.
3. O HTTP não oferece autenticação do servidor, ou seja, não é possível garantir que o site acessado seja realmente o desejado, enquanto o HTTPS utiliza certificados digitais para autenticar o servidor.
4. Ao utilizar HTTPS, as informações transmitidas entre o cliente e o servidor são criptografadas, fornecendo uma camada adicional de segurança contra interceptação de dados.
5. Sites que utilizam HTTPS são exibidos com um ícone de cadeado na barra de endereços do navegador, indicando que a conexão é segura.
6. O uso de HTTPS é especialmente importante para transações bancárias, e-commerce, login em redes sociais e qualquer atividade que envolva troca de informações sensíveis.
7. Sites que utilizam HTTPS são preferidos pelos motores de busca, sendo melhor posicionados nos resultados das pesquisas.
8. O protocolo HTTP utiliza a porta 80 para comunicação, enquanto o HTTPS utiliza a porta 443.
9. A implementação de uma conexão HTTPS requer a instalação de um certificado digital válido no servidor.
10. O uso de HTTPS também garante a integridade dos dados, evitando que as informações sejam alteradas durante a transmissão.

3. Subtópico:
3. Versões do HTTP: HTTP/1.0, HTTP/1.1, e HTTP/2
Assertivas:
1. A versão HTTP/1.0 do protocolo HTTP foi a primeira versão amplamente utilizada e padronizada.
2. A versão HTTP/1.1 do protocolo HTTP trouxe melhorias significativas em termos de eficiência e desempenho em comparação com a versão anterior.
3. A versão HTTP/1.1 do protocolo HTTP utiliza conexões persistentes e permite a reutilização da mesma conexão para várias solicitações.
4. A versão HTTP/1.1 do protocolo HTTP introduziu o uso de cabeçalhos de host nomeados, permitindo que servidores atendam a vários domínios usando um único endereço IP.
5. A versão HTTP/2 do protocolo HTTP é uma atualização significativa em relação às versões anteriores, projetada para melhorar o desempenho e a eficiência do protocolo.
6. A versão HTTP/2 do protocolo HTTP introduziu o conceito de multiplexação, permitindo que várias solicitações e respostas sejam transmitidas simultaneamente por uma única conexão.
7. A versão HTTP/2 do protocolo HTTP utiliza compactação de cabeçalho, reduzindo o tamanho das mensagens transmitidas e melhorando ainda mais o desempenho.
8. A versão HTTP/2 do protocolo HTTP oferece suporte a priorização de fluxo, permitindo que os clientes solicitem prioridades específicas para diferentes tipos de recursos.
9. A versão HTTP/2 do protocolo HTTP implementa o conceito de push de servidor, onde o servidor pode enviar recursos para o cliente antes mesmo de serem solicitados.
10. A versão HTTP/2 do protocolo HTTP é projetada para ser retrocompatível com as versões anteriores, o que facilita a migração gradual para a nova versão.

4. Subtópico:
4. Estrutura de uma requisição e resposta HTTP
Assertivas:
1. A estrutura de uma requisição HTTP inclui um método, um recurso de destino e uma versão da protocolo HTTP.
2. O método GET é utilizado em uma requisição HTTP para solicitar a obtenção de dados de um recurso.
3. Uma requisição HTTP pode conter um header, que é utilizado para enviar informações adicionais sobre a requisição.
4. O header "Host" em uma requisição HTTP é obrigatório e deve conter o nome de domínio do servidor de destino.
5. A estrutura de uma resposta HTTP inclui uma versão do protocolo HTTP, um código de status e um message body.
6. O código de status 200 em uma resposta HTTP indica que a requisição foi bem-sucedida e o conteúdo da resposta está no message body.
7. O código de status 404 em uma resposta HTTP indica que o recurso solicitado não foi encontrado no servidor.
8. O header "Content-Type" em uma resposta HTTP é utilizado para especificar o tipo de mídia do conteúdo da resposta.
9. A resposta HTTP pode conter headers adicionais, como "Cache-Control" e "Content-Encoding", que fornecem informações adicionais sobre a manipulação da resposta.
10. Uma resposta HTTP também pode conter cookies, que são pequenos arquivos de texto armazenados no lado do cliente para rastrear informações de sessão.

5. Subtópico:
5. Métodos de requisição do protocolo HTTP: GET, POST, PUT, DELETE etc.
Assertivas:
1. O método GET é utilizado para solicitar recursos por meio do protocolo HTTP.
2. O método POST é utilizado para enviar dados de um cliente para um servidor por meio do protocolo HTTP.
3. O método PUT é utilizado para substituir completamente uma entidade existente pelo cliente por meio do protocolo HTTP.
4. O método DELETE é utilizado para remover um recurso específico por meio do protocolo HTTP.
5. O método HEAD é utilizado para obter informações sobre o recurso desejado, sem o conteúdo completo, por meio do protocolo HTTP.
6. O método OPTIONS é utilizado para obter as opções de comunicação disponíveis para o recurso alvo por meio do protocolo HTTP.
7. O método TRACE é utilizado para executar um loopback do pedido de cliente para servidor, ajudando na depuração de intermediários por meio do protocolo HTTP.
8. O método CONNECT é utilizado para estabelecer uma conexão de túnel com o servidor, através de um proxy, por meio do protocolo HTTP.
9. O método PATCH é utilizado para aplicar modificações parciais em uma entidade existente por meio do protocolo HTTP.
10. O método OPTIONS retorna os métodos HTTP permitidos para um recurso por meio do cabeçalho Allow.

6. Subtópico:
6. Códigos de status do protocolo HTTP: 200 OK, 404 Not Found etc.
Assertivas:
1. O código de status HTTP 200 OK indica que a requisição foi bem-sucedida e que o conteúdo solicitado está sendo retornado corretamente.
2. O código de status HTTP 404 Not Found indica que o recurso solicitado não foi encontrado no servidor.
3. O código de status HTTP 500 Internal Server Error indica uma falha interna do servidor que impossibilita processar a requisição corretamente.
4. O código de status HTTP 302 Found indica uma redireção temporária para outra página.
5. O código de status HTTP 401 Unauthorized indica que o acesso ao recurso solicitado requer autenticação.
6. O código de status HTTP 403 Forbidden indica que o acesso ao recurso solicitado é proibido.
7. O código de status HTTP 301 Moved Permanently indica uma redireção permanente para outra página.
8. O código de status HTTP 400 Bad Request indica que a requisição feita pelo cliente não pode ser processada devido a erros de sintaxe.
9. O código de status HTTP 201 Created indica que a requisição foi bem-sucedida e resultou na criação de um novo recurso.
10. O código de status HTTP 204 No Content indica que a requisição foi bem-sucedida, mas não há conteúdo para ser retornado.

7. Subtópico:
7. Cookies no contexto do protocolo HTTP
Assertivas:
1. Os cookies são utilizados no protocolo HTTP para armazenar informações sobre sessões e preferências do usuário.

2. Os cookies são enviados e recebidos pelo navegador web através de cabeçalhos HTTP.

3. Os cookies são muito úteis para personalizar a experiência do usuário, oferecendo conteúdos relevantes e lembrando suas preferências.

4. Os cookies podem ser usados para rastrear o comportamento do usuário e coletar informações para fins de análise e marketing.

5. Os cookies no contexto do protocolo HTTP consistem em pares de chave-valor que são armazenados no dispositivo do usuário.

6. Os cookies são armazenados no lado do cliente, ou seja, no dispositivo do usuário, normalmente em forma de arquivos de texto.

7. Os cookies podem expirar após um determinado período de tempo ou serem configurados para durarem apenas até o navegador ser fechado.

8. Os cookies podem ser utilizados para implementar recursos de autenticação de usuários em um site.

9. Os cookies podem ser bloqueados ou excluídos pelo usuário através das configurações do navegador.

10. Os cookies são considerados uma tecnologia fundamental para o funcionamento adequado de muitos sites e aplicações web.

8. Subtópico:
8. Segurança em transações via protocolo HTTP 
Assertivas:
1. O protocolo HTTP não oferece criptografia, tornando as transações inseguras em relação à interceptação de dados.
2. Transações via protocolo HTTP não são recomendadas para o envio de informações confidenciais, como senhas e dados bancários.
3. Quando são realizadas transações via protocolo HTTP, os dados trafegam em texto claro, podendo ser facilmente lidos.
4. As transações via protocolo HTTP são vulneráveis a ataques de interceptação, como o Man-in-the-Middle, onde um agente malicioso pode se passar pelo servidor ou pelo cliente.
5. O protocolo HTTP não oferece garantia de autenticidade, o que possibilita a manipulação das transações por parte de atacantes.
6. Ao utilizar o protocolo HTTP, não há garantia de integridade dos dados, ou seja, os dados podem ser modificados durante a transmissão.
7. O protocolo HTTP não fornece validação de identidade, permitindo que um atacante se passe pelo servidor ou pelo cliente.
8. É altamente recomendável utilizar o protocolo HTTPS para garantir a segurança das transações online.
9. O protocolo HTTPS oferece criptografia de ponta a ponta, protegendo os dados durante a transmissão.
10. O uso do protocolo HTTPS é essencial para garantir a confidencialidade, integridade e autenticidade das transações online.

9. Subtópico:
9. Conceito de Stateless no Protocolo Http 
Assertivas:
1. O conceito de "stateless" no protocolo HTTP significa que o servidor não mantém informações sobre as solicitações anteriores do cliente.
2. No protocolo HTTP, cada solicitação do cliente é tratada de forma independente e isolada, sem referência a solicitações anteriores.
3. A ausência de estado em HTTP permite que as solicitações sejam processadas de forma mais eficiente, uma vez que o servidor não precisa armazenar informações desnecessárias.
4. O estado de uma sessão do usuário não é mantido no lado do servidor no protocolo HTTP stateless.
5. A ausência de estado no HTTP facilita a escalabilidade, pois não é necessário sincronizar dados entre diferentes instâncias de servidores.
6. Uma das principais vantagens do conceito "stateless" no HTTP é a simplicidade, tanto para implementação quanto para a compreensão.
7. A falta de estado no protocolo HTTP aumenta a confiabilidade do sistema, pois não há risco de erros causados por inconsistências de estado.
8. No protocolo HTTP stateless, cada solicitação é autocontida, o que significa que todas as informações necessárias para processá-la estão contidas nela.
9. O conceito de "stateless" no HTTP é uma das características fundamentais do modelo Cliente-Servidor.
10. A arquitetura "stateless" do HTTP permite que as solicitações sejam distribuídas em diferentes servidores sem perda de desempenho.

10. Subtópico:
10. O papel dos Headers na comunicação Http
Assertivas:
1. Os headers na comunicação HTTP são utilizados para transmitir informações adicionais sobre a requisição ou resposta.
2. Os headers são uma parte fundamental dos protocolos de comunicação HTTP/1.1 e HTTP/2.
3. Os headers na comunicação HTTP podem ser utilizados para controlar o cache das informações.
4. Os headers podem ser utilizados para autenticação e autorização de usuários na comunicação HTTP.
5. Os headers Content-Type e Content-Length são utilizados para especificar o tipo de conteúdo e seu tamanho, respectivamente.
6. O header User-Agent é utilizado para identificar o cliente que faz a requisição HTTP.
7. O header Host é utilizado para especificar o nome de domínio do servidor na comunicação HTTP.
8. O header Referer é utilizado para indicar a página de origem da requisição HTTP.
9. O header Accept-Language é utilizado para informar ao servidor quais idiomas o cliente aceita na resposta HTTP.
10. Os headers na comunicação HTTP permitem a personalização e otimização das requisições e respostas trocadas entre cliente e servidor.


