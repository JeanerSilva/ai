Item do edital: 2.1 Kubernetes-   
 
1. Subtópico:
1. Conceitos básicos de Kubernetes
Assertivas:
1. Kubernetes é uma plataforma de código aberto para automação de implantação, escala e gerenciamento de aplicativos em contêineres.
2. O Kubernetes foi desenvolvido pelo Google e atualmente é mantido pela Cloud Native Computing Foundation (CNCF).
3. O Kubernetes permite a orquestração de contêineres em uma infraestrutura distribuída, facilitando o gerenciamento de aplicativos em nuvens públicas e privadas.
4. O mecanismo de escalabilidade do Kubernetes permite aumentar ou diminuir a quantidade de réplicas de um aplicativo em tempo real, conforme a demanda.
5. Um pod no Kubernetes é a menor unidade de implantação e gerenciamento, consistindo em um ou mais contêineres e recursos compartilhados, como armazenamento e endereço IP.
6. O Kubernetes usa um plano de controle (control plane) para monitorar e gerenciar o estado dos pods, garantindo que eles estejam sempre em execução e saudáveis.
7. O Kubernetes é capaz de realizar balanceamento de carga entre os pods de um aplicativo, distribuindo as requisições de forma equilibrada para os contêineres em execução.
8. No Kubernetes, a comunicação entre os pods em execução é possibilitada por meio do serviço (service), que permite a descoberta e o acesso a aplicativos executando em diferentes pods.
9. O Kubernetes possui recursos avançados de auto-recuperação, monitorando continuamente os pods e reiniciando-os em caso de falhas.
10. O Kubernetes possui uma extensa documentação, bem como uma comunidade ativa de desenvolvedores, facilitando o suporte e o aprendizado sobre essa tecnologia.

2. Subtópico:
2. Arquitetura e componentes do Kubernetes
Assertivas:
1. O Kubernetes é uma plataforma de orquestração de contêineres de código aberto amplamente utilizada no gerenciamento de aplicações em escala.
2. O Kubernetes é composto por um cluster, que consiste em um conjunto de nós ou máquinas que executam os contêineres.
3. O Kubernetes utiliza os conceitos de pod, que é a unidade básica de implantação, e de serviço, que é responsável por expor a aplicação para a rede.
4. Os componentes principais do Kubernetes incluem o kube-apiserver, kube-controller-manager, kube-scheduler e kubelet.
5. O kube-apiserver é o componente responsável por expor a API do Kubernetes e autenticar as requisições dos usuários.
6. O kube-controller-manager é responsável pelo controle e gerenciamento de diferentes recursos do cluster, como a replicação de pods e o balanceamento de carga.
7. O kube-scheduler é responsável por atribuir os pods aos nós disponíveis com base nas demandas de recursos e nas políticas de implantação.
8. O kubelet é responsável por garantir que os pods estejam em execução em seus respectivos nós, monitorando seu estado e reportando ao kube-apiserver.
9. Além desses componentes principais, o Kubernetes também inclui o etcd, um banco de dados distribuído consistente que armazena o estado do cluster.
10. A arquitetura do Kubernetes permite alta disponibilidade, escalabilidade e resiliência, tornando-a uma escolha popular para ambientes de produção.

3. Subtópico:
3. Processo de instalação e configuração do Kubernetes
Assertivas:
1. O processo de instalação e configuração do Kubernetes envolve a implantação de um cluster de nós que irão executar os componentes do Kubernetes.
2. A implantação do Kubernetes pode ser realizada em diferentes plataformas, como em nuvem (por exemplo, AWS, GCP, Azure) ou em servidores físicos.
3. Durante a instalação do Kubernetes, é necessário configurar um plano de controle, que consiste em componentes como o API server, o controller manager e o etcd.
4. Os nós do cluster Kubernetes devem ser configurados com um container runtime, como o Docker, para que possam executar e gerenciar contêineres.
5. Durante a configuração do Kubernetes, é necessário definir um pod network, que permite a comunicação entre os contêineres executados nos diferentes nós do cluster.
6. Após a instalação e configuração do Kubernetes, é possível utilizar o kubectl, ferramenta de linha de comando, para interagir com o cluster e executar tarefas como criar pods, serviços e deployments.
7. O processo de instalação e configuração do Kubernetes requer conhecimento em administração de sistemas e redes, bem como experiência com containers e orquestração de contêineres.
8. Durante a instalação, é possível escolher entre diferentes versões do Kubernetes, sendo importante verificar a compatibilidade da versão com outros componentes e recursos utilizados.
9. É possível configurar a escalabilidade automática no Kubernetes, permitindo que o cluster se adapte à demanda de recursos de acordo com o uso de contêineres.
10. O Kubernetes oferece diferentes mecanismos de autenticação e autorização, permitindo a configuração de políticas de acesso aos recursos do cluster.

4. Subtópico:
4. Gerenciamento de clusters no Kubernetes
Assertivas:
1. O Kubernetes é uma plataforma de código aberto para automação de operações de aplicativos em containers.
2. O gerenciamento de clusters no Kubernetes envolve a criação, configuração e gerenciamento de grupos de nós que executam aplicativos em containers.
3. Um cluster no Kubernetes é composto por um conjunto de nós de trabalho, um mestre e um conjunto de serviços adicionais.
4. O gerenciamento de clusters no Kubernetes permite escalabilidade horizontal, ou seja, adicionar e remover nós de trabalho conforme necessário para lidar com a demanda do aplicativo.
5. No Kubernetes, o agendamento de pods, que são grupos de um ou mais containers, é feito de forma automática e eficiente pelos nós de trabalho.
6. O Kubernetes fornece tolerância a falhas em clusters, permitindo que os nós de trabalho falhem e sejam substituídos sem impacto para a disponibilidade e o desempenho do aplicativo.
7. O Kubernetes oferece recursos avançados de balanceamento de carga para garantir que as demandas de tráfego sejam distribuídas de forma equilibrada entre os nós de trabalho.
8. O gerenciamento de clusters no Kubernetes inclui recursos para monitoramento e registro de métricas e logs dos nós de trabalho e dos aplicativos em execução.
9. O Kubernetes permite a utilização de políticas de segurança para controlar o acesso aos recursos do cluster, garantindo a segregação e a proteção dos dados.
10. No Kubernetes, é possível atualizar aplicativos sem tempo de inatividade usando estratégias de implantação, como canary e blue-green, proporcionando alta disponibilidade e confiabilidade.

5. Subtópico:
5. Criação e gerenciamento de Pods no Kubernetes
Assertivas:
1. Os Pods são a menor unidade de implantação no Kubernetes, sendo responsáveis por executar um ou mais containers.
2. Os Pods são efêmeros e podem ser criados e destruídos de forma dinâmica pelo Kubernetes.
3. Um Pod no Kubernetes possui seu próprio endereço IP interno, possibilitando a comunicação entre os containers que estão sendo executados dentro dele.
4. É possível associar um Pod a um serviço no Kubernetes para expor sua funcionalidade para os demais componentes do cluster.
5. A escala horizontal de um aplicativo no Kubernetes é realizada através da criação de múltiplos pods.
6. O gerenciamento e a escalabilidade dos Pods no Kubernetes podem ser feitos manualmente ou de forma automática, utilizando recursos como ReplicaSets, Deployments e StatefulSets.
7. Ao criar um Pod no Kubernetes, é possível definir políticas de tolerância a falhas para garantir a disponibilidade e a confiabilidade dos containers executados.
8. O Kubernetes possui recursos avançados para lidar com a reinicialização de Pods, como a definição de políticas de reinicialização e a tolerância a falhas.
9. É possível monitorar e gerenciar os recursos de um Pod, como CPU e memória, definindo limites no momento de sua criação.
10. Através do Kubernetes, é possível gerenciar e orquestrar Pods em múltiplas máquinas virtuais ou servidores físicos, promovendo a escalabilidade e a resiliência dos aplicativos.

6. Subtópico:
6. Serviços em Kubernetes: definições, tipos e usos 
Assertivas:
1. Os serviços em Kubernetes são recursos que permitem expor aplicativos em execução dentro de um cluster.
2. Os serviços em Kubernetes são utilizados para fornecer conectividade e comunicação entre os diferentes componentes do cluster.
3. Existem três tipos principais de serviços em Kubernetes: ClusterIP, NodePort e LoadBalancer.
4. O serviço do tipo ClusterIP é usado para fornecer uma IP interno estável para acessar um determinado conjunto de pods.
5. O serviço do tipo NodePort permite expor o aplicativo em execução em um determinado conjunto de pods para o exterior do cluster através de uma porta específica em cada nó.
6. O serviço do tipo LoadBalancer é utilizado para provisionar um balanceador de carga externo para distribuir o tráfego de entrada entre os diferentes nós do cluster.
7. Os serviços em Kubernetes são criados e gerenciados através da definição de objetos YAML.
8. É possível usar rótulos e seletores para direcionar o tráfego para um determinado conjunto de pods usando os serviços em Kubernetes.
9. Os serviços em Kubernetes podem ser atualizados e redimensionados facilmente, sem impactar a disponibilidade dos aplicativos em execução.
10. Os serviços em Kubernetes são essenciais para implementar arquiteturas de microservices eficientes, permitindo o escalonamento e a comunicação entre diferentes componentes de forma flexível e resiliente.

7. Subtópico:
7. Implementação de volumes persistentes no Kubernetes 
Assertivas:
1. A implementação de volumes persistentes no Kubernetes permite o armazenamento de dados de forma durável e independente de um contêiner específico.
2. No Kubernetes, os volumes persistentes são criados e gerenciados por controladores de volume.
3. Os volumes persistentes no Kubernetes podem ser utilizados para compartilhamento de dados entre diferentes pods.
4. A implantação de volumes persistentes permite que os dados persistam mesmo após a finalização de um pod no Kubernetes.
5. No Kubernetes, é possível configurar políticas de retenção de dados em volumes persistentes.
6. Os volumes persistentes no Kubernetes podem ser alocados em diferentes tipos de armazenamento, como discos físicos, armazenamentos em nuvem ou armazenamentos de rede.
7. A implementação de volumes persistentes no Kubernetes é uma funcionalidade essencial para a execução de aplicações de dados em contêineres.
8. Os volumes persistentes no Kubernetes são isolados do ciclo de vida dos pods, permitindo que os dados persistam mesmo quando os pods são recriados.
9. No Kubernetes, os volumes persistentes podem ser montados como diretórios ou arquivos dentro dos contêineres.
10. A implementação de volumes persistentes no Kubernetes contribui para a escalabilidade e resiliência das aplicações ao garantir a persistência dos dados em caso de falhas ou reinicializações.

8. Subtópico:
8. Configurações de segurança no ambiente do Kubernetes 
Assertivas:
1. É possível configurar políticas de acesso granulares no Kubernetes para controlar o acesso a recursos e ações específicos.
2. É recomendado habilitar a autenticação baseada em token no cluster do Kubernetes para garantir a segurança das conexões.
3. O uso de namespaces no Kubernetes ajuda a separar e isolar aplicações e recursos, contribuindo para uma maior segurança.
4. É importante habilitar a criptografia dos dados em repouso no cluster do Kubernetes para proteger informações sensíveis.
5. Configurar limites de recursos no Kubernetes é fundamental para prevenir a sobrecarga do cluster e garantir a disponibilidade dos serviços.
6. É possível utilizar Network Policies no Kubernetes para controlar o tráfego de rede entre diferentes pods e namespaces.
7. É recomendado utilizar certificados TLS para proteger as comunicações entre os componentes do Kubernetes.
8. Configurar roles e role bindings no Kubernetes ajuda a definir e limitar as permissões de acesso dos usuários e serviços.
9. É importante implementar mecanismos de monitoramento e rastreamento de eventos no Kubernetes para identificar e responder a possíveis ameaças de segurança.
10. Atualizar regularmente as versões do Kubernetes e de suas dependências é essencial para aproveitar as correções de segurança mais recentes.

9. Subtópico:
9. Uso dos namespaces para isolar ambientes dentro do cluster do kubernetes.
Assertivas:
1. O uso de namespaces no Kubernetes permite a criação de ambientes isolados dentro de um cluster.
2. Os namespaces são utilizados para garantir a segregação lógica de recursos e objetos no Kubernetes.
3. O uso de namespaces permite que diferentes equipes ou projetos compartilhem um cluster Kubernetes de forma independente.
4. Quando um objeto é criado dentro de um namespace, ele é automaticamente associado ao mesmo e permanece isolado de outros objetos em namespaces diferentes.
5. O Kubernetes fornece um conjunto padrão de namespaces, como "default", "kube-system" e "kube-public", que são criados durante a instalação.
6. É possível criar namespaces personalizados de acordo com as necessidades específicas de uma organização.
7. Cada namespace possui sua própria lista de pods, serviços, volumes, configmaps, entre outros recursos.
8. É possível definir políticas de acesso e limites de recursos específicos para cada namespace.
9. O comando "kubectl" é utilizado para criar, listar, modificar e gerenciar namespaces no Kubernetes.
10. Os namespaces são uma importante ferramenta para facilitar a identificação e organização de recursos em um cluster Kubernetes.

10. Subtópico:
10. Princípios da automação e escalabilidade com o uso do kubernetes
Assertivas:
1. O Kubernetes é uma plataforma open-source para automação de implantação, escalonamento e gerenciamento de aplicativos em contêineres.
2. Um dos princípios da automação com o Kubernetes é a capacidade de definir a infraestrutura como código, permitindo a criação de ambientes replicáveis e consistentes.
3. Com o uso do Kubernetes, é possível escalar verticalmente (aumentar a capacidade de recursos de um único nó) e horizontalmente (adicionar mais nós à infraestrutura) de forma automática.
4. Ao utilizar o Kubernetes, é possível implementar uma abordagem de microsserviços, onde a aplicação é dividida em componentes independentes que podem ser gerenciados separadamente.
5. Um dos benefícios da automação com o Kubernetes é a maior disponibilidade dos aplicativos, pois o sistema é capaz de autorecuperar falhas e redirecionar o tráfego para instâncias saudáveis.
6. A escalabilidade com o Kubernetes é baseada em métricas de utilização de recursos, como CPU, memória e tráfego de rede, permitindo um dimensionamento automático de acordo com a demanda.
7. O Kubernetes suporta a replicação de aplicativos, permitindo a criação de múltiplas instâncias para melhorar a disponibilidade e distribuir a carga de trabalho.
8. Um dos princípios da automação com o Kubernetes é a capacidade de gerenciamento declarativo, onde o estado desejado da infraestrutura é especificado e o sistema se encarrega de realizar as ações necessárias para atingir esse estado.
9. Com o uso do Kubernetes, é possível criar clusters de servidores em diferentes provedores de nuvem ou ambientes on-premise, permitindo uma maior flexibilidade na escolha da infraestrutura.
10. O Kubernetes possui um ecossistema rico de ferramentas e serviços complementares, como o Helm para gerenciamento de pacotes, o Prometheus para monitoramento e o Istio para controle de tráfego e segurança em microsserviços.


